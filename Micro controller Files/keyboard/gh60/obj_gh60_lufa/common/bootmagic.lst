   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB11:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 BF92      		push r11
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 11, -2
  22 0002 CF92      		push r12
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 12, -3
  26 0004 DF92      		push r13
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 13, -4
  30 0006 EF92      		push r14
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 14, -5
  34 0008 FF92      		push r15
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 15, -6
  38 000a 0F93      		push r16
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 16, -7
  42 000c 1F93      		push r17
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 17, -8
  46 000e CF93      		push r28
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 28, -9
  50 0010 DF93      		push r29
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 29, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
  58 0012 EC01      		movw r28,r24
  59               	.LVL1:
  60               	.LBB6:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  61               		.loc 1 116 0
  62 0014 B12C      		mov r11,__zero_reg__
  63               	.LVL2:
  64               	.L9:
  65               	.LBB7:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  66               		.loc 1 117 0
  67 0016 8B2D      		mov r24,r11
  68 0018 0E94 0000 		call matrix_get_row
  69               	.LVL3:
  70 001c 6B01      		movw r12,r22
  71 001e 7C01      		movw r14,r24
  72               	.LVL4:
  73 0020 00E0      		ldi r16,0
  74 0022 10E0      		ldi r17,0
  75               	.LVL5:
  76               	.L8:
  77               	.LBB8:
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  78               		.loc 1 119 0
  79 0024 B701      		movw r22,r14
  80 0026 A601      		movw r20,r12
  81 0028 002E      		mov r0,r16
  82 002a 00C0      		rjmp 2f
  83               		1:
  84 002c 7695      		lsr r23
  85 002e 6795      		ror r22
  86 0030 5795      		ror r21
  87 0032 4795      		ror r20
  88               		2:
  89 0034 0A94      		dec r0
  90 0036 02F4      		brpl 1b
  91 0038 40FF      		sbrs r20,0
  92 003a 00C0      		rjmp .L2
  93               	.LBB9:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  94               		.loc 1 121 0
  95 003c 602F      		mov r22,r16
  96 003e 7B2D      		mov r23,r11
  97 0040 80E0      		ldi r24,0
  98               	.LVL6:
  99 0042 0E94 0000 		call action_for_key
 100               	.LVL7:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
 101               		.loc 1 122 0
 102 0046 8C17      		cp r24,r28
 103 0048 9D07      		cpc r25,r29
 104               	.LVL8:
 105 004a 01F0      		breq .L3
 106               		.loc 1 122 0 is_stmt 0 discriminator 1
 107 004c 292F      		mov r18,r25
 108 004e 207E      		andi r18,lo8(-32)
 109 0050 392F      		mov r19,r25
 110 0052 307C      		andi r19,lo8(-64)
 111 0054 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 112               		.loc 1 126 0 is_stmt 1
 113 0056 203A      		cpi r18,lo8(-96)
 114 0058 01F4      		brne .L2
 115               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 116               		.loc 1 129 0
 117 005a 282F      		mov r18,r24
 118 005c 30E0      		ldi r19,0
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 119               		.loc 1 128 0
 120 005e 2C17      		cp r18,r28
 121 0060 3D07      		cpc r19,r29
 122 0062 01F4      		brne .L2
 123               	.L3:
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 124               		.loc 1 130 0
 125 0064 81E0      		ldi r24,lo8(1)
 126               	.LVL9:
 127 0066 00C0      		rjmp .L6
 128               	.LVL10:
 129               	.L2:
 130 0068 0F5F      		subi r16,-1
 131 006a 1F4F      		sbci r17,-1
 132               	.LVL11:
 133               	.LBE9:
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 134               		.loc 1 118 0
 135 006c 0331      		cpi r16,19
 136 006e 1105      		cpc r17,__zero_reg__
 137 0070 01F4      		brne .L8
 138               	.LBE8:
 139               	.LBE7:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 140               		.loc 1 116 0
 141 0072 B394      		inc r11
 142               	.LVL12:
 143 0074 85E0      		ldi r24,lo8(5)
 144               	.LVL13:
 145 0076 B812      		cpse r11,r24
 146 0078 00C0      		rjmp .L9
 147               	.LBE6:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 148               		.loc 1 135 0
 149 007a 80E0      		ldi r24,0
 150               	.LVL14:
 151               	.L6:
 152               	/* epilogue start */
 136:../../tmk_core/common/bootmagic.c **** }
 153               		.loc 1 136 0
 154 007c DF91      		pop r29
 155 007e CF91      		pop r28
 156               	.LVL15:
 157 0080 1F91      		pop r17
 158 0082 0F91      		pop r16
 159 0084 FF90      		pop r15
 160 0086 EF90      		pop r14
 161 0088 DF90      		pop r13
 162 008a CF90      		pop r12
 163               	.LVL16:
 164 008c BF90      		pop r11
 165               	.LVL17:
 166 008e 0895      		ret
 167               		.cfi_endproc
 168               	.LFE11:
 170               		.section	.text.bootmagic_scan_key,"ax",@progbits
 171               	.global	bootmagic_scan_key
 173               	bootmagic_scan_key:
 174               	.LFB12:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 175               		.loc 1 139 0
 176               		.cfi_startproc
 177               	.LVL18:
 178 0000 CF93      		push r28
 179               	.LCFI9:
 180               		.cfi_def_cfa_offset 3
 181               		.cfi_offset 28, -2
 182 0002 DF93      		push r29
 183               	.LCFI10:
 184               		.cfi_def_cfa_offset 4
 185               		.cfi_offset 29, -3
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 2 */
 189               	.L__stack_usage = 2
 190 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 191               		.loc 1 140 0
 192 0006 8CE2      		ldi r24,lo8(44)
 193 0008 90E0      		ldi r25,0
 194               	.LVL19:
 195 000a 0E94 0000 		call scan_key
 196               	.LVL20:
 197 000e 8823      		tst r24
 198 0010 01F0      		breq .L19
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 199               		.loc 1 142 0
 200 0012 CE01      		movw r24,r28
 201               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 202               		.loc 1 143 0
 203 0014 DF91      		pop r29
 204 0016 CF91      		pop r28
 205               	.LVL21:
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 206               		.loc 1 142 0
 207 0018 0C94 0000 		jmp scan_key
 208               	.LVL22:
 209               	.L19:
 210               		.loc 1 143 0
 211 001c 80E0      		ldi r24,0
 212               	/* epilogue start */
 213 001e DF91      		pop r29
 214 0020 CF91      		pop r28
 215               	.LVL23:
 216 0022 0895      		ret
 217               		.cfi_endproc
 218               	.LFE12:
 220               		.section	.text.bootmagic,"ax",@progbits
 221               	.global	bootmagic
 223               	bootmagic:
 224               	.LFB10:
  18:../../tmk_core/common/bootmagic.c **** {
 225               		.loc 1 18 0
 226               		.cfi_startproc
 227 0000 CF93      		push r28
 228               	.LCFI11:
 229               		.cfi_def_cfa_offset 3
 230               		.cfi_offset 28, -2
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 1 */
 234               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
 235               		.loc 1 20 0
 236 0002 0E94 0000 		call eeconfig_is_enabled
 237               	.LVL24:
 238 0006 8111      		cpse r24,__zero_reg__
 239 0008 00C0      		rjmp .L21
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 240               		.loc 1 21 0
 241 000a 0E94 0000 		call eeconfig_init
 242               	.LVL25:
 243               	.L21:
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
 244               		.loc 1 25 0
 245 000e 80E0      		ldi r24,lo8(__c.2471)
 246 0010 90E0      		ldi r25,hi8(__c.2471)
 247 0012 0E94 0000 		call xputs
 248               	.LVL26:
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 249               		.loc 1 27 0
 250 0016 C5E6      		ldi r28,lo8(101)
 251               	.LVL27:
 252               	.L22:
 253 0018 C150      		subi r28,lo8(-(-1))
 254               	.LVL28:
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 255               		.loc 1 27 0 is_stmt 0 discriminator 1
 256 001a 01F0      		breq .L101
 257               	.LVL29:
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 258               		.loc 1 27 0 discriminator 2
 259 001c 0E94 0000 		call matrix_scan
 260               	.LVL30:
 261               	.LBB10:
 262               	.LBB11:
 263               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 264               		.loc 2 163 0 is_stmt 1 discriminator 2
 265 0020 8FE3      		ldi r24,lo8(-25537)
 266 0022 9CE9      		ldi r25,hi8(-25537)
 267 0024 0197      		1: sbiw r24,1
 268 0026 01F4      		brne 1b
 269 0028 00C0      		rjmp .
 270 002a 0000      		nop
 271 002c 00C0      		rjmp .L22
 272               	.LVL31:
 273               	.L101:
 274               	.LBE11:
 275               	.LBE10:
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 276               		.loc 1 28 0
 277 002e 80E0      		ldi r24,lo8(__c.2477)
 278 0030 90E0      		ldi r25,hi8(__c.2477)
 279 0032 0E94 0000 		call xputs
 280               	.LVL32:
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
 281               		.loc 1 31 0
 282 0036 89E2      		ldi r24,lo8(41)
 283 0038 90E0      		ldi r25,0
 284 003a 0E94 0000 		call bootmagic_scan_key
 285               	.LVL33:
 286 003e 8111      		cpse r24,__zero_reg__
 287 0040 00C0      		rjmp .L20
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
 288               		.loc 1 36 0
 289 0042 8AE2      		ldi r24,lo8(42)
 290 0044 90E0      		ldi r25,0
 291 0046 0E94 0000 		call bootmagic_scan_key
 292               	.LVL34:
 293 004a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 294               		.loc 1 37 0
 295 004c 0E94 0000 		call eeconfig_init
 296               	.LVL35:
 297               	.L25:
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
 298               		.loc 1 41 0
 299 0050 85E0      		ldi r24,lo8(5)
 300 0052 90E0      		ldi r25,0
 301 0054 0E94 0000 		call bootmagic_scan_key
 302               	.LVL36:
 303 0058 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 304               		.loc 1 42 0
 305 005a 0E94 0000 		call bootloader_jump
 306               	.LVL37:
 307               	.L26:
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
 308               		.loc 1 46 0
 309 005e 0E94 0000 		call hook_bootmagic
 310               	.LVL38:
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
 311               		.loc 1 49 0
 312 0062 0E94 0000 		call eeconfig_read_debug
 313               	.LVL39:
 314 0066 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 315               		.loc 1 50 0
 316 006a 87E0      		ldi r24,lo8(7)
 317 006c 90E0      		ldi r25,0
 318 006e 0E94 0000 		call bootmagic_scan_key
 319               	.LVL40:
 320 0072 8823      		tst r24
 321 0074 01F0      		breq .L27
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 322               		.loc 1 51 0
 323 0076 8BE1      		ldi r24,lo8(27)
 324 0078 90E0      		ldi r25,0
 325 007a 0E94 0000 		call bootmagic_scan_key
 326               	.LVL41:
 327 007e 8823      		tst r24
 328 0080 01F0      		breq .L28
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 329               		.loc 1 52 0
 330 0082 9091 0000 		lds r25,debug_config
 331 0086 91FB      		bst r25,1
 332 0088 8827      		clr r24
 333 008a 80F9      		bld r24,0
 334 008c 21E0      		ldi r18,lo8(1)
 335 008e 8227      		eor r24,r18
 336 0090 80FB      		bst r24,0
 337 0092 91F9      		bld r25,1
 338 0094 00C0      		rjmp .L99
 339               	.L28:
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 340               		.loc 1 53 0
 341 0096 8EE0      		ldi r24,lo8(14)
 342 0098 90E0      		ldi r25,0
 343 009a 0E94 0000 		call bootmagic_scan_key
 344               	.LVL42:
 345 009e 8823      		tst r24
 346 00a0 01F0      		breq .L29
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 347               		.loc 1 54 0
 348 00a2 9091 0000 		lds r25,debug_config
 349 00a6 92FB      		bst r25,2
 350 00a8 8827      		clr r24
 351 00aa 80F9      		bld r24,0
 352 00ac 21E0      		ldi r18,lo8(1)
 353 00ae 8227      		eor r24,r18
 354 00b0 80FB      		bst r24,0
 355 00b2 92F9      		bld r25,2
 356 00b4 00C0      		rjmp .L99
 357               	.L29:
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 358               		.loc 1 55 0
 359 00b6 80E1      		ldi r24,lo8(16)
 360 00b8 90E0      		ldi r25,0
 361 00ba 0E94 0000 		call bootmagic_scan_key
 362               	.LVL43:
 363 00be 9091 0000 		lds r25,debug_config
 364 00c2 8823      		tst r24
 365 00c4 01F0      		breq .L30
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 366               		.loc 1 56 0
 367 00c6 93FB      		bst r25,3
 368 00c8 8827      		clr r24
 369 00ca 80F9      		bld r24,0
 370 00cc 21E0      		ldi r18,lo8(1)
 371 00ce 8227      		eor r24,r18
 372 00d0 80FB      		bst r24,0
 373 00d2 93F9      		bld r25,3
 374 00d4 00C0      		rjmp .L99
 375               	.L30:
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
 376               		.loc 1 58 0
 377 00d6 892F      		mov r24,r25
 378 00d8 8095      		com r24
 379 00da 80FB      		bst r24,0
 380 00dc 90F9      		bld r25,0
 381               	.L99:
 382 00de 9093 0000 		sts debug_config,r25
 383               	.L27:
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
 384               		.loc 1 61 0
 385 00e2 8091 0000 		lds r24,debug_config
 386 00e6 0E94 0000 		call eeconfig_write_debug
 387               	.LVL44:
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
 388               		.loc 1 64 0
 389 00ea 0E94 0000 		call eeconfig_read_keymap
 390               	.LVL45:
 391 00ee 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 392               		.loc 1 65 0
 393 00f2 80EE      		ldi r24,lo8(-32)
 394 00f4 90E0      		ldi r25,0
 395 00f6 0E94 0000 		call bootmagic_scan_key
 396               	.LVL46:
 397 00fa 8823      		tst r24
 398 00fc 01F0      		breq .L31
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 399               		.loc 1 66 0
 400 00fe 8091 0000 		lds r24,keymap_config
 401 0102 982F      		mov r25,r24
 402 0104 9095      		com r25
 403 0106 90FB      		bst r25,0
 404 0108 80F9      		bld r24,0
 405 010a 8093 0000 		sts keymap_config,r24
 406               	.L31:
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
 407               		.loc 1 68 0
 408 010e 89E3      		ldi r24,lo8(57)
 409 0110 90E0      		ldi r25,0
 410 0112 0E94 0000 		call bootmagic_scan_key
 411               	.LVL47:
 412 0116 8823      		tst r24
 413 0118 01F0      		breq .L32
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 414               		.loc 1 69 0
 415 011a 9091 0000 		lds r25,keymap_config
 416 011e 91FB      		bst r25,1
 417 0120 8827      		clr r24
 418 0122 80F9      		bld r24,0
 419 0124 21E0      		ldi r18,lo8(1)
 420 0126 8227      		eor r24,r18
 421 0128 80FB      		bst r24,0
 422 012a 91F9      		bld r25,1
 423 012c 9093 0000 		sts keymap_config,r25
 424               	.L32:
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
 425               		.loc 1 71 0
 426 0130 82EE      		ldi r24,lo8(-30)
 427 0132 90E0      		ldi r25,0
 428 0134 0E94 0000 		call bootmagic_scan_key
 429               	.LVL48:
 430 0138 8823      		tst r24
 431 013a 01F0      		breq .L33
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 432               		.loc 1 72 0
 433 013c 9091 0000 		lds r25,keymap_config
 434 0140 92FB      		bst r25,2
 435 0142 8827      		clr r24
 436 0144 80F9      		bld r24,0
 437 0146 21E0      		ldi r18,lo8(1)
 438 0148 8227      		eor r24,r18
 439 014a 80FB      		bst r24,0
 440 014c 92F9      		bld r25,2
 441 014e 9093 0000 		sts keymap_config,r25
 442               	.L33:
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
 443               		.loc 1 74 0
 444 0152 86EE      		ldi r24,lo8(-26)
 445 0154 90E0      		ldi r25,0
 446 0156 0E94 0000 		call bootmagic_scan_key
 447               	.LVL49:
 448 015a 8823      		tst r24
 449 015c 01F0      		breq .L34
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 450               		.loc 1 75 0
 451 015e 9091 0000 		lds r25,keymap_config
 452 0162 93FB      		bst r25,3
 453 0164 8827      		clr r24
 454 0166 80F9      		bld r24,0
 455 0168 21E0      		ldi r18,lo8(1)
 456 016a 8227      		eor r24,r18
 457 016c 80FB      		bst r24,0
 458 016e 93F9      		bld r25,3
 459 0170 9093 0000 		sts keymap_config,r25
 460               	.L34:
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
 461               		.loc 1 77 0
 462 0174 83EE      		ldi r24,lo8(-29)
 463 0176 90E0      		ldi r25,0
 464 0178 0E94 0000 		call bootmagic_scan_key
 465               	.LVL50:
 466 017c 8823      		tst r24
 467 017e 01F0      		breq .L35
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 468               		.loc 1 78 0
 469 0180 9091 0000 		lds r25,keymap_config
 470 0184 94FB      		bst r25,4
 471 0186 8827      		clr r24
 472 0188 80F9      		bld r24,0
 473 018a 21E0      		ldi r18,lo8(1)
 474 018c 8227      		eor r24,r18
 475 018e 80FB      		bst r24,0
 476 0190 94F9      		bld r25,4
 477 0192 9093 0000 		sts keymap_config,r25
 478               	.L35:
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
 479               		.loc 1 80 0
 480 0196 85E3      		ldi r24,lo8(53)
 481 0198 90E0      		ldi r25,0
 482 019a 0E94 0000 		call bootmagic_scan_key
 483               	.LVL51:
 484 019e 8823      		tst r24
 485 01a0 01F0      		breq .L36
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 486               		.loc 1 81 0
 487 01a2 9091 0000 		lds r25,keymap_config
 488 01a6 95FB      		bst r25,5
 489 01a8 8827      		clr r24
 490 01aa 80F9      		bld r24,0
 491 01ac 21E0      		ldi r18,lo8(1)
 492 01ae 8227      		eor r24,r18
 493 01b0 80FB      		bst r24,0
 494 01b2 95F9      		bld r25,5
 495 01b4 9093 0000 		sts keymap_config,r25
 496               	.L36:
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
 497               		.loc 1 83 0
 498 01b8 81E3      		ldi r24,lo8(49)
 499 01ba 90E0      		ldi r25,0
 500 01bc 0E94 0000 		call bootmagic_scan_key
 501               	.LVL52:
 502 01c0 8823      		tst r24
 503 01c2 01F0      		breq .L37
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 504               		.loc 1 84 0
 505 01c4 9091 0000 		lds r25,keymap_config
 506 01c8 96FB      		bst r25,6
 507 01ca 8827      		clr r24
 508 01cc 80F9      		bld r24,0
 509 01ce 21E0      		ldi r18,lo8(1)
 510 01d0 8227      		eor r24,r18
 511 01d2 80FB      		bst r24,0
 512 01d4 96F9      		bld r25,6
 513 01d6 9093 0000 		sts keymap_config,r25
 514               	.L37:
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
 515               		.loc 1 86 0
 516 01da 81E1      		ldi r24,lo8(17)
 517 01dc 90E0      		ldi r25,0
 518 01de 0E94 0000 		call bootmagic_scan_key
 519               	.LVL53:
 520 01e2 8823      		tst r24
 521 01e4 01F0      		breq .L38
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 522               		.loc 1 87 0
 523 01e6 9091 0000 		lds r25,keymap_config
 524 01ea 97FB      		bst r25,7
 525 01ec 8827      		clr r24
 526 01ee 80F9      		bld r24,0
 527 01f0 21E0      		ldi r18,lo8(1)
 528 01f2 8227      		eor r24,r18
 529 01f4 80FB      		bst r24,0
 530 01f6 97F9      		bld r25,7
 531 01f8 9093 0000 		sts keymap_config,r25
 532               	.L38:
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
 533               		.loc 1 89 0
 534 01fc 8091 0000 		lds r24,keymap_config
 535 0200 0E94 0000 		call eeconfig_write_keymap
 536               	.LVL54:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 537               		.loc 1 97 0
 538 0204 87E2      		ldi r24,lo8(39)
 539 0206 90E0      		ldi r25,0
 540 0208 0E94 0000 		call bootmagic_scan_key
 541               	.LVL55:
 542 020c C82F      		mov r28,r24
 543               	.LVL56:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 544               		.loc 1 98 0
 545 020e 8EE1      		ldi r24,lo8(30)
 546 0210 90E0      		ldi r25,0
 547               	.LVL57:
 548 0212 0E94 0000 		call bootmagic_scan_key
 549               	.LVL58:
 550 0216 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 551               		.loc 1 98 0 is_stmt 0 discriminator 1
 552 0218 C260      		ori r28,lo8(2)
 553               	.LVL59:
 554               	.L39:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 555               		.loc 1 99 0 is_stmt 1
 556 021a 8FE1      		ldi r24,lo8(31)
 557 021c 90E0      		ldi r25,0
 558 021e 0E94 0000 		call bootmagic_scan_key
 559               	.LVL60:
 560 0222 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 561               		.loc 1 99 0 is_stmt 0 discriminator 1
 562 0224 C460      		ori r28,lo8(4)
 563               	.LVL61:
 564               	.L40:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 565               		.loc 1 100 0 is_stmt 1
 566 0226 80E2      		ldi r24,lo8(32)
 567 0228 90E0      		ldi r25,0
 568 022a 0E94 0000 		call bootmagic_scan_key
 569               	.LVL62:
 570 022e 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 571               		.loc 1 100 0 is_stmt 0 discriminator 1
 572 0230 C860      		ori r28,lo8(8)
 573               	.LVL63:
 574               	.L41:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 575               		.loc 1 101 0 is_stmt 1
 576 0232 81E2      		ldi r24,lo8(33)
 577 0234 90E0      		ldi r25,0
 578 0236 0E94 0000 		call bootmagic_scan_key
 579               	.LVL64:
 580 023a 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 581               		.loc 1 101 0 is_stmt 0 discriminator 1
 582 023c C061      		ori r28,lo8(16)
 583               	.LVL65:
 584               	.L42:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 585               		.loc 1 102 0 is_stmt 1
 586 023e 82E2      		ldi r24,lo8(34)
 587 0240 90E0      		ldi r25,0
 588 0242 0E94 0000 		call bootmagic_scan_key
 589               	.LVL66:
 590 0246 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 591               		.loc 1 102 0 is_stmt 0 discriminator 1
 592 0248 C062      		ori r28,lo8(32)
 593               	.LVL67:
 594               	.L43:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 595               		.loc 1 103 0 is_stmt 1
 596 024a 83E2      		ldi r24,lo8(35)
 597 024c 90E0      		ldi r25,0
 598 024e 0E94 0000 		call bootmagic_scan_key
 599               	.LVL68:
 600 0252 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 601               		.loc 1 103 0 is_stmt 0 discriminator 1
 602 0254 C064      		ori r28,lo8(64)
 603               	.LVL69:
 604               	.L44:
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 605               		.loc 1 104 0 is_stmt 1
 606 0256 84E2      		ldi r24,lo8(36)
 607 0258 90E0      		ldi r25,0
 608 025a 0E94 0000 		call bootmagic_scan_key
 609               	.LVL70:
 610 025e 8823      		tst r24
 611 0260 01F0      		breq .L45
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 612               		.loc 1 104 0 is_stmt 0 discriminator 1
 613 0262 C068      		ori r28,lo8(-128)
 614               	.LVL71:
 615 0264 00C0      		rjmp .L46
 616               	.L45:
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 617               		.loc 1 105 0 is_stmt 1
 618 0266 CC23      		tst r28
 619 0268 01F0      		breq .L47
 620               	.L46:
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 621               		.loc 1 106 0
 622 026a 8C2F      		mov r24,r28
 623 026c 0E94 0000 		call eeconfig_write_default_layer
 624               	.LVL72:
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 625               		.loc 1 107 0
 626 0270 6C2F      		mov r22,r28
 627 0272 00C0      		rjmp .L100
 628               	.L47:
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 629               		.loc 1 109 0
 630 0274 0E94 0000 		call eeconfig_read_default_layer
 631               	.LVL73:
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 632               		.loc 1 110 0
 633 0278 682F      		mov r22,r24
 634               	.LVL74:
 635               	.L100:
 636 027a 70E0      		ldi r23,0
 637 027c 80E0      		ldi r24,0
 638 027e 90E0      		ldi r25,0
 639               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** }
 640               		.loc 1 112 0
 641 0280 CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 642               		.loc 1 110 0
 643 0282 0C94 0000 		jmp default_layer_set
 644               	.LVL75:
 645               	.L20:
 646               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** }
 647               		.loc 1 112 0
 648 0286 CF91      		pop r28
 649               	.LVL76:
 650 0288 0895      		ret
 651               		.cfi_endproc
 652               	.LFE10:
 654               		.section	.progmem.data.__c.2477,"a",@progbits
 657               	__c.2477:
 658 0000 646F 6E65 		.string	"done.\n"
 658      2E0A 00
 659               		.section	.progmem.data.__c.2471,"a",@progbits
 662               	__c.2471:
 663 0000 626F 6F74 		.string	"bootmagic scan: ... "
 663      6D61 6769 
 663      6320 7363 
 663      616E 3A20 
 663      2E2E 2E20 
 664               		.comm	keymap_config,1,1
 665               		.text
 666               	.Letext0:
 667               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 668               		.file 4 "../../tmk_core/common/matrix.h"
 669               		.file 5 "../../tmk_core/common/debug.h"
 670               		.file 6 "../../tmk_core/common/keyboard.h"
 671               		.file 7 "../../tmk_core/common/keycode.h"
 672               		.file 8 "../../tmk_core/common/action_code.h"
 673               		.file 9 "../../tmk_core/common/keymap.h"
 674               		.file 10 "../../tmk_core/common/action.h"
 675               		.file 11 "../../tmk_core/common/eeconfig.h"
 676               		.file 12 "../../tmk_core/common/bootloader.h"
 677               		.file 13 "../../tmk_core/common/hook.h"
 678               		.file 14 "../../tmk_core/common/avr/xprintf.h"
 679               		.file 15 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootmagic.c
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:2      *ABS*:0000003e __SP_H__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:3      *ABS*:0000003d __SP_L__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:4      *ABS*:0000003f __SREG__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:6      *ABS*:00000001 __zero_reg__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:12     .text.scan_key:00000000 scan_key
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:173    .text.bootmagic_scan_key:00000000 bootmagic_scan_key
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:223    .text.bootmagic:00000000 bootmagic
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:662    .progmem.data.__c.2471:00000000 __c.2471
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//ccc4w8x6.s:657    .progmem.data.__c.2477:00000000 __c.2477
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
