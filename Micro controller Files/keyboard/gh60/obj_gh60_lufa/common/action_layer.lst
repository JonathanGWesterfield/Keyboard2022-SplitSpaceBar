   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.layer_state_set,"ax",@progbits
  12               	layer_state_set:
  13               	.LFB10:
  14               		.file 1 "../../tmk_core/common/action_layer.c"
   1:../../tmk_core/common/action_layer.c **** #include <stdint.h>
   2:../../tmk_core/common/action_layer.c **** #include "keyboard.h"
   3:../../tmk_core/common/action_layer.c **** #include "action.h"
   4:../../tmk_core/common/action_layer.c **** #include "util.h"
   5:../../tmk_core/common/action_layer.c **** #include "action_layer.h"
   6:../../tmk_core/common/action_layer.c **** #include "hook.h"
   7:../../tmk_core/common/action_layer.c **** 
   8:../../tmk_core/common/action_layer.c **** #ifdef DEBUG_ACTION
   9:../../tmk_core/common/action_layer.c **** #include "debug.h"
  10:../../tmk_core/common/action_layer.c **** #else
  11:../../tmk_core/common/action_layer.c **** #include "nodebug.h"
  12:../../tmk_core/common/action_layer.c **** #endif
  13:../../tmk_core/common/action_layer.c **** 
  14:../../tmk_core/common/action_layer.c **** 
  15:../../tmk_core/common/action_layer.c **** /* 
  16:../../tmk_core/common/action_layer.c ****  * Default Layer State
  17:../../tmk_core/common/action_layer.c ****  */
  18:../../tmk_core/common/action_layer.c **** uint32_t default_layer_state = 0;
  19:../../tmk_core/common/action_layer.c **** 
  20:../../tmk_core/common/action_layer.c **** static void default_layer_state_set(uint32_t state)
  21:../../tmk_core/common/action_layer.c **** {
  22:../../tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  23:../../tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
  24:../../tmk_core/common/action_layer.c ****     default_layer_state = state;
  25:../../tmk_core/common/action_layer.c ****     hook_default_layer_change(default_layer_state);
  26:../../tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  27:../../tmk_core/common/action_layer.c **** #ifdef NO_TRACK_KEY_PRESS
  28:../../tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  29:../../tmk_core/common/action_layer.c **** #endif
  30:../../tmk_core/common/action_layer.c **** }
  31:../../tmk_core/common/action_layer.c **** 
  32:../../tmk_core/common/action_layer.c **** void default_layer_debug(void)
  33:../../tmk_core/common/action_layer.c **** {
  34:../../tmk_core/common/action_layer.c ****     dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
  35:../../tmk_core/common/action_layer.c **** }
  36:../../tmk_core/common/action_layer.c **** 
  37:../../tmk_core/common/action_layer.c **** void default_layer_set(uint32_t state)
  38:../../tmk_core/common/action_layer.c **** {
  39:../../tmk_core/common/action_layer.c ****     default_layer_state_set(state);
  40:../../tmk_core/common/action_layer.c **** }
  41:../../tmk_core/common/action_layer.c **** 
  42:../../tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  43:../../tmk_core/common/action_layer.c **** void default_layer_or(uint32_t state)
  44:../../tmk_core/common/action_layer.c **** {
  45:../../tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state | state);
  46:../../tmk_core/common/action_layer.c **** }
  47:../../tmk_core/common/action_layer.c **** void default_layer_and(uint32_t state)
  48:../../tmk_core/common/action_layer.c **** {
  49:../../tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state & state);
  50:../../tmk_core/common/action_layer.c **** }
  51:../../tmk_core/common/action_layer.c **** void default_layer_xor(uint32_t state)
  52:../../tmk_core/common/action_layer.c **** {
  53:../../tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state ^ state);
  54:../../tmk_core/common/action_layer.c **** }
  55:../../tmk_core/common/action_layer.c **** #endif
  56:../../tmk_core/common/action_layer.c **** 
  57:../../tmk_core/common/action_layer.c **** 
  58:../../tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  59:../../tmk_core/common/action_layer.c **** /* 
  60:../../tmk_core/common/action_layer.c ****  * Keymap Layer State
  61:../../tmk_core/common/action_layer.c ****  */
  62:../../tmk_core/common/action_layer.c **** uint32_t layer_state = 0;
  63:../../tmk_core/common/action_layer.c **** 
  64:../../tmk_core/common/action_layer.c **** static void layer_state_set(uint32_t state)
  65:../../tmk_core/common/action_layer.c **** {
  15               		.loc 1 65 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  66:../../tmk_core/common/action_layer.c ****     dprint("layer_state: ");
  67:../../tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
  68:../../tmk_core/common/action_layer.c ****     layer_state = state;
  22               		.loc 1 68 0
  23 0000 6093 0000 		sts layer_state,r22
  24 0004 7093 0000 		sts layer_state+1,r23
  25 0008 8093 0000 		sts layer_state+2,r24
  26 000c 9093 0000 		sts layer_state+3,r25
  69:../../tmk_core/common/action_layer.c ****     hook_layer_change(layer_state);
  27               		.loc 1 69 0
  28 0010 0C94 0000 		jmp hook_layer_change
  29               	.LVL1:
  30               		.cfi_endproc
  31               	.LFE10:
  33               		.section	.text.default_layer_debug,"ax",@progbits
  34               	.global	default_layer_debug
  36               	default_layer_debug:
  37               	.LFB5:
  33:../../tmk_core/common/action_layer.c **** {
  38               		.loc 1 33 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
  44 0000 0895      		ret
  45               		.cfi_endproc
  46               	.LFE5:
  48               		.section	.text.default_layer_set,"ax",@progbits
  49               	.global	default_layer_set
  51               	default_layer_set:
  52               	.LFB6:
  38:../../tmk_core/common/action_layer.c **** {
  53               		.loc 1 38 0
  54               		.cfi_startproc
  55               	.LVL2:
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  60               	.LBB4:
  61               	.LBB5:
  24:../../tmk_core/common/action_layer.c ****     default_layer_state = state;
  62               		.loc 1 24 0
  63 0000 6093 0000 		sts default_layer_state,r22
  64 0004 7093 0000 		sts default_layer_state+1,r23
  65 0008 8093 0000 		sts default_layer_state+2,r24
  66 000c 9093 0000 		sts default_layer_state+3,r25
  25:../../tmk_core/common/action_layer.c ****     hook_default_layer_change(default_layer_state);
  67               		.loc 1 25 0
  68 0010 0C94 0000 		jmp hook_default_layer_change
  69               	.LVL3:
  70               	.LBE5:
  71               	.LBE4:
  72               		.cfi_endproc
  73               	.LFE6:
  75               		.section	.text.default_layer_or,"ax",@progbits
  76               	.global	default_layer_or
  78               	default_layer_or:
  79               	.LFB7:
  44:../../tmk_core/common/action_layer.c **** {
  80               		.loc 1 44 0
  81               		.cfi_startproc
  82               	.LVL4:
  83 0000 0F93      		push r16
  84               	.LCFI0:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 16, -2
  87 0002 1F93      		push r17
  88               	.LCFI1:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 17, -3
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 2 */
  94               	.L__stack_usage = 2
  45:../../tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state | state);
  95               		.loc 1 45 0
  96 0004 0091 0000 		lds r16,default_layer_state
  97 0008 1091 0000 		lds r17,default_layer_state+1
  98 000c 2091 0000 		lds r18,default_layer_state+2
  99 0010 3091 0000 		lds r19,default_layer_state+3
 100 0014 602B      		or r22,r16
 101 0016 712B      		or r23,r17
 102 0018 822B      		or r24,r18
 103 001a 932B      		or r25,r19
 104               	.LVL5:
 105               	.LBB8:
 106               	.LBB9:
  24:../../tmk_core/common/action_layer.c ****     default_layer_state = state;
 107               		.loc 1 24 0
 108 001c 6093 0000 		sts default_layer_state,r22
 109 0020 7093 0000 		sts default_layer_state+1,r23
 110 0024 8093 0000 		sts default_layer_state+2,r24
 111 0028 9093 0000 		sts default_layer_state+3,r25
 112               	/* epilogue start */
 113               	.LBE9:
 114               	.LBE8:
  46:../../tmk_core/common/action_layer.c **** }
 115               		.loc 1 46 0
 116 002c 1F91      		pop r17
 117 002e 0F91      		pop r16
 118               	.LBB11:
 119               	.LBB10:
  25:../../tmk_core/common/action_layer.c ****     hook_default_layer_change(default_layer_state);
 120               		.loc 1 25 0
 121 0030 0C94 0000 		jmp hook_default_layer_change
 122               	.LVL6:
 123               	.LBE10:
 124               	.LBE11:
 125               		.cfi_endproc
 126               	.LFE7:
 128               		.section	.text.default_layer_and,"ax",@progbits
 129               	.global	default_layer_and
 131               	default_layer_and:
 132               	.LFB8:
  48:../../tmk_core/common/action_layer.c **** {
 133               		.loc 1 48 0
 134               		.cfi_startproc
 135               	.LVL7:
 136 0000 0F93      		push r16
 137               	.LCFI2:
 138               		.cfi_def_cfa_offset 3
 139               		.cfi_offset 16, -2
 140 0002 1F93      		push r17
 141               	.LCFI3:
 142               		.cfi_def_cfa_offset 4
 143               		.cfi_offset 17, -3
 144               	/* prologue: function */
 145               	/* frame size = 0 */
 146               	/* stack size = 2 */
 147               	.L__stack_usage = 2
  49:../../tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state & state);
 148               		.loc 1 49 0
 149 0004 0091 0000 		lds r16,default_layer_state
 150 0008 1091 0000 		lds r17,default_layer_state+1
 151 000c 2091 0000 		lds r18,default_layer_state+2
 152 0010 3091 0000 		lds r19,default_layer_state+3
 153 0014 6023      		and r22,r16
 154 0016 7123      		and r23,r17
 155 0018 8223      		and r24,r18
 156 001a 9323      		and r25,r19
 157               	.LVL8:
 158               	.LBB14:
 159               	.LBB15:
  24:../../tmk_core/common/action_layer.c ****     default_layer_state = state;
 160               		.loc 1 24 0
 161 001c 6093 0000 		sts default_layer_state,r22
 162 0020 7093 0000 		sts default_layer_state+1,r23
 163 0024 8093 0000 		sts default_layer_state+2,r24
 164 0028 9093 0000 		sts default_layer_state+3,r25
 165               	/* epilogue start */
 166               	.LBE15:
 167               	.LBE14:
  50:../../tmk_core/common/action_layer.c **** }
 168               		.loc 1 50 0
 169 002c 1F91      		pop r17
 170 002e 0F91      		pop r16
 171               	.LBB17:
 172               	.LBB16:
  25:../../tmk_core/common/action_layer.c ****     hook_default_layer_change(default_layer_state);
 173               		.loc 1 25 0
 174 0030 0C94 0000 		jmp hook_default_layer_change
 175               	.LVL9:
 176               	.LBE16:
 177               	.LBE17:
 178               		.cfi_endproc
 179               	.LFE8:
 181               		.section	.text.default_layer_xor,"ax",@progbits
 182               	.global	default_layer_xor
 184               	default_layer_xor:
 185               	.LFB9:
  52:../../tmk_core/common/action_layer.c **** {
 186               		.loc 1 52 0
 187               		.cfi_startproc
 188               	.LVL10:
 189 0000 0F93      		push r16
 190               	.LCFI4:
 191               		.cfi_def_cfa_offset 3
 192               		.cfi_offset 16, -2
 193 0002 1F93      		push r17
 194               	.LCFI5:
 195               		.cfi_def_cfa_offset 4
 196               		.cfi_offset 17, -3
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 2 */
 200               	.L__stack_usage = 2
  53:../../tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state ^ state);
 201               		.loc 1 53 0
 202 0004 0091 0000 		lds r16,default_layer_state
 203 0008 1091 0000 		lds r17,default_layer_state+1
 204 000c 2091 0000 		lds r18,default_layer_state+2
 205 0010 3091 0000 		lds r19,default_layer_state+3
 206 0014 6027      		eor r22,r16
 207 0016 7127      		eor r23,r17
 208 0018 8227      		eor r24,r18
 209 001a 9327      		eor r25,r19
 210               	.LVL11:
 211               	.LBB20:
 212               	.LBB21:
  24:../../tmk_core/common/action_layer.c ****     default_layer_state = state;
 213               		.loc 1 24 0
 214 001c 6093 0000 		sts default_layer_state,r22
 215 0020 7093 0000 		sts default_layer_state+1,r23
 216 0024 8093 0000 		sts default_layer_state+2,r24
 217 0028 9093 0000 		sts default_layer_state+3,r25
 218               	/* epilogue start */
 219               	.LBE21:
 220               	.LBE20:
  54:../../tmk_core/common/action_layer.c **** }
 221               		.loc 1 54 0
 222 002c 1F91      		pop r17
 223 002e 0F91      		pop r16
 224               	.LBB23:
 225               	.LBB22:
  25:../../tmk_core/common/action_layer.c ****     hook_default_layer_change(default_layer_state);
 226               		.loc 1 25 0
 227 0030 0C94 0000 		jmp hook_default_layer_change
 228               	.LVL12:
 229               	.LBE22:
 230               	.LBE23:
 231               		.cfi_endproc
 232               	.LFE9:
 234               		.section	.text.layer_clear,"ax",@progbits
 235               	.global	layer_clear
 237               	layer_clear:
 238               	.LFB11:
  70:../../tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
  71:../../tmk_core/common/action_layer.c **** #ifdef NO_TRACK_KEY_PRESS
  72:../../tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  73:../../tmk_core/common/action_layer.c **** #endif
  74:../../tmk_core/common/action_layer.c **** }
  75:../../tmk_core/common/action_layer.c **** 
  76:../../tmk_core/common/action_layer.c **** void layer_clear(void)
  77:../../tmk_core/common/action_layer.c **** {
 239               		.loc 1 77 0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
  78:../../tmk_core/common/action_layer.c ****     layer_state_set(0);
 245               		.loc 1 78 0
 246 0000 60E0      		ldi r22,0
 247 0002 70E0      		ldi r23,0
 248 0004 CB01      		movw r24,r22
 249 0006 0C94 0000 		jmp layer_state_set
 250               	.LVL13:
 251               		.cfi_endproc
 252               	.LFE11:
 254               		.section	.text.layer_move,"ax",@progbits
 255               	.global	layer_move
 257               	layer_move:
 258               	.LFB12:
  79:../../tmk_core/common/action_layer.c **** }
  80:../../tmk_core/common/action_layer.c **** 
  81:../../tmk_core/common/action_layer.c **** void layer_move(uint8_t layer)
  82:../../tmk_core/common/action_layer.c **** {
 259               		.loc 1 82 0
 260               		.cfi_startproc
 261               	.LVL14:
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 0 */
 265               	.L__stack_usage = 0
  83:../../tmk_core/common/action_layer.c ****     layer_state_set(1UL<<layer);
 266               		.loc 1 83 0
 267 0000 41E0      		ldi r20,lo8(1)
 268 0002 50E0      		ldi r21,0
 269 0004 60E0      		ldi r22,0
 270 0006 70E0      		ldi r23,0
 271 0008 00C0      		rjmp 2f
 272               		1:
 273 000a 440F      		lsl r20
 274 000c 551F      		rol r21
 275 000e 661F      		rol r22
 276 0010 771F      		rol r23
 277               		2:
 278 0012 8A95      		dec r24
 279 0014 02F4      		brpl 1b
 280 0016 CB01      		movw r24,r22
 281 0018 BA01      		movw r22,r20
 282 001a 0C94 0000 		jmp layer_state_set
 283               	.LVL15:
 284               		.cfi_endproc
 285               	.LFE12:
 287               		.section	.text.layer_on,"ax",@progbits
 288               	.global	layer_on
 290               	layer_on:
 291               	.LFB13:
  84:../../tmk_core/common/action_layer.c **** }
  85:../../tmk_core/common/action_layer.c **** 
  86:../../tmk_core/common/action_layer.c **** void layer_on(uint8_t layer)
  87:../../tmk_core/common/action_layer.c **** {
 292               		.loc 1 87 0
 293               		.cfi_startproc
 294               	.LVL16:
 295               	/* prologue: function */
 296               	/* frame size = 0 */
 297               	/* stack size = 0 */
 298               	.L__stack_usage = 0
  88:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state | (1UL<<layer));
 299               		.loc 1 88 0
 300 0000 41E0      		ldi r20,lo8(1)
 301 0002 50E0      		ldi r21,0
 302 0004 60E0      		ldi r22,0
 303 0006 70E0      		ldi r23,0
 304 0008 00C0      		rjmp 2f
 305               		1:
 306 000a 440F      		lsl r20
 307 000c 551F      		rol r21
 308 000e 661F      		rol r22
 309 0010 771F      		rol r23
 310               		2:
 311 0012 8A95      		dec r24
 312 0014 02F4      		brpl 1b
 313 0016 8091 0000 		lds r24,layer_state
 314 001a 9091 0000 		lds r25,layer_state+1
 315 001e A091 0000 		lds r26,layer_state+2
 316 0022 B091 0000 		lds r27,layer_state+3
 317               	.LVL17:
 318 0026 482B      		or r20,r24
 319 0028 592B      		or r21,r25
 320 002a 6A2B      		or r22,r26
 321 002c 7B2B      		or r23,r27
 322 002e CB01      		movw r24,r22
 323 0030 BA01      		movw r22,r20
 324 0032 0C94 0000 		jmp layer_state_set
 325               	.LVL18:
 326               		.cfi_endproc
 327               	.LFE13:
 329               		.section	.text.layer_off,"ax",@progbits
 330               	.global	layer_off
 332               	layer_off:
 333               	.LFB14:
  89:../../tmk_core/common/action_layer.c **** }
  90:../../tmk_core/common/action_layer.c **** 
  91:../../tmk_core/common/action_layer.c **** void layer_off(uint8_t layer)
  92:../../tmk_core/common/action_layer.c **** {
 334               		.loc 1 92 0
 335               		.cfi_startproc
 336               	.LVL19:
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
  93:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state & ~(1UL<<layer));
 341               		.loc 1 93 0
 342 0000 41E0      		ldi r20,lo8(1)
 343 0002 50E0      		ldi r21,0
 344 0004 60E0      		ldi r22,0
 345 0006 70E0      		ldi r23,0
 346 0008 00C0      		rjmp 2f
 347               		1:
 348 000a 440F      		lsl r20
 349 000c 551F      		rol r21
 350 000e 661F      		rol r22
 351 0010 771F      		rol r23
 352               		2:
 353 0012 8A95      		dec r24
 354 0014 02F4      		brpl 1b
 355 0016 4095      		com r20
 356 0018 5095      		com r21
 357 001a 6095      		com r22
 358 001c 7095      		com r23
 359 001e 8091 0000 		lds r24,layer_state
 360 0022 9091 0000 		lds r25,layer_state+1
 361 0026 A091 0000 		lds r26,layer_state+2
 362 002a B091 0000 		lds r27,layer_state+3
 363               	.LVL20:
 364 002e 4823      		and r20,r24
 365 0030 5923      		and r21,r25
 366 0032 6A23      		and r22,r26
 367 0034 7B23      		and r23,r27
 368 0036 CB01      		movw r24,r22
 369 0038 BA01      		movw r22,r20
 370 003a 0C94 0000 		jmp layer_state_set
 371               	.LVL21:
 372               		.cfi_endproc
 373               	.LFE14:
 375               		.section	.text.layer_invert,"ax",@progbits
 376               	.global	layer_invert
 378               	layer_invert:
 379               	.LFB15:
  94:../../tmk_core/common/action_layer.c **** }
  95:../../tmk_core/common/action_layer.c **** 
  96:../../tmk_core/common/action_layer.c **** void layer_invert(uint8_t layer)
  97:../../tmk_core/common/action_layer.c **** {
 380               		.loc 1 97 0
 381               		.cfi_startproc
 382               	.LVL22:
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 0 */
 386               	.L__stack_usage = 0
  98:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ (1UL<<layer));
 387               		.loc 1 98 0
 388 0000 41E0      		ldi r20,lo8(1)
 389 0002 50E0      		ldi r21,0
 390 0004 60E0      		ldi r22,0
 391 0006 70E0      		ldi r23,0
 392 0008 00C0      		rjmp 2f
 393               		1:
 394 000a 440F      		lsl r20
 395 000c 551F      		rol r21
 396 000e 661F      		rol r22
 397 0010 771F      		rol r23
 398               		2:
 399 0012 8A95      		dec r24
 400 0014 02F4      		brpl 1b
 401 0016 8091 0000 		lds r24,layer_state
 402 001a 9091 0000 		lds r25,layer_state+1
 403 001e A091 0000 		lds r26,layer_state+2
 404 0022 B091 0000 		lds r27,layer_state+3
 405               	.LVL23:
 406 0026 4827      		eor r20,r24
 407 0028 5927      		eor r21,r25
 408 002a 6A27      		eor r22,r26
 409 002c 7B27      		eor r23,r27
 410 002e CB01      		movw r24,r22
 411 0030 BA01      		movw r22,r20
 412 0032 0C94 0000 		jmp layer_state_set
 413               	.LVL24:
 414               		.cfi_endproc
 415               	.LFE15:
 417               		.section	.text.layer_or,"ax",@progbits
 418               	.global	layer_or
 420               	layer_or:
 421               	.LFB16:
  99:../../tmk_core/common/action_layer.c **** }
 100:../../tmk_core/common/action_layer.c **** 
 101:../../tmk_core/common/action_layer.c **** void layer_or(uint32_t state)
 102:../../tmk_core/common/action_layer.c **** {
 422               		.loc 1 102 0
 423               		.cfi_startproc
 424               	.LVL25:
 425 0000 0F93      		push r16
 426               	.LCFI6:
 427               		.cfi_def_cfa_offset 3
 428               		.cfi_offset 16, -2
 429 0002 1F93      		push r17
 430               	.LCFI7:
 431               		.cfi_def_cfa_offset 4
 432               		.cfi_offset 17, -3
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 2 */
 436               	.L__stack_usage = 2
 103:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state | state);
 437               		.loc 1 103 0
 438 0004 0091 0000 		lds r16,layer_state
 439 0008 1091 0000 		lds r17,layer_state+1
 440 000c 2091 0000 		lds r18,layer_state+2
 441 0010 3091 0000 		lds r19,layer_state+3
 442 0014 602B      		or r22,r16
 443 0016 712B      		or r23,r17
 444 0018 822B      		or r24,r18
 445 001a 932B      		or r25,r19
 446               	.LVL26:
 447               	/* epilogue start */
 104:../../tmk_core/common/action_layer.c **** }
 448               		.loc 1 104 0
 449 001c 1F91      		pop r17
 450 001e 0F91      		pop r16
 103:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state | state);
 451               		.loc 1 103 0
 452 0020 0C94 0000 		jmp layer_state_set
 453               	.LVL27:
 454               		.cfi_endproc
 455               	.LFE16:
 457               		.section	.text.layer_and,"ax",@progbits
 458               	.global	layer_and
 460               	layer_and:
 461               	.LFB17:
 105:../../tmk_core/common/action_layer.c **** void layer_and(uint32_t state)
 106:../../tmk_core/common/action_layer.c **** {
 462               		.loc 1 106 0
 463               		.cfi_startproc
 464               	.LVL28:
 465 0000 0F93      		push r16
 466               	.LCFI8:
 467               		.cfi_def_cfa_offset 3
 468               		.cfi_offset 16, -2
 469 0002 1F93      		push r17
 470               	.LCFI9:
 471               		.cfi_def_cfa_offset 4
 472               		.cfi_offset 17, -3
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 2 */
 476               	.L__stack_usage = 2
 107:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state & state);
 477               		.loc 1 107 0
 478 0004 0091 0000 		lds r16,layer_state
 479 0008 1091 0000 		lds r17,layer_state+1
 480 000c 2091 0000 		lds r18,layer_state+2
 481 0010 3091 0000 		lds r19,layer_state+3
 482 0014 6023      		and r22,r16
 483 0016 7123      		and r23,r17
 484 0018 8223      		and r24,r18
 485 001a 9323      		and r25,r19
 486               	.LVL29:
 487               	/* epilogue start */
 108:../../tmk_core/common/action_layer.c **** }
 488               		.loc 1 108 0
 489 001c 1F91      		pop r17
 490 001e 0F91      		pop r16
 107:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state & state);
 491               		.loc 1 107 0
 492 0020 0C94 0000 		jmp layer_state_set
 493               	.LVL30:
 494               		.cfi_endproc
 495               	.LFE17:
 497               		.section	.text.layer_xor,"ax",@progbits
 498               	.global	layer_xor
 500               	layer_xor:
 501               	.LFB18:
 109:../../tmk_core/common/action_layer.c **** void layer_xor(uint32_t state)
 110:../../tmk_core/common/action_layer.c **** {
 502               		.loc 1 110 0
 503               		.cfi_startproc
 504               	.LVL31:
 505 0000 0F93      		push r16
 506               	.LCFI10:
 507               		.cfi_def_cfa_offset 3
 508               		.cfi_offset 16, -2
 509 0002 1F93      		push r17
 510               	.LCFI11:
 511               		.cfi_def_cfa_offset 4
 512               		.cfi_offset 17, -3
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 515               	/* stack size = 2 */
 516               	.L__stack_usage = 2
 111:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ state);
 517               		.loc 1 111 0
 518 0004 0091 0000 		lds r16,layer_state
 519 0008 1091 0000 		lds r17,layer_state+1
 520 000c 2091 0000 		lds r18,layer_state+2
 521 0010 3091 0000 		lds r19,layer_state+3
 522 0014 6027      		eor r22,r16
 523 0016 7127      		eor r23,r17
 524 0018 8227      		eor r24,r18
 525 001a 9327      		eor r25,r19
 526               	.LVL32:
 527               	/* epilogue start */
 112:../../tmk_core/common/action_layer.c **** }
 528               		.loc 1 112 0
 529 001c 1F91      		pop r17
 530 001e 0F91      		pop r16
 111:../../tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ state);
 531               		.loc 1 111 0
 532 0020 0C94 0000 		jmp layer_state_set
 533               	.LVL33:
 534               		.cfi_endproc
 535               	.LFE18:
 537               		.section	.text.layer_debug,"ax",@progbits
 538               	.global	layer_debug
 540               	layer_debug:
 541               	.LFB19:
 113:../../tmk_core/common/action_layer.c **** 
 114:../../tmk_core/common/action_layer.c **** void layer_debug(void)
 115:../../tmk_core/common/action_layer.c **** {
 542               		.loc 1 115 0
 543               		.cfi_startproc
 544               	/* prologue: function */
 545               	/* frame size = 0 */
 546               	/* stack size = 0 */
 547               	.L__stack_usage = 0
 548 0000 0895      		ret
 549               		.cfi_endproc
 550               	.LFE19:
 552               		.section	.text.layer_switch_get_action,"ax",@progbits
 553               	.global	layer_switch_get_action
 555               	layer_switch_get_action:
 556               	.LFB21:
 116:../../tmk_core/common/action_layer.c ****     dprintf("%08lX(%u)", layer_state, biton32(layer_state));
 117:../../tmk_core/common/action_layer.c **** }
 118:../../tmk_core/common/action_layer.c **** #endif
 119:../../tmk_core/common/action_layer.c **** 
 120:../../tmk_core/common/action_layer.c **** 
 121:../../tmk_core/common/action_layer.c **** 
 122:../../tmk_core/common/action_layer.c **** /* return layer effective for key at this time */
 123:../../tmk_core/common/action_layer.c **** static uint8_t current_layer_for_key(keypos_t key)
 124:../../tmk_core/common/action_layer.c **** {
 125:../../tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
 126:../../tmk_core/common/action_layer.c ****     action_t action = ACTION_TRANSPARENT;
 127:../../tmk_core/common/action_layer.c ****     uint32_t layers = layer_state | default_layer_state;
 128:../../tmk_core/common/action_layer.c ****     /* check top layer first */
 129:../../tmk_core/common/action_layer.c ****     for (int8_t i = 31; i >= 0; i--) {
 130:../../tmk_core/common/action_layer.c ****         if (layers & (1UL<<i)) {
 131:../../tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 132:../../tmk_core/common/action_layer.c ****             if (action.code != (action_t)ACTION_TRANSPARENT.code) {
 133:../../tmk_core/common/action_layer.c ****                 return i;
 134:../../tmk_core/common/action_layer.c ****             }
 135:../../tmk_core/common/action_layer.c ****         }
 136:../../tmk_core/common/action_layer.c ****     }
 137:../../tmk_core/common/action_layer.c ****     /* fall back to layer 0 */
 138:../../tmk_core/common/action_layer.c ****     return 0;
 139:../../tmk_core/common/action_layer.c **** #else
 140:../../tmk_core/common/action_layer.c ****     return biton32(default_layer_state);
 141:../../tmk_core/common/action_layer.c **** #endif
 142:../../tmk_core/common/action_layer.c **** }
 143:../../tmk_core/common/action_layer.c **** 
 144:../../tmk_core/common/action_layer.c **** 
 145:../../tmk_core/common/action_layer.c **** #ifndef NO_TRACK_KEY_PRESS
 146:../../tmk_core/common/action_layer.c **** /* record layer on where key is pressed */
 147:../../tmk_core/common/action_layer.c **** static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
 148:../../tmk_core/common/action_layer.c **** #endif
 149:../../tmk_core/common/action_layer.c **** action_t layer_switch_get_action(keyevent_t event)
 150:../../tmk_core/common/action_layer.c **** {
 557               		.loc 1 150 0
 558               		.cfi_startproc
 559               		.loc 1 150 0
 560 0000 9F92      		push r9
 561               	.LCFI12:
 562               		.cfi_def_cfa_offset 3
 563               		.cfi_offset 9, -2
 564 0002 AF92      		push r10
 565               	.LCFI13:
 566               		.cfi_def_cfa_offset 4
 567               		.cfi_offset 10, -3
 568 0004 BF92      		push r11
 569               	.LCFI14:
 570               		.cfi_def_cfa_offset 5
 571               		.cfi_offset 11, -4
 572 0006 CF92      		push r12
 573               	.LCFI15:
 574               		.cfi_def_cfa_offset 6
 575               		.cfi_offset 12, -5
 576 0008 DF92      		push r13
 577               	.LCFI16:
 578               		.cfi_def_cfa_offset 7
 579               		.cfi_offset 13, -6
 580 000a EF92      		push r14
 581               	.LCFI17:
 582               		.cfi_def_cfa_offset 8
 583               		.cfi_offset 14, -7
 584 000c FF92      		push r15
 585               	.LCFI18:
 586               		.cfi_def_cfa_offset 9
 587               		.cfi_offset 15, -8
 588 000e 0F93      		push r16
 589               	.LCFI19:
 590               		.cfi_def_cfa_offset 10
 591               		.cfi_offset 16, -9
 592 0010 1F93      		push r17
 593               	.LCFI20:
 594               		.cfi_def_cfa_offset 11
 595               		.cfi_offset 17, -10
 596 0012 CF93      		push r28
 597               	.LCFI21:
 598               		.cfi_def_cfa_offset 12
 599               		.cfi_offset 28, -11
 600 0014 DF93      		push r29
 601               	.LCFI22:
 602               		.cfi_def_cfa_offset 13
 603               		.cfi_offset 29, -12
 604 0016 00D0      		rcall .
 605 0018 00D0      		rcall .
 606 001a 1F92      		push __zero_reg__
 607               	.LCFI23:
 608               		.cfi_def_cfa_offset 18
 609 001c CDB7      		in r28,__SP_L__
 610 001e DEB7      		in r29,__SP_H__
 611               	.LCFI24:
 612               		.cfi_def_cfa_register 28
 613               	/* prologue: function */
 614               	/* frame size = 5 */
 615               	/* stack size = 16 */
 616               	.L__stack_usage = 16
 617 0020 6B83      		std Y+3,r22
 618 0022 7C83      		std Y+4,r23
 619 0024 8D83      		std Y+5,r24
 620 0026 5A01      		movw r10,r20
 621               	.LVL34:
 622               	.LBB29:
 623               	.LBB30:
 624               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 625               		.loc 2 49 0
 626 0028 8C81      		ldd r24,Y+4
 627 002a 9D81      		ldd r25,Y+5
 628 002c 892B      		or r24,r25
 629 002e 01F0      		breq .L28
 630 0030 8FEF      		ldi r24,lo8(-1)
 631 0032 B812      		cpse r11,r24
 632 0034 00C0      		rjmp .L29
 633 0036 81E0      		ldi r24,lo8(1)
 634 0038 9FEF      		ldi r25,lo8(-1)
 635 003a 4913      		cpse r20,r25
 636 003c 00C0      		rjmp .L29
 637 003e 00C0      		rjmp .L17
 638               	.L28:
 639 0040 81E0      		ldi r24,lo8(1)
 640 0042 00C0      		rjmp .L17
 641               	.L29:
 642 0044 80E0      		ldi r24,0
 643               	.L17:
 644               	.LBE30:
 645               	.LBE29:
 151:../../tmk_core/common/action_layer.c ****     if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
 646               		.loc 1 151 0
 647 0046 80FF      		sbrs r24,0
 648 0048 00C0      		rjmp .L19
 649               		.loc 1 151 0 is_stmt 0 discriminator 1
 650 004a 80E0      		ldi r24,0
 651 004c 90E0      		ldi r25,0
 652 004e 00C0      		rjmp .L20
 653               	.L19:
 654               	.LVL35:
 152:../../tmk_core/common/action_layer.c **** 
 153:../../tmk_core/common/action_layer.c ****     uint8_t layer = 0;
 154:../../tmk_core/common/action_layer.c **** #ifndef NO_TRACK_KEY_PRESS
 155:../../tmk_core/common/action_layer.c ****     if (event.pressed) {
 655               		.loc 1 155 0 is_stmt 1
 656 0050 8B81      		ldd r24,Y+3
 657 0052 8823      		tst r24
 658 0054 01F0      		breq .L21
 659               	.LVL36:
 660               	.LBB31:
 661               	.LBB32:
 127:../../tmk_core/common/action_layer.c ****     uint32_t layers = layer_state | default_layer_state;
 662               		.loc 1 127 0
 663 0056 C090 0000 		lds r12,default_layer_state
 664 005a D090 0000 		lds r13,default_layer_state+1
 665 005e E090 0000 		lds r14,default_layer_state+2
 666 0062 F090 0000 		lds r15,default_layer_state+3
 667 0066 8091 0000 		lds r24,layer_state
 668 006a 9091 0000 		lds r25,layer_state+1
 669 006e A091 0000 		lds r26,layer_state+2
 670 0072 B091 0000 		lds r27,layer_state+3
 671 0076 C82A      		or r12,r24
 672 0078 D92A      		or r13,r25
 673 007a EA2A      		or r14,r26
 674 007c FB2A      		or r15,r27
 675               	.LVL37:
 676 007e 0FE1      		ldi r16,lo8(31)
 677 0080 10E0      		ldi r17,0
 678               	.LVL38:
 679               	.L26:
 680               	.LBB33:
 130:../../tmk_core/common/action_layer.c ****         if (layers & (1UL<<i)) {
 681               		.loc 1 130 0
 682 0082 D701      		movw r26,r14
 683 0084 C601      		movw r24,r12
 684 0086 002E      		mov r0,r16
 685 0088 00C0      		rjmp 2f
 686               		1:
 687 008a B695      		lsr r27
 688 008c A795      		ror r26
 689 008e 9795      		ror r25
 690 0090 8795      		ror r24
 691               		2:
 692 0092 0A94      		dec r0
 693 0094 02F4      		brpl 1b
 694 0096 80FD      		sbrc r24,0
 695 0098 00C0      		rjmp .L22
 696               	.L25:
 697               	.LVL39:
 698               	.LVL40:
 699 009a 0150      		subi r16,1
 700 009c 1109      		sbc r17,__zero_reg__
 701 009e 00F4      		brcc .L26
 702               	.LBE33:
 138:../../tmk_core/common/action_layer.c ****     return 0;
 703               		.loc 1 138 0
 704 00a0 912C      		mov r9,__zero_reg__
 705 00a2 00C0      		rjmp .L24
 706               	.L22:
 707               	.LBB34:
 131:../../tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 708               		.loc 1 131 0
 709 00a4 902E      		mov r9,r16
 710 00a6 B501      		movw r22,r10
 711 00a8 802F      		mov r24,r16
 712 00aa 0E94 0000 		call action_for_key
 713               	.LVL41:
 132:../../tmk_core/common/action_layer.c ****             if (action.code != (action_t)ACTION_TRANSPARENT.code) {
 714               		.loc 1 132 0
 715 00ae 0197      		sbiw r24,1
 716 00b0 01F0      		breq .L25
 717               	.LVL42:
 718               	.L24:
 719               	.LBE34:
 720               	.LBE32:
 721               	.LBE31:
 156:../../tmk_core/common/action_layer.c ****         layer = current_layer_for_key(event.key);
 157:../../tmk_core/common/action_layer.c ****         layer_pressed[event.key.row][event.key.col] = layer;
 722               		.loc 1 157 0
 723 00b2 93E1      		ldi r25,lo8(19)
 724 00b4 B99E      		mul r11,r25
 725 00b6 F001      		movw r30,r0
 726 00b8 1124      		clr __zero_reg__
 727 00ba EA0D      		add r30,r10
 728 00bc F11D      		adc r31,__zero_reg__
 729 00be E050      		subi r30,lo8(-(layer_pressed))
 730 00c0 F040      		sbci r31,hi8(-(layer_pressed))
 731 00c2 9082      		st Z,r9
 732 00c4 00C0      		rjmp .L27
 733               	.LVL43:
 734               	.L21:
 158:../../tmk_core/common/action_layer.c ****     } else {
 159:../../tmk_core/common/action_layer.c ****         layer = layer_pressed[event.key.row][event.key.col];
 735               		.loc 1 159 0
 736 00c6 83E1      		ldi r24,lo8(19)
 737 00c8 B89E      		mul r11,r24
 738 00ca F001      		movw r30,r0
 739 00cc 1124      		clr __zero_reg__
 740 00ce EA0D      		add r30,r10
 741 00d0 F11D      		adc r31,__zero_reg__
 742 00d2 E050      		subi r30,lo8(-(layer_pressed))
 743 00d4 F040      		sbci r31,hi8(-(layer_pressed))
 744 00d6 9080      		ld r9,Z
 745               	.LVL44:
 746               	.L27:
 160:../../tmk_core/common/action_layer.c ****     }
 161:../../tmk_core/common/action_layer.c **** #else
 162:../../tmk_core/common/action_layer.c ****     layer = current_layer_for_key(event.key);
 163:../../tmk_core/common/action_layer.c **** #endif
 164:../../tmk_core/common/action_layer.c ****     return action_for_key(layer, event.key);
 747               		.loc 1 164 0
 748 00d8 A982      		std Y+1,r10
 749 00da BA82      		std Y+2,r11
 750 00dc 6981      		ldd r22,Y+1
 751 00de 7A81      		ldd r23,Y+2
 752 00e0 892D      		mov r24,r9
 753 00e2 0E94 0000 		call action_for_key
 754               	.LVL45:
 755               	.L20:
 756               	/* epilogue start */
 165:../../tmk_core/common/action_layer.c **** }
 757               		.loc 1 165 0
 758 00e6 0F90      		pop __tmp_reg__
 759 00e8 0F90      		pop __tmp_reg__
 760 00ea 0F90      		pop __tmp_reg__
 761 00ec 0F90      		pop __tmp_reg__
 762 00ee 0F90      		pop __tmp_reg__
 763 00f0 DF91      		pop r29
 764 00f2 CF91      		pop r28
 765 00f4 1F91      		pop r17
 766 00f6 0F91      		pop r16
 767 00f8 FF90      		pop r15
 768 00fa EF90      		pop r14
 769 00fc DF90      		pop r13
 770 00fe CF90      		pop r12
 771 0100 BF90      		pop r11
 772               	.LVL46:
 773 0102 AF90      		pop r10
 774 0104 9F90      		pop r9
 775 0106 0895      		ret
 776               		.cfi_endproc
 777               	.LFE21:
 779               		.section	.bss.layer_pressed,"aw",@nobits
 782               	layer_pressed:
 783 0000 0000 0000 		.zero	95
 783      0000 0000 
 783      0000 0000 
 783      0000 0000 
 783      0000 0000 
 784               	.global	layer_state
 785               		.section	.bss.layer_state,"aw",@nobits
 788               	layer_state:
 789 0000 0000 0000 		.zero	4
 790               	.global	default_layer_state
 791               		.section	.bss.default_layer_state,"aw",@nobits
 794               	default_layer_state:
 795 0000 0000 0000 		.zero	4
 796               		.text
 797               	.Letext0:
 798               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 799               		.file 4 "../../tmk_core/common/action_code.h"
 800               		.file 5 "../../tmk_core/common/hook.h"
 801               		.file 6 "../../tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_layer.c
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:2      *ABS*:0000003e __SP_H__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:3      *ABS*:0000003d __SP_L__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:4      *ABS*:0000003f __SREG__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:6      *ABS*:00000001 __zero_reg__
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:12     .text.layer_state_set:00000000 layer_state_set
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:788    .bss.layer_state:00000000 layer_state
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:36     .text.default_layer_debug:00000000 default_layer_debug
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:51     .text.default_layer_set:00000000 default_layer_set
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:794    .bss.default_layer_state:00000000 default_layer_state
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:78     .text.default_layer_or:00000000 default_layer_or
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:131    .text.default_layer_and:00000000 default_layer_and
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:184    .text.default_layer_xor:00000000 default_layer_xor
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:237    .text.layer_clear:00000000 layer_clear
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:257    .text.layer_move:00000000 layer_move
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:290    .text.layer_on:00000000 layer_on
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:332    .text.layer_off:00000000 layer_off
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:378    .text.layer_invert:00000000 layer_invert
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:420    .text.layer_or:00000000 layer_or
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:460    .text.layer_and:00000000 layer_and
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:500    .text.layer_xor:00000000 layer_xor
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:540    .text.layer_debug:00000000 layer_debug
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:555    .text.layer_switch_get_action:00000000 layer_switch_get_action
/var/folders/2c/rrkkt_h56k12nc1l5n57svw00000gn/T//cc7vXbEM.s:782    .bss.layer_pressed:00000000 layer_pressed

UNDEFINED SYMBOLS
hook_layer_change
hook_default_layer_change
action_for_key
__do_clear_bss
