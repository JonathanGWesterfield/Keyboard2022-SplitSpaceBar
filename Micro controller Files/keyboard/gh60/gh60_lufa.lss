
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00005630  000056c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  00800134  00800134  000056f8  2**0
                  ALLOC
  3 .noinit       00000004  00800250  00800250  000056f8  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000056f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b28  00000000  00000000  00006068  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001108b  00000000  00000000  00006b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003f31  00000000  00000000  00017c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000587b  00000000  00000000  0001bb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001c60  00000000  00000000  000213c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000048cf  00000000  00000000  00023028  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000089b2  00000000  00000000  000278f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  000302a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__ctors_end>
       4:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
       8:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
       c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      10:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      14:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      18:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      1c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      20:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      24:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      28:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_10>
      2c:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_11>
      30:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__vector_12>
      34:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      3c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      40:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      44:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      4c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      50:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__vector_21>
      58:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      5c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      60:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      68:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      70:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      74:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      78:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      7c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      84:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      88:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      94:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      a0:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      a4:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
      ac:	0a 0f       	add	r16, r26
      ae:	2c 0f       	add	r18, r28
      b0:	17 10       	cpse	r1, r7
      b2:	2c 0f       	add	r18, r28
      b4:	17 10       	cpse	r1, r7
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	6e 0f       	add	r22, r30
      b8:	91 0f       	add	r25, r17
      ba:	17 10       	cpse	r1, r7
      bc:	e6 0f       	add	r30, r22
      be:	f9 0f       	add	r31, r25
      c0:	05 14       	cp	r0, r5
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	05 14       	cp	r0, r5
      c4:	33 14       	cp	r3, r3
      c6:	33 14       	cp	r3, r3
      c8:	8f 14       	cp	r8, r15
      ca:	cb 14       	cp	r12, r11
      cc:	ce 16       	cp	r12, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	ce 16       	cp	r12, r30
      d0:	e3 14       	cp	r14, r3
      d2:	ce 16       	cp	r12, r30
      d4:	da 15       	cp	r29, r10
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	da 15       	cp	r29, r10
      d8:	a8 16       	cp	r10, r24
      da:	ce 16       	cp	r12, r30
      dc:	ce 16       	cp	r12, r30
      de:	bc 16       	cp	r11, r28

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21

000000e2 <keymaps>:
      e2:	56 55 54 53 29 1e 1f 20 21 22 23 24 25 26 27 2d     VUTS).. !"#$%&'-
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f2:	2e 2a a9 57 24 25 26 2b 14 1a 08 15 17 1c 18 0c     .*.W$%&+........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	12 13 2f 30 31 aa 00 21 22 23 39 04 16 07 09 0a     ../01..!"#9.....
     112:	0b 0d 0e 0f 33 34 00 28 a8 28 1e 1f 20 e1 00 1d     ....34.(.(.. ...
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     122:	1b 06 19 05 11 10 36 37 38 e5 52 3c 00 63 62 00     ......678.R<.cb.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     132:	e0 e3 e2 00 00 00 2c 00 00 00 c0 e6 50 51 4f 01     ......,.....PQO.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     142:	01 01 01 35 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45     ...5:;<=>?@ABCDE
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     152:	01 01 01 01 52 01 01 c2 01 52 01 01 01 01 01 b4     ....R....R......
				ReportSize     -= 2;
				ReportData     += 2;
     162:	01 4a 49 c4 01 00 50 51 4f 01 01 50 51 4f 01 46     .JI...PQO..PQO.F
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     172:	47 48 01 c3 4d 00 01 01 01 01 01 01 01 00 4c 01     GH..M.........L.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     182:	b7 a8 a9 aa 01 4b 4e 4c 01 01 01 00 01 01 00 01     .....KNL........
     192:	01 e2 00 00 00 c1 00 00 00 01 01 01 01 01           ..............

000001a0 <__c.1856>:
     1a0:	0a 00                                               ..

000001a2 <__c.1854>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a2:	25 30 32 58 00                                      %02X.

000001a7 <__c.1852>:
     1a7:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001b1 <__c.4831>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b1:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     1c1:	00                                                  .

000001c2 <__c.4829>:
     1c2:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d2:	00                                                  .

000001d3 <__c.4820>:
     1d3:	0d 0a 69 6e 69 74 0a 00                             ..init..

000001db <__c.4718>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1db:	5b 44 5d 00                                         [D].

000001df <__c.4713>:
     1df:	5b 43 5d 00                                         [C].

000001e3 <ProductString>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e3:	4e 03 41 00 6c 00 70 00 73 00 20 00 4b 00 65 00     N.A.l.p.s. .K.e.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f3:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 77 00     y.b.o.a.r.d. .w.
     203:	69 00 74 00 68 00 20 00 4c 00 65 00 66 00 74 00     i.t.h. .L.e.f.t.
     213:	20 00 48 00 61 00 6e 00 64 00 65 00 64 00 20 00      .H.a.n.d.e.d. .
     223:	4e 00 75 00 6d 00 20 00 50 00 61 00 64 00 00 00     N.u.m. .P.a.d...

00000233 <ManufacturerString>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     233:	2a 03 4a 00 6f 00 6e 00 61 00 74 00 68 00 61 00     *.J.o.n.a.t.h.a.
     243:	6e 00 20 00 57 00 65 00 73 00 74 00 65 00 72 00     n. .W.e.s.t.e.r.
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     253:	66 00 69 00 65 00 6c 00 64 00 00 00                 f.i.e.l.d...

0000025f <LanguageString>:
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25f:	04 03 09 04                                         ....

00000263 <ConfigurationDescriptor>:
     263:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     273:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     283:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     293:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a3:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b3:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c3:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d3:	03 20 00 01                                         . ..

000002d7 <DeviceDescriptor>:

				if (ParserData->UsingReportIDs)
     2d7:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e7:	00 01                                               ..

000002e9 <ConsoleReport>:
     2e9:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     2f9:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     309:	02 c0                                               ..

0000030b <ExtrakeyReport>:
     30b:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31b:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     32b:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33b:	10 95 01 81 00 c0                                   ......

00000341 <MouseReport>:
     341:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     351:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     361:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     371:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				break;
     381:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000038e <KeyboardReport>:

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     38e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     39e:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3ae:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

000003ce <__c.2055>:
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3ce:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

000003de <__c.2050>:
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3de:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

000003ec <__c.2042>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ec:	0a 00                                               ..

000003ee <__c.2037>:
     3ee:	25 30 32 58 20 00                                   %02X .

000003f4 <__c.2034>:
     3f4:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000003ff <__c.2400>:
     3ff:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

0000040a <__c.1714>:
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40a:	25 30 32 58 3a 20 25 30 33 32 62 25 73 0a 00        %02X: %032b%s..

00000419 <__c.1711>:

				if (UsageListSize)
     419:	72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41 42     r/c 0123456789AB
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     429:	43 44 45 46 30 31 32 33 34 35 36 37 38 39 41 42     CDEF0123456789AB

					for (uint8_t i = 1; i < UsageListSize; i++)
     439:	43 44 45 46 0a 00                                   CDEF..

0000043f <__c.2477>:
     43f:	64 6f 6e 65 2e 0a 00                                done...

00000446 <__c.2471>:
					  UsageList[i - 1] = UsageList[i];
     446:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 

					UsageListSize--;
     456:	2e 2e 2e 20 00                                      ... .

0000045b <__c.2115>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     45b:	29 0a 00                                            )..

0000045e <__c.2113>:
     45e:	25 75 00                                            %u.

00000461 <__c.2111>:
     461:	2f 00                                               /.

00000463 <__c.2109>:
     463:	25 75 00                                            %u.

00000466 <__c.2107>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     466:	5d 28 00                                            ](.

00000469 <__c.2105>:
     469:	25 64 00                                            %d.

0000046c <__c.2103>:
     46c:	20 00                                                .

0000046e <__c.2101>:
     46e:	25 64 00                                            %d.

00000471 <__c.2099>:
     471:	20 00                                                .

00000473 <__c.2097>:
     473:	25 64 00                                            %d.

00000476 <__c.2095>:
     476:	20 00                                                .

00000478 <__c.2093>:
     478:	25 64 00                                            %d.

0000047b <__c.2091>:
     47b:	7c 00                                               |.

0000047d <__c.2089>:
     47d:	25 30 32 58 00                                      %02X.

00000482 <__c.2087>:
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     482:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     492:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4a2:	20 5b 00                                             [.

000004a5 <__c.2843>:
				break;
     4a5:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b5:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004c0 <__c.2840>:
     4c0:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4d0:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004d9 <__c.2837>:
     4d9:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e9:	20 25 64 0a 00                                       %d..

000004ee <__c.2834>:
     4ee:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     4fe:	64 0a 00                                            d..

00000501 <__c.2831>:
     501:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     511:	0a 00                                               ..

00000513 <__c.2827>:
     513:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000522 <__c.2820>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     522:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     532:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000053d <__c.2817>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     53d:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     54d:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000556 <__c.2814>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     566:	20 25 64 0a 00                                       %d..

0000056b <__c.2811>:
     56b:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     57b:	64 0a 00                                            d..

0000057e <__c.2808>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57e:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58e:	0a 00                                               ..

00000590 <__c.2804>:
     590:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000059f <__c.2797>:
     59f:	0a 00                                               ..

000005a1 <__c.2795>:
     5a1:	25 75 00                                            %u.

000005a4 <__c.2793>:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a4:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b4:	5f 6d 61 78 3a 20 00                                _max: .

000005bb <__c.2791>:
     5bb:	0a 00                                               ..

000005bd <__c.2789>:
     5bd:	25 75 00                                            %u.

000005c0 <__c.2787>:
     5c0:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     5d0:	65 64 3a 20 00                                      ed: .

000005d5 <__c.2785>:
     5d5:	0a 00                                               ..

000005d7 <__c.2783>:
     5d7:	25 75 00                                            %u.

000005da <__c.2781>:
     5da:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     5ea:	00                                                  .

000005eb <__c.2779>:
     5eb:	0a 00                                               ..

000005ed <__c.2777>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ed:	25 75 00                                            %u.

000005f0 <__c.2775>:
     5f0:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000005ff <__c.2773>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5ff:	0a 00                                               ..

00000601 <__c.2771>:
     601:	25 75 00                                            %u.

00000604 <__c.2769>:
     604:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     614:	20 00                                                .

00000616 <__c.2767>:
     616:	0a 00                                               ..

00000618 <__c.2765>:
     618:	25 75 00                                            %u.

0000061b <__c.2763>:
     61b:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     62b:	20 00                                                .

0000062d <__c.2761>:
     62d:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000063b <__c.2881>:
     63b:	4d 3e 00                                            M>.

0000063e <__c.2879>:
     63e:	4d 25 64 3e 20 00                                   M%d> .

00000644 <__c.2877>:
     644:	3f 00                                               ?.

00000646 <__c.2874>:
     646:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000653 <__c.2860>:
     653:	43 3e 20 00                                         C> .

00000657 <__c.2850>:
     657:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     667:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     677:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
					  ParserData->TotalReportItems++;
     687:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     697:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000006a5 <__c.2848>:
			UsageListSize       = 0;
     6a5:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
		}
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;
     6b5:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c5:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d5:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     6e5:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     6f5:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     705:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     715:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     725:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     735:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     745:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     755:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     765:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     775:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     785:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     795:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007a0 <__c.2753>:
     7a0:	3f 00                                               ?.

000007a2 <__c.2750>:
     7a2:	4d 3e 20 00                                         M> .

000007a6 <__c.2755>:
     7a6:	43 3e 20 00                                         C> .

000007aa <__c.2899>:
     7aa:	4c 25 64 0a 00                                      L%d..

000007af <__c.2739>:
     7af:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     7bf:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     7cf:	73 65 6b 65 79 0a 00                                sekey..

000007d6 <__c.2571>:
     7d6:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     7e6:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     7f6:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     806:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     816:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     826:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     836:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     846:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     856:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     866:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

00000873 <__c.2666>:
     873:	0a 00                                               ..

00000875 <__c.2664>:
     875:	25 75 00                                            %u.

00000878 <__c.2662>:
     878:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000880 <__c.2660>:
     880:	0a 00                                               ..

00000882 <__c.2658>:
     882:	25 75 00                                            %u.

00000885 <__c.2656>:
     885:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     895:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000008a1 <__c.2654>:
     8a1:	0a 00                                               ..

000008a3 <__c.2652>:
     8a3:	25 75 00                                            %u.

000008a6 <__c.2650>:
     8a6:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     8b6:	20 00                                                .

000008b8 <__c.2648>:
     8b8:	0a 00                                               ..

000008ba <__c.2646>:
     8ba:	25 75 00                                            %u.

000008bd <__c.2644>:
     8bd:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000008c7 <__c.2642>:
     8c7:	0a 00                                               ..

000008c9 <__c.2640>:
     8c9:	25 75 00                                            %u.

000008cc <__c.2638>:
     8cc:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     8dc:	20 00                                                .

000008de <__c.2636>:
     8de:	0a 00                                               ..

000008e0 <__c.2634>:
     8e0:	25 75 00                                            %u.

000008e3 <__c.2632>:
     8e3:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     8f3:	20 00                                                .

000008f5 <__c.2630>:
     8f5:	0a 00                                               ..

000008f7 <__c.2628>:
     8f7:	25 75 00                                            %u.

000008fa <__c.2626>:
     8fa:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     90a:	74 72 6f 6c 3a 20 00                                trol: .

00000911 <__c.2624>:
     911:	0a 00                                               ..

00000913 <__c.2622>:
     913:	25 75 00                                            %u.

00000916 <__c.2620>:
     916:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     926:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000092f <__c.2618>:
     92f:	0a 00                                               ..

00000931 <__c.2616>:
     931:	25 30 32 58 00                                      %02X.

00000936 <__c.2614>:
     936:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     946:	77 3a 20 00                                         w: .

0000094a <__c.2611>:
     94a:	0a 00                                               ..

0000094c <__c.2609>:
     94c:	25 75 00                                            %u.

0000094f <__c.2607>:
     94f:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000958 <__c.2605>:
     958:	0a 00                                               ..

0000095a <__c.2603>:
     95a:	25 75 00                                            %u.

0000095d <__c.2601>:
     95d:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000969 <__c.2599>:
     969:	0a 00                                               ..

0000096b <__c.2597>:
     96b:	25 75 00                                            %u.

0000096e <__c.2595>:
     96e:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000978 <__c.2593>:
     978:	0a 00                                               ..

0000097a <__c.2591>:
     97a:	25 75 00                                            %u.

0000097d <__c.2589>:
     97d:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000987 <__c.2587>:
     987:	0a 00                                               ..

00000989 <__c.2585>:
     989:	25 30 32 58 00                                      %02X.

0000098e <__c.2583>:
     98e:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     99e:	3a 20 00                                            : .

000009a1 <__c.2580>:
     9a1:	0a 00                                               ..

000009a3 <__c.2578>:
     9a3:	25 75 00                                            %u.

000009a6 <__c.2576>:
     9a6:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

000009b6 <__c.2734>:
     9b6:	3f 00                                               ?.

000009b8 <__c.2725>:
     9b8:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     9c8:	25 30 34 6c 58 0a 00                                %04lX..

000009cf <__c.2723>:
     9cf:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     9df:	58 0a 00                                            X..

000009e2 <__c.2721>:
     9e2:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     9f2:	6c 3a 20 25 58 0a 00                                l: %X..

000009f9 <__c.2719>:
     9f9:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a09:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a13 <__c.2717>:
     a13:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a21 <__c.2714>:
     a21:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     a31:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     a41:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000a4f <__c.2712>:
     a4f:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     a5f:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     a6f:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a7f:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

00000a8f <__c.2710>:
     a8f:	42 55 49 4c 44 3a 20 39 39 64 30 39 62 63 2d 64     BUILD: 99d09bc-d
     a9f:	69 72 74 79 20 28 32 33 3a 31 33 3a 30 35 20 44     irty (23:13:05 D
     aaf:	65 63 20 31 37 20 32 30 31 39 29 0a 00              ec 17 2019)..

00000abc <__c.2708>:
     abc:	56 49 44 3a 20 30 78 46 45 45 44 28 4a 6f 6e 61     VID: 0xFEED(Jona
     acc:	74 68 61 6e 20 57 65 73 74 65 72 66 69 65 6c 64     than Westerfield
     adc:	29 20 50 49 44 3a 20 30 78 36 30 36 30 28 41 6c     ) PID: 0x6060(Al
     aec:	70 73 20 4b 65 79 62 6f 61 72 64 20 77 69 74 68     ps Keyboard with
     afc:	20 4c 65 66 74 20 48 61 6e 64 65 64 20 4e 75 6d      Left Handed Num
     b0c:	20 50 61 64 29 20 56 45 52 3a 20 30 78 30 30 30      Pad) VER: 0x000
     b1c:	31 0a 00                                            1..

00000b1f <__c.2706>:
     b1f:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b2f:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     b3f:	6f 72 20 4d 79 20 43 75 73 74 6f 6d 20 4b 65 79     or My Custom Key
     b4f:	62 6f 61 72 64 0a 00                                board..

00000b56 <__c.2704>:
     b56:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000b65 <__c.2701>:
     b65:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000b72 <__c.2699>:
     b72:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000b7e <__c.2696>:
     b7e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000b8e <__c.2694>:
     b8e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000b9d <__c.2691>:
     b9d:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000bab <__c.2689>:
     bab:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000bb8 <__c.2686>:
     bb8:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000bc4 <__c.2684>:
     bc4:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000bd1 <__c.2681>:
     bd1:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     be1:	00                                                  .

00000be2 <__c.2678>:
     be2:	43 3e 20 00                                         C> .

00000be6 <__c.2672>:
     be6:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000bf2 <__ctors_end>:
     bf2:	11 24       	eor	r1, r1
     bf4:	1f be       	out	0x3f, r1	; 63
     bf6:	cf ef       	ldi	r28, 0xFF	; 255
     bf8:	da e0       	ldi	r29, 0x0A	; 10
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	cd bf       	out	0x3d, r28	; 61

00000bfe <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     bfe:	04 b6       	in	r0, 0x34	; 52
     c00:	03 fe       	sbrs	r0, 3
     c02:	24 c0       	rjmp	.+72     	; 0xc4c <__do_copy_data>
     c04:	80 91 50 02 	lds	r24, 0x0250
     c08:	90 91 51 02 	lds	r25, 0x0251
     c0c:	a0 91 52 02 	lds	r26, 0x0252
     c10:	b0 91 53 02 	lds	r27, 0x0253
     c14:	87 30       	cpi	r24, 0x07	; 7
     c16:	90 4b       	sbci	r25, 0xB0	; 176
     c18:	a7 40       	sbci	r26, 0x07	; 7
     c1a:	b0 4b       	sbci	r27, 0xB0	; 176
     c1c:	b9 f4       	brne	.+46     	; 0xc4c <__do_copy_data>
        reset_key = 0;
     c1e:	10 92 50 02 	sts	0x0250, r1
     c22:	10 92 51 02 	sts	0x0251, r1
     c26:	10 92 52 02 	sts	0x0252, r1
     c2a:	10 92 53 02 	sts	0x0253, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c2e:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c30:	84 b7       	in	r24, 0x34	; 52
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c36:	88 e1       	ldi	r24, 0x18	; 24
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	80 93 60 00 	sts	0x0060, r24
     c40:	10 92 60 00 	sts	0x0060, r1
     c44:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c46:	e0 e0       	ldi	r30, 0x00	; 0
     c48:	f8 e3       	ldi	r31, 0x38	; 56
     c4a:	09 95       	icall

00000c4c <__do_copy_data>:
     c4c:	11 e0       	ldi	r17, 0x01	; 1
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	b1 e0       	ldi	r27, 0x01	; 1
     c52:	e0 e3       	ldi	r30, 0x30	; 48
     c54:	f6 e5       	ldi	r31, 0x56	; 86
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__do_copy_data+0x10>
     c58:	05 90       	lpm	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	a4 33       	cpi	r26, 0x34	; 52
     c5e:	b1 07       	cpc	r27, r17
     c60:	d9 f7       	brne	.-10     	; 0xc58 <__do_copy_data+0xc>

00000c62 <__do_clear_bss>:
     c62:	22 e0       	ldi	r18, 0x02	; 2
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b1 e0       	ldi	r27, 0x01	; 1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <.do_clear_bss_start>

00000c6a <.do_clear_bss_loop>:
     c6a:	1d 92       	st	X+, r1

00000c6c <.do_clear_bss_start>:
     c6c:	a0 35       	cpi	r26, 0x50	; 80
     c6e:	b2 07       	cpc	r27, r18
     c70:	e1 f7       	brne	.-8      	; 0xc6a <.do_clear_bss_loop>
     c72:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <main>
     c76:	0c 94 16 2b 	jmp	0x562c	; 0x562c <_exit>

00000c7a <__bad_interrupt>:
     c7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c7e <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     c7e:	ff 93       	push	r31
	push	ZL
     c80:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c82:	e0 91 34 01 	lds	r30, 0x0134
	lds	ZH, xfunc_out+1	;/
     c86:	f0 91 35 01 	lds	r31, 0x0135
	sbiw	ZL, 0		;Skip if null
     c8a:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     c8c:	09 f0       	breq	.+2      	; 0xc90 <xputc+0x12>
	icall
     c8e:	09 95       	icall
2:	pop	ZL
     c90:	ef 91       	pop	r30
	pop	ZH
     c92:	ff 91       	pop	r31
	ret
     c94:	08 95       	ret

00000c96 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c96:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c98:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c9a:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c9c:	11 f0       	breq	.+4      	; 0xca2 <xputs+0xc>
	rcall	xputc
     c9e:	ef df       	rcall	.-34     	; 0xc7e <xputc>
	rjmp	1b
     ca0:	fb cf       	rjmp	.-10     	; 0xc98 <xputs+0x2>
2:	ret
     ca2:	08 95       	ret

00000ca4 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ca4:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ca6:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ca8:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     caa:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <xitoa+0x22>
	neg	r20		;
     cae:	41 95       	neg	r20
	sbrs	r25, 7		;
     cb0:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <xitoa+0x22>
	ldi	r30, '-'	;
     cb4:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cb6:	60 95       	com	r22
	com	r23		;
     cb8:	70 95       	com	r23
	com	r24		;
     cba:	80 95       	com	r24
	com	r25		;
     cbc:	90 95       	com	r25
	adc	r22, r1		;
     cbe:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cc0:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cc2:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cc4:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     cc6:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <xitoa+0x2a>
	neg	r18		;
     cca:	21 95       	neg	r18
	ldi	r19, '0'	;/
     ccc:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     cce:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     cd0:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     cd2:	66 0f       	add	r22, r22
	rol	r23		;
     cd4:	77 1f       	adc	r23, r23
	rol	r24		;
     cd6:	88 1f       	adc	r24, r24
	rol	r25		;
     cd8:	99 1f       	adc	r25, r25
	rol	r26		;
     cda:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     cdc:	a4 17       	cp	r26, r20
	brcs	3f		;
     cde:	10 f0       	brcs	.+4      	; 0xce4 <xitoa+0x40>
	sub	r26, r20	;
     ce0:	a4 1b       	sub	r26, r20
	inc	r22		;
     ce2:	63 95       	inc	r22
3:	dec	r21		;
     ce4:	5a 95       	dec	r21
	brne	2b		;/
     ce6:	a9 f7       	brne	.-22     	; 0xcd2 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     ce8:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     cea:	08 f0       	brcs	.+2      	; 0xcee <xitoa+0x4a>
	subi	r26, -7		;
     cec:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     cee:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     cf0:	af 93       	push	r26
	inc	r31		;/
     cf2:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     cf4:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     cf6:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     cf8:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     cfa:	91 05       	cpc	r25, r1
	brne	1b		;/
     cfc:	41 f7       	brne	.-48     	; 0xcce <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     cfe:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d00:	11 f4       	brne	.+4      	; 0xd06 <xitoa+0x62>
	push	r30		;
     d02:	ef 93       	push	r30
	inc	r31		;/
     d04:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d06:	f2 17       	cp	r31, r18
	brcc	6f		;
     d08:	18 f4       	brcc	.+6      	; 0xd10 <xitoa+0x6c>
	push	r19		;
     d0a:	3f 93       	push	r19
	inc	r31		;
     d0c:	f3 95       	inc	r31
	rjmp	5b		;/
     d0e:	fb cf       	rjmp	.-10     	; 0xd06 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d10:	8f 91       	pop	r24
	rcall	xputc		;
     d12:	b5 df       	rcall	.-150    	; 0xc7e <xputc>
	dec	r31		;
     d14:	fa 95       	dec	r31
	brne	6b		;/
     d16:	e1 f7       	brne	.-8      	; 0xd10 <xitoa+0x6c>

	ret
     d18:	08 95       	ret

00000d1a <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d1a:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d1c:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d1e:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d20:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d22:	21 f0       	breq	.+8      	; 0xd2c <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d24:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d26:	19 f0       	breq	.+6      	; 0xd2e <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d28:	aa df       	rcall	.-172    	; 0xc7e <xputc>
	rjmp	0b		;/
     d2a:	f9 cf       	rjmp	.-14     	; 0xd1e <xvprintf+0x4>
90:	ret
     d2c:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d2e:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d30:	e8 94       	clt
	_LPMI	r21		;Get flags
     d32:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d34:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d36:	c1 f3       	breq	.-16     	; 0xd28 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d38:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d3a:	11 f4       	brne	.+4      	; 0xd40 <xvprintf+0x26>
	set			;/
     d3c:	68 94       	set
22:	_LPMI	r21		;Get width
     d3e:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d40:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d42:	48 f4       	brcc	.+18     	; 0xd56 <xvprintf+0x3c>
	subi	r21, '0'	;
     d44:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d46:	90 f3       	brcs	.-28     	; 0xd2c <xvprintf+0x12>
	lsl	r18		;
     d48:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d4a:	02 2e       	mov	r0, r18
	lsl	r18		;
     d4c:	22 0f       	add	r18, r18
	lsl	r18		;
     d4e:	22 0f       	add	r18, r18
	add	r18, r0		;
     d50:	20 0d       	add	r18, r0
	add	r18, r21	;
     d52:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d54:	f4 cf       	rjmp	.-24     	; 0xd3e <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d56:	0e f4       	brtc	.+2      	; 0xd5a <xvprintf+0x40>
	neg	r18		;
     d58:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d5a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d5c:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d5e:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d60:	19 f3       	breq	.-58     	; 0xd28 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d62:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d64:	29 f1       	breq	.+74     	; 0xdb0 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d66:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d68:	59 f1       	breq	.+86     	; 0xdc0 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d6a:	bc 01       	movw	r22, r24
	clr	r24		;
     d6c:	88 27       	eor	r24, r24
	clr	r25		;
     d6e:	99 27       	eor	r25, r25
	clt			;/
     d70:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d72:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d74:	21 f4       	brne	.+8      	; 0xd7e <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     d76:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d78:	99 91       	ld	r25, Y+
	set			;
     d7a:	68 94       	set
	_LPMI	r21		;/
     d7c:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d7e:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d80:	39 f4       	brne	.+14     	; 0xd90 <xvprintf+0x76>
	ldi	r20, -10	;
     d82:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d84:	7e f0       	brts	.+30     	; 0xda4 <xvprintf+0x8a>
	sbrs	r23, 7		;
     d86:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <xvprintf+0x8a>
	ldi	r24, -1		;
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d8e:	0a c0       	rjmp	.+20     	; 0xda4 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d90:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d92:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d94:	39 f0       	breq	.+14     	; 0xda4 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d96:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d98:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d9a:	21 f0       	breq	.+8      	; 0xda4 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d9c:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d9e:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     da0:	09 f0       	breq	.+2      	; 0xda4 <xvprintf+0x8a>
	ret			;abort
     da2:	08 95       	ret
40:	push	ZH		;Output the value
     da4:	ff 93       	push	r31
	push	ZL		;
     da6:	ef 93       	push	r30
	rcall	xitoa		;
     da8:	7d df       	rcall	.-262    	; 0xca4 <xitoa>
42:	pop	ZL		;
     daa:	ef 91       	pop	r30
	pop	ZH		;
     dac:	ff 91       	pop	r31
	rjmp	0b		;/
     dae:	b7 cf       	rjmp	.-146    	; 0xd1e <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     db0:	ff 93       	push	r31
	push	ZL
     db2:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     db4:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     db6:	81 91       	ld	r24, Z+
	cpi	r24, 0
     db8:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     dba:	b9 f3       	breq	.-18     	; 0xdaa <xvprintf+0x90>
	rcall	xputc
     dbc:	60 df       	rcall	.-320    	; 0xc7e <xputc>
	rjmp	51b
     dbe:	fb cf       	rjmp	.-10     	; 0xdb6 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     dc0:	ff 93       	push	r31
	push	ZL
     dc2:	ef 93       	push	r30
	rcall	xputs
     dc4:	68 df       	rcall	.-304    	; 0xc96 <xputs>
	rjmp	42b
     dc6:	f1 cf       	rjmp	.-30     	; 0xdaa <xvprintf+0x90>

00000dc8 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     dc8:	df 93       	push	r29
	push	YL
     dca:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     dcc:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     dce:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     dd0:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     dd2:	a3 df       	rcall	.-186    	; 0xd1a <xvprintf>
	pop	YL
     dd4:	cf 91       	pop	r28
	pop	YH
     dd6:	df 91       	pop	r29
	ret
     dd8:	08 95       	ret

00000dda <unselect_rows>:
 * pin: D0  D1  D2  D3  D4
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00011111;
     dda:	8a b1       	in	r24, 0x0a	; 10
     ddc:	80 7e       	andi	r24, 0xE0	; 224
     dde:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00011111;
     de0:	8b b1       	in	r24, 0x0b	; 11
     de2:	80 7e       	andi	r24, 0xE0	; 224
     de4:	8b b9       	out	0x0b, r24	; 11
     de6:	08 95       	ret

00000de8 <matrix_init>:


void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     de8:	0e 94 ed 06 	call	0xdda	; 0xdda <unselect_rows>
 * pin: E6  C7  C6  F7  F6  F5  F4  F1  F0  B7  B6  B5  B4  B3  B2  B1  B0  D7 D5
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
     dec:	80 b3       	in	r24, 0x10	; 16
     dee:	8c 70       	andi	r24, 0x0C	; 12
     df0:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
     df2:	81 b3       	in	r24, 0x11	; 17
     df4:	83 6f       	ori	r24, 0xF3	; 243
     df6:	81 bb       	out	0x11, r24	; 17
    DDRD  &= ~(1<<7 | 1<<5);
     df8:	8a b1       	in	r24, 0x0a	; 10
     dfa:	8f 75       	andi	r24, 0x5F	; 95
     dfc:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<5);
     dfe:	8b b1       	in	r24, 0x0b	; 11
     e00:	80 6a       	ori	r24, 0xA0	; 160
     e02:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     e04:	87 b1       	in	r24, 0x07	; 7
     e06:	8f 73       	andi	r24, 0x3F	; 63
     e08:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     e0a:	88 b1       	in	r24, 0x08	; 8
     e0c:	80 6c       	ori	r24, 0xC0	; 192
     e0e:	88 b9       	out	0x08, r24	; 8
    DDRB  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     e10:	84 b1       	in	r24, 0x04	; 4
     e12:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     e14:	85 b1       	in	r24, 0x05	; 5
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	85 b9       	out	0x05, r24	; 5
    DDRE  &= ~(1<<6);
     e1a:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     e1c:	76 9a       	sbi	0x0e, 6	; 14
     e1e:	ea e4       	ldi	r30, 0x4A	; 74
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	a6 e3       	ldi	r26, 0x36	; 54
     e24:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     e26:	11 92       	st	Z+, r1
     e28:	11 92       	st	Z+, r1
     e2a:	11 92       	st	Z+, r1
     e2c:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     e2e:	1d 92       	st	X+, r1
     e30:	1d 92       	st	X+, r1
     e32:	1d 92       	st	X+, r1
     e34:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	ee 35       	cpi	r30, 0x5E	; 94
     e3a:	f8 07       	cpc	r31, r24
     e3c:	a1 f7       	brne	.-24     	; 0xe26 <matrix_init+0x3e>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     e3e:	08 95       	ret

00000e40 <matrix_scan>:

uint8_t matrix_scan(void)
{
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	c6 e3       	ldi	r28, 0x36	; 54
     e4c:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     e4e:	10 e0       	ldi	r17, 0x00	; 0
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     e50:	12 30       	cpi	r17, 0x02	; 2
     e52:	71 f0       	breq	.+28     	; 0xe70 <matrix_scan+0x30>
     e54:	18 f4       	brcc	.+6      	; 0xe5c <matrix_scan+0x1c>
     e56:	11 30       	cpi	r17, 0x01	; 1
     e58:	41 f0       	breq	.+16     	; 0xe6a <matrix_scan+0x2a>
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <matrix_scan+0x24>
     e5c:	13 30       	cpi	r17, 0x03	; 3
     e5e:	59 f0       	breq	.+22     	; 0xe76 <matrix_scan+0x36>
     e60:	14 30       	cpi	r17, 0x04	; 4
     e62:	59 f0       	breq	.+22     	; 0xe7a <matrix_scan+0x3a>
        case 0:
            DDRD  |= (1<<0);
     e64:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
     e66:	58 98       	cbi	0x0b, 0	; 11
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <matrix_scan+0x3e>
            break;
        case 1:
            DDRD  |= (1<<1);
     e6a:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     e6c:	59 98       	cbi	0x0b, 1	; 11
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <matrix_scan+0x3e>
            break;
        case 2:
            DDRD  |= (1<<2);
     e70:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
     e72:	5a 98       	cbi	0x0b, 2	; 11
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <matrix_scan+0x3e>
            break;
        case 3:
            DDRD  |= (1<<3);
     e76:	53 9a       	sbi	0x0a, 3	; 10
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <matrix_scan+0x3c>
            PORTD &= ~(1<<4);
            break;
        case 4:
            DDRD  |= (1<<4);
     e7a:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     e7c:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e7e:	80 ea       	ldi	r24, 0xA0	; 160
     e80:	8a 95       	dec	r24
     e82:	f1 f7       	brne	.-4      	; 0xe80 <matrix_scan+0x40>
    PORTE |=  (1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
     e84:	8c b1       	in	r24, 0x0c	; 12
     e86:	82 95       	swap	r24
     e88:	86 95       	lsr	r24
     e8a:	86 95       	lsr	r24
     e8c:	83 70       	andi	r24, 0x03	; 3
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	89 27       	eor	r24, r25
     e92:	80 fb       	bst	r24, 0
     e94:	ee 24       	eor	r14, r14
     e96:	e0 f8       	bld	r14, 0
     e98:	f1 2c       	mov	r15, r1
            (PINC&(1<<7) ? 0 : (1<<1)) |
     e9a:	86 b1       	in	r24, 0x06	; 6
     e9c:	99 27       	eor	r25, r25
     e9e:	87 fd       	sbrc	r24, 7
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	90 95       	com	r25
     ea6:	88 27       	eor	r24, r24
     ea8:	99 0f       	add	r25, r25
     eaa:	88 1f       	adc	r24, r24
     eac:	99 27       	eor	r25, r25
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
    PORTE |=  (1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
     eb2:	8e 29       	or	r24, r14
     eb4:	9f 29       	or	r25, r15
            (PINC&(1<<7) ? 0 : (1<<1)) |
            (PINC&(1<<6) ? 0 : (1<<2)) |
     eb6:	36 9b       	sbis	0x06, 6	; 6
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <matrix_scan+0x80>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <matrix_scan+0x84>
     ec0:	24 e0       	ldi	r18, 0x04	; 4
     ec2:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
            (PINC&(1<<7) ? 0 : (1<<1)) |
     ec4:	82 2b       	or	r24, r18
     ec6:	93 2b       	or	r25, r19
            (PINC&(1<<6) ? 0 : (1<<2)) |
            (PINF&(1<<7) ? 0 : (1<<3))|
     ec8:	2f b1       	in	r18, 0x0f	; 15
     eca:	33 27       	eor	r19, r19
     ecc:	27 fd       	sbrc	r18, 7
     ece:	30 95       	com	r19
     ed0:	20 95       	com	r18
     ed2:	30 95       	com	r19
     ed4:	22 27       	eor	r18, r18
     ed6:	33 0f       	add	r19, r19
     ed8:	22 1f       	adc	r18, r18
     eda:	33 27       	eor	r19, r19
     edc:	73 e0       	ldi	r23, 0x03	; 3
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	7a 95       	dec	r23
     ee4:	e1 f7       	brne	.-8      	; 0xede <matrix_scan+0x9e>

static matrix_row_t read_cols(void)
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
            (PINC&(1<<7) ? 0 : (1<<1)) |
            (PINC&(1<<6) ? 0 : (1<<2)) |
     ee6:	82 2b       	or	r24, r18
     ee8:	93 2b       	or	r25, r19
            (PINF&(1<<7) ? 0 : (1<<3))|
            (PINF&(1<<6) ? 0 : (1<<4)) |
     eea:	7e 9b       	sbis	0x0f, 6	; 15
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <matrix_scan+0xb4>
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <matrix_scan+0xb8>
     ef4:	60 e1       	ldi	r22, 0x10	; 16
     ef6:	70 e0       	ldi	r23, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
            (PINC&(1<<7) ? 0 : (1<<1)) |
            (PINC&(1<<6) ? 0 : (1<<2)) |
            (PINF&(1<<7) ? 0 : (1<<3))|
     ef8:	86 2b       	or	r24, r22
     efa:	97 2b       	or	r25, r23
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<5) ? 0 : (1<<5)) |
     efc:	7d 9b       	sbis	0x0f, 5	; 15
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <matrix_scan+0xc6>
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <matrix_scan+0xca>
     f06:	60 e2       	ldi	r22, 0x20	; 32
     f08:	70 e0       	ldi	r23, 0x00	; 0
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
            (PINC&(1<<7) ? 0 : (1<<1)) |
            (PINC&(1<<6) ? 0 : (1<<2)) |
            (PINF&(1<<7) ? 0 : (1<<3))|
            (PINF&(1<<6) ? 0 : (1<<4)) |
     f0a:	86 2b       	or	r24, r22
     f0c:	97 2b       	or	r25, r23
            (PINF&(1<<5) ? 0 : (1<<5)) |
            (PINF&(1<<4) ? 0 : (1<<6)) |
     f0e:	7c 9b       	sbis	0x0f, 4	; 15
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <matrix_scan+0xd8>
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <matrix_scan+0xdc>
     f18:	40 e4       	ldi	r20, 0x40	; 64
     f1a:	50 e0       	ldi	r21, 0x00	; 0
    return (PINE&(1<<6) ? 0 : (1<<0)) |
            (PINC&(1<<7) ? 0 : (1<<1)) |
            (PINC&(1<<6) ? 0 : (1<<2)) |
            (PINF&(1<<7) ? 0 : (1<<3))|
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<5) ? 0 : (1<<5)) |
     f1c:	84 2b       	or	r24, r20
     f1e:	95 2b       	or	r25, r21
            (PINF&(1<<4) ? 0 : (1<<6)) |
            (PINF&(1<<1) ? 0 : (1<<7)) |
     f20:	79 9b       	sbis	0x0f, 1	; 15
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <matrix_scan+0xea>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <matrix_scan+0xee>
     f2a:	20 e8       	ldi	r18, 0x80	; 128
     f2c:	30 e0       	ldi	r19, 0x00	; 0
            (PINC&(1<<7) ? 0 : (1<<1)) |
            (PINC&(1<<6) ? 0 : (1<<2)) |
            (PINF&(1<<7) ? 0 : (1<<3))|
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<5) ? 0 : (1<<5)) |
            (PINF&(1<<4) ? 0 : (1<<6)) |
     f2e:	82 2b       	or	r24, r18
     f30:	93 2b       	or	r25, r19
            (PINF&(1<<1) ? 0 : (1<<7)) |
            (PINF&(1<<0) ? 0 : (1<<8)) |
     f32:	78 9b       	sbis	0x0f, 0	; 15
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <matrix_scan+0xfc>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <matrix_scan+0x100>
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	31 e0       	ldi	r19, 0x01	; 1
            (PINC&(1<<6) ? 0 : (1<<2)) |
            (PINF&(1<<7) ? 0 : (1<<3))|
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<5) ? 0 : (1<<5)) |
            (PINF&(1<<4) ? 0 : (1<<6)) |
            (PINF&(1<<1) ? 0 : (1<<7)) |
     f40:	82 2b       	or	r24, r18
     f42:	93 2b       	or	r25, r19
            (PINF&(1<<0) ? 0 : (1<<8)) |
            (PINB&(1<<7) ? 0 : (1<<9)) |
     f44:	23 b1       	in	r18, 0x03	; 3
     f46:	33 27       	eor	r19, r19
     f48:	27 fd       	sbrc	r18, 7
     f4a:	30 95       	com	r19
     f4c:	20 95       	com	r18
     f4e:	30 95       	com	r19
     f50:	22 27       	eor	r18, r18
     f52:	33 0f       	add	r19, r19
     f54:	22 1f       	adc	r18, r18
     f56:	33 27       	eor	r19, r19
     f58:	32 2f       	mov	r19, r18
     f5a:	22 27       	eor	r18, r18
     f5c:	33 0f       	add	r19, r19
            (PINF&(1<<7) ? 0 : (1<<3))|
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<5) ? 0 : (1<<5)) |
            (PINF&(1<<4) ? 0 : (1<<6)) |
            (PINF&(1<<1) ? 0 : (1<<7)) |
            (PINF&(1<<0) ? 0 : (1<<8)) |
     f5e:	82 2b       	or	r24, r18
     f60:	93 2b       	or	r25, r19
            (PINB&(1<<7) ? 0 : (1<<9)) |
            (PINB&(1<<6) ? 0 : (1<<10)) |
     f62:	1e 9b       	sbis	0x03, 6	; 3
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <matrix_scan+0x12c>
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <matrix_scan+0x130>
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	34 e0       	ldi	r19, 0x04	; 4
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<5) ? 0 : (1<<5)) |
            (PINF&(1<<4) ? 0 : (1<<6)) |
            (PINF&(1<<1) ? 0 : (1<<7)) |
            (PINF&(1<<0) ? 0 : (1<<8)) |
            (PINB&(1<<7) ? 0 : (1<<9)) |
     f70:	82 2b       	or	r24, r18
     f72:	93 2b       	or	r25, r19
            (PINB&(1<<6) ? 0 : (1<<10)) |
            (PINB&(1<<5) ? 0 : (1<<11)) |
     f74:	1d 9b       	sbis	0x03, 5	; 3
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <matrix_scan+0x13e>
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <matrix_scan+0x142>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	38 e0       	ldi	r19, 0x08	; 8
            (PINF&(1<<5) ? 0 : (1<<5)) |
            (PINF&(1<<4) ? 0 : (1<<6)) |
            (PINF&(1<<1) ? 0 : (1<<7)) |
            (PINF&(1<<0) ? 0 : (1<<8)) |
            (PINB&(1<<7) ? 0 : (1<<9)) |
            (PINB&(1<<6) ? 0 : (1<<10)) |
     f82:	82 2b       	or	r24, r18
     f84:	93 2b       	or	r25, r19
            (PINB&(1<<5) ? 0 : (1<<11)) |
            (PINB&(1<<4) ? 0 : (1<<12)) |
     f86:	1c 9b       	sbis	0x03, 4	; 3
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <matrix_scan+0x150>
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <matrix_scan+0x154>
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e1       	ldi	r21, 0x10	; 16
            (PINF&(1<<4) ? 0 : (1<<6)) |
            (PINF&(1<<1) ? 0 : (1<<7)) |
            (PINF&(1<<0) ? 0 : (1<<8)) |
            (PINB&(1<<7) ? 0 : (1<<9)) |
            (PINB&(1<<6) ? 0 : (1<<10)) |
            (PINB&(1<<5) ? 0 : (1<<11)) |
     f94:	84 2b       	or	r24, r20
     f96:	95 2b       	or	r25, r21
            (PINB&(1<<4) ? 0 : (1<<12)) |
            (PINB&(1<<3) ? 0 : (1<<13)) |
     f98:	1b 9b       	sbis	0x03, 3	; 3
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <matrix_scan+0x162>
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <matrix_scan+0x166>
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e2       	ldi	r23, 0x20	; 32
            (PINF&(1<<1) ? 0 : (1<<7)) |
            (PINF&(1<<0) ? 0 : (1<<8)) |
            (PINB&(1<<7) ? 0 : (1<<9)) |
            (PINB&(1<<6) ? 0 : (1<<10)) |
            (PINB&(1<<5) ? 0 : (1<<11)) |
            (PINB&(1<<4) ? 0 : (1<<12)) |
     fa6:	86 2b       	or	r24, r22
     fa8:	97 2b       	or	r25, r23
            (PINB&(1<<3) ? 0 : (1<<13)) |
            (PINB&(1<<2) ? 0 : (1<<14)) |
     faa:	1a 9b       	sbis	0x03, 2	; 3
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <matrix_scan+0x174>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <matrix_scan+0x178>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e4       	ldi	r19, 0x40	; 64
            (PINF&(1<<0) ? 0 : (1<<8)) |
            (PINB&(1<<7) ? 0 : (1<<9)) |
            (PINB&(1<<6) ? 0 : (1<<10)) |
            (PINB&(1<<5) ? 0 : (1<<11)) |
            (PINB&(1<<4) ? 0 : (1<<12)) |
            (PINB&(1<<3) ? 0 : (1<<13)) |
     fb8:	82 2b       	or	r24, r18
     fba:	93 2b       	or	r25, r19
            (PINB&(1<<2) ? 0 : (1<<14)) |
     fbc:	aa 27       	eor	r26, r26
     fbe:	97 fd       	sbrc	r25, 7
     fc0:	a0 95       	com	r26
     fc2:	ba 2f       	mov	r27, r26
            (PINB&(1<<1) ? 0 : (1UL<<15)) |
     fc4:	19 9b       	sbis	0x03, 1	; 3
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <matrix_scan+0x190>
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	ba 01       	movw	r22, r20
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <matrix_scan+0x198>
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e8       	ldi	r21, 0x80	; 128
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
            (PINB&(1<<7) ? 0 : (1<<9)) |
            (PINB&(1<<6) ? 0 : (1<<10)) |
            (PINB&(1<<5) ? 0 : (1<<11)) |
            (PINB&(1<<4) ? 0 : (1<<12)) |
            (PINB&(1<<3) ? 0 : (1<<13)) |
            (PINB&(1<<2) ? 0 : (1<<14)) |
     fd8:	48 2b       	or	r20, r24
     fda:	59 2b       	or	r21, r25
     fdc:	6a 2b       	or	r22, r26
     fde:	7b 2b       	or	r23, r27
            (PINB&(1<<1) ? 0 : (1UL<<15)) |
            (PINB&(1<<0) ? 0 : (1UL<<16)) |
     fe0:	18 9b       	sbis	0x03, 0	; 3
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <matrix_scan+0x1ac>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	dc 01       	movw	r26, r24
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <matrix_scan+0x1b4>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a1 e0       	ldi	r26, 0x01	; 1
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
            (PINB&(1<<6) ? 0 : (1<<10)) |
            (PINB&(1<<5) ? 0 : (1<<11)) |
            (PINB&(1<<4) ? 0 : (1<<12)) |
            (PINB&(1<<3) ? 0 : (1<<13)) |
            (PINB&(1<<2) ? 0 : (1<<14)) |
            (PINB&(1<<1) ? 0 : (1UL<<15)) |
     ff4:	48 2b       	or	r20, r24
     ff6:	59 2b       	or	r21, r25
     ff8:	6a 2b       	or	r22, r26
     ffa:	7b 2b       	or	r23, r27
            (PINB&(1<<0) ? 0 : (1UL<<16)) |
            (PIND&(1<<7) ? 0 : (1UL<<17)) |
     ffc:	89 b1       	in	r24, 0x09	; 9
     ffe:	99 27       	eor	r25, r25
    1000:	87 fd       	sbrc	r24, 7
    1002:	90 95       	com	r25
    1004:	a9 2f       	mov	r26, r25
    1006:	b9 2f       	mov	r27, r25
    1008:	80 95       	com	r24
    100a:	90 95       	com	r25
    100c:	a0 95       	com	r26
    100e:	b0 95       	com	r27
    1010:	88 27       	eor	r24, r24
    1012:	b7 fd       	sbrc	r27, 7
    1014:	83 95       	inc	r24
    1016:	99 27       	eor	r25, r25
    1018:	aa 27       	eor	r26, r26
    101a:	bb 27       	eor	r27, r27
    101c:	31 e1       	ldi	r19, 0x11	; 17
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	aa 1f       	adc	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	3a 95       	dec	r19
    1028:	d1 f7       	brne	.-12     	; 0x101e <matrix_scan+0x1de>
            (PINB&(1<<5) ? 0 : (1<<11)) |
            (PINB&(1<<4) ? 0 : (1<<12)) |
            (PINB&(1<<3) ? 0 : (1<<13)) |
            (PINB&(1<<2) ? 0 : (1<<14)) |
            (PINB&(1<<1) ? 0 : (1UL<<15)) |
            (PINB&(1<<0) ? 0 : (1UL<<16)) |
    102a:	48 2b       	or	r20, r24
    102c:	59 2b       	or	r21, r25
    102e:	6a 2b       	or	r22, r26
    1030:	7b 2b       	or	r23, r27
            (PIND&(1<<7) ? 0 : (1UL<<17)) |
            (PIND&(1<<5) ? 0 : (1UL<<18));
    1032:	4d 9b       	sbis	0x09, 5	; 9
    1034:	04 c0       	rjmp	.+8      	; 0x103e <matrix_scan+0x1fe>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	dc 01       	movw	r26, r24
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <matrix_scan+0x206>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a4 e0       	ldi	r26, 0x04	; 4
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    PORTE |=  (1<<6);
}

static matrix_row_t read_cols(void)
{
    return (PINE&(1<<6) ? 0 : (1<<0)) |
    1046:	48 2b       	or	r20, r24
    1048:	59 2b       	or	r21, r25
    104a:	6a 2b       	or	r22, r26
    104c:	7b 2b       	or	r23, r27
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    104e:	88 81       	ld	r24, Y
    1050:	99 81       	ldd	r25, Y+1	; 0x01
    1052:	aa 81       	ldd	r26, Y+2	; 0x02
    1054:	bb 81       	ldd	r27, Y+3	; 0x03
    1056:	84 17       	cp	r24, r20
    1058:	95 07       	cpc	r25, r21
    105a:	a6 07       	cpc	r26, r22
    105c:	b7 07       	cpc	r27, r23
    105e:	69 f1       	breq	.+90     	; 0x10ba <matrix_scan+0x27a>
            matrix_debouncing[i] = cols;
    1060:	48 83       	st	Y, r20
    1062:	59 83       	std	Y+1, r21	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
    1066:	7b 83       	std	Y+3, r23	; 0x03
            if (debouncing) {
    1068:	80 91 00 01 	lds	r24, 0x0100
    106c:	88 23       	and	r24, r24
    106e:	11 f1       	breq	.+68     	; 0x10b4 <matrix_scan+0x274>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1070:	80 91 31 02 	lds	r24, 0x0231
    1074:	80 ff       	sbrs	r24, 0
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <matrix_scan+0x240>
    1078:	87 ea       	ldi	r24, 0xA7	; 167
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    1080:	80 91 31 02 	lds	r24, 0x0231
    1084:	80 ff       	sbrs	r24, 0
    1086:	0e c0       	rjmp	.+28     	; 0x10a4 <matrix_scan+0x264>
    1088:	80 91 00 01 	lds	r24, 0x0100
    108c:	1f 92       	push	r1
    108e:	8f 93       	push	r24
    1090:	82 ea       	ldi	r24, 0xA2	; 162
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	9f 93       	push	r25
    1096:	8f 93       	push	r24
    1098:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	80 91 31 02 	lds	r24, 0x0231
    10a8:	80 ff       	sbrs	r24, 0
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <matrix_scan+0x274>
    10ac:	80 ea       	ldi	r24, 0xA0	; 160
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            }
            debouncing = DEBOUNCE;
    10b4:	85 e0       	ldi	r24, 0x05	; 5
    10b6:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    10ba:	0e 94 ed 06 	call	0xdda	; 0xdda <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    10be:	1f 5f       	subi	r17, 0xFF	; 255
    10c0:	24 96       	adiw	r28, 0x04	; 4
    10c2:	15 30       	cpi	r17, 0x05	; 5
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <matrix_scan+0x288>
    10c6:	c4 ce       	rjmp	.-632    	; 0xe50 <matrix_scan+0x10>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    10c8:	80 91 00 01 	lds	r24, 0x0100
    10cc:	88 23       	and	r24, r24
    10ce:	e1 f0       	breq	.+56     	; 0x1108 <matrix_scan+0x2c8>
        if (--debouncing) {
    10d0:	81 50       	subi	r24, 0x01	; 1
    10d2:	80 93 00 01 	sts	0x0100, r24
    10d6:	88 23       	and	r24, r24
    10d8:	39 f0       	breq	.+14     	; 0x10e8 <matrix_scan+0x2a8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10da:	8f e9       	ldi	r24, 0x9F	; 159
    10dc:	9f e0       	ldi	r25, 0x0F	; 15
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <matrix_scan+0x29e>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <matrix_scan+0x2a4>
    10e4:	00 00       	nop
    10e6:	10 c0       	rjmp	.+32     	; 0x1108 <matrix_scan+0x2c8>
    10e8:	ca e4       	ldi	r28, 0x4A	; 74
    10ea:	d1 e0       	ldi	r29, 0x01	; 1
    10ec:	e6 e3       	ldi	r30, 0x36	; 54
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    10f0:	81 91       	ld	r24, Z+
    10f2:	91 91       	ld	r25, Z+
    10f4:	a1 91       	ld	r26, Z+
    10f6:	b1 91       	ld	r27, Z+
    10f8:	89 93       	st	Y+, r24
    10fa:	99 93       	st	Y+, r25
    10fc:	a9 93       	st	Y+, r26
    10fe:	b9 93       	st	Y+, r27

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	ea 34       	cpi	r30, 0x4A	; 74
    1104:	f9 07       	cpc	r31, r25
    1106:	a1 f7       	brne	.-24     	; 0x10f0 <matrix_scan+0x2b0>
            }
        }
    }

    return 1;
}
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	89 9f       	mul	r24, r25
    111a:	f0 01       	movw	r30, r0
    111c:	11 24       	eor	r1, r1
    111e:	e6 5b       	subi	r30, 0xB6	; 182
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
}
    112a:	08 95       	ret

0000112c <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    112c:	81 ff       	sbrs	r24, 1
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <led_set+0x8>
        // output low
        DDRE |= (1<<6);
    1130:	6e 9a       	sbi	0x0d, 6	; 13
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <led_set+0xa>
        PORTE &= ~(1<<6);
    } else {
        // Hi-Z
        DDRE &= ~(1<<6);
    1134:	6e 98       	cbi	0x0d, 6	; 13
        PORTE &= ~(1<<6);
    1136:	76 98       	cbi	0x0e, 6	; 14
    1138:	08 95       	ret

0000113a <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    113a:	80 91 6a 01 	lds	r24, 0x016A
    113e:	08 95       	ret

00001140 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1140:	9f b7       	in	r25, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	10 92 61 01 	sts	0x0161, r1
    1148:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    114a:	90 91 46 02 	lds	r25, 0x0246
    114e:	94 30       	cpi	r25, 0x04	; 4
    1150:	09 f0       	breq	.+2      	; 0x1154 <sendchar+0x14>
    1152:	58 c0       	rjmp	.+176    	; 0x1204 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1154:	90 91 e9 00 	lds	r25, 0x00E9
    1158:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    115a:	20 91 ec 00 	lds	r18, 0x00EC
    115e:	20 ff       	sbrs	r18, 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <sendchar+0x26>
    1162:	20 e8       	ldi	r18, 0x80	; 128
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <sendchar+0x28>
    1166:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1168:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    116a:	94 e0       	ldi	r25, 0x04	; 4
    116c:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1170:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1174:	90 ff       	sbrs	r25, 0
    1176:	43 c0       	rjmp	.+134    	; 0x11fe <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1178:	90 91 ee 00 	lds	r25, 0x00EE
    117c:	97 ff       	sbrs	r25, 7
    117e:	3f c0       	rjmp	.+126    	; 0x11fe <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1180:	90 91 5e 01 	lds	r25, 0x015E
    1184:	99 23       	and	r25, r25
    1186:	21 f0       	breq	.+8      	; 0x1190 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1188:	90 91 e8 00 	lds	r25, 0x00E8
    118c:	95 ff       	sbrs	r25, 5
    118e:	37 c0       	rjmp	.+110    	; 0x11fe <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1190:	10 92 5e 01 	sts	0x015E, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1194:	96 e0       	ldi	r25, 0x06	; 6
    1196:	30 91 e8 00 	lds	r19, 0x00E8
    119a:	35 fd       	sbrc	r19, 5
    119c:	15 c0       	rjmp	.+42     	; 0x11c8 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    119e:	30 91 46 02 	lds	r19, 0x0246
    11a2:	34 30       	cpi	r19, 0x04	; 4
    11a4:	61 f5       	brne	.+88     	; 0x11fe <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11a6:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    11aa:	35 fd       	sbrc	r19, 5
    11ac:	28 c0       	rjmp	.+80     	; 0x11fe <sendchar+0xbe>
    11ae:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    11b0:	21 f4       	brne	.+8      	; 0x11ba <sendchar+0x7a>
            timeouted = true;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 5e 01 	sts	0x015E, r24
            goto ERROR_EXIT;
    11b8:	22 c0       	rjmp	.+68     	; 0x11fe <sendchar+0xbe>
    11ba:	ef e9       	ldi	r30, 0x9F	; 159
    11bc:	ff e0       	ldi	r31, 0x0F	; 15
    11be:	31 97       	sbiw	r30, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <sendchar+0x7e>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <sendchar+0x84>
    11c4:	00 00       	nop
    11c6:	e7 cf       	rjmp	.-50     	; 0x1196 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11c8:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11cc:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    11d0:	85 fd       	sbrc	r24, 5
    11d2:	0a c0       	rjmp	.+20     	; 0x11e8 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11d4:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    11d8:	80 ff       	sbrs	r24, 0
    11da:	fc cf       	rjmp	.-8      	; 0x11d4 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11dc:	80 91 e8 00 	lds	r24, 0x00E8
    11e0:	8e 77       	andi	r24, 0x7E	; 126
    11e2:	80 93 e8 00 	sts	0x00E8, r24
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    11e8:	8f b7       	in	r24, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	90 93 61 01 	sts	0x0161, r25
    11f2:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11f4:	2f 70       	andi	r18, 0x0F	; 15
    11f6:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
    11fe:	2f 70       	andi	r18, 0x0F	; 15
    1200:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1206:	08 95       	ret

00001208 <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <send_consumer+0x6>
    120e:	1f 92       	push	r1
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1214:	20 91 46 02 	lds	r18, 0x0246
    1218:	24 30       	cpi	r18, 0x04	; 4
    121a:	19 f5       	brne	.+70     	; 0x1262 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    121c:	23 e0       	ldi	r18, 0x03	; 3
    121e:	29 83       	std	Y+1, r18	; 0x01
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	20 93 e9 00 	sts	0x00E9, r18
    1228:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    122a:	90 91 e8 00 	lds	r25, 0x00E8
    122e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1230:	95 fd       	sbrc	r25, 5
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1234:	95 ed       	ldi	r25, 0xD5	; 213
    1236:	9a 95       	dec	r25
    1238:	f1 f7       	brne	.-4      	; 0x1236 <send_consumer+0x2e>
    123a:	00 00       	nop
    123c:	81 11       	cpse	r24, r1
    123e:	f5 cf       	rjmp	.-22     	; 0x122a <send_consumer+0x22>
    1240:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1244:	85 ff       	sbrs	r24, 5
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	63 e0       	ldi	r22, 0x03	; 3
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	0e 94 c6 0b 	call	0x178c	; 0x178c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1258:	80 91 e8 00 	lds	r24, 0x00E8
    125c:	8e 77       	andi	r24, 0x7E	; 126
    125e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
#endif
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	00 d0       	rcall	.+0      	; 0x1274 <send_system+0x6>
    1274:	1f 92       	push	r1
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    127a:	20 91 46 02 	lds	r18, 0x0246
    127e:	24 30       	cpi	r18, 0x04	; 4
    1280:	21 f5       	brne	.+72     	; 0x12ca <send_system+0x5c>
        return;

    report_extra_t r = {
    1282:	22 e0       	ldi	r18, 0x02	; 2
    1284:	29 83       	std	Y+1, r18	; 0x01
    1286:	9b 83       	std	Y+3, r25	; 0x03
    1288:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    128a:	83 e0       	ldi	r24, 0x03	; 3
    128c:	80 93 e9 00 	sts	0x00E9, r24
    1290:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1292:	90 91 e8 00 	lds	r25, 0x00E8
    1296:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1298:	95 fd       	sbrc	r25, 5
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <send_system+0x3a>
    129c:	95 ed       	ldi	r25, 0xD5	; 213
    129e:	9a 95       	dec	r25
    12a0:	f1 f7       	brne	.-4      	; 0x129e <send_system+0x30>
    12a2:	00 00       	nop
    12a4:	81 11       	cpse	r24, r1
    12a6:	f5 cf       	rjmp	.-22     	; 0x1292 <send_system+0x24>
    12a8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12ac:	85 ff       	sbrs	r24, 5
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	63 e0       	ldi	r22, 0x03	; 3
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 c6 0b 	call	0x178c	; 0x178c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c0:	80 91 e8 00 	lds	r24, 0x00E8
    12c4:	8e 77       	andi	r24, 0x7E	; 126
    12c6:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
#endif
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12d6:	20 91 46 02 	lds	r18, 0x0246
    12da:	24 30       	cpi	r18, 0x04	; 4
    12dc:	f1 f4       	brne	.+60     	; 0x131a <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12de:	22 e0       	ldi	r18, 0x02	; 2
    12e0:	20 93 e9 00 	sts	0x00E9, r18
    12e4:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12e6:	30 91 e8 00 	lds	r19, 0x00E8
    12ea:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12ec:	35 fd       	sbrc	r19, 5
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <send_mouse+0x26>
    12f0:	35 ed       	ldi	r19, 0xD5	; 213
    12f2:	3a 95       	dec	r19
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <send_mouse+0x1c>
    12f6:	00 00       	nop
    12f8:	21 11       	cpse	r18, r1
    12fa:	f5 cf       	rjmp	.-22     	; 0x12e6 <send_mouse+0x10>
    12fc:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1300:	25 ff       	sbrs	r18, 5
    1302:	0b c0       	rjmp	.+22     	; 0x131a <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	65 e0       	ldi	r22, 0x05	; 5
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	0e 94 c6 0b 	call	0x178c	; 0x178c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1310:	80 91 e8 00 	lds	r24, 0x00E8
    1314:	8e 77       	andi	r24, 0x7E	; 126
    1316:	80 93 e8 00 	sts	0x00E8, r24
    131a:	08 95       	ret

0000131c <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1322:	80 91 46 02 	lds	r24, 0x0246
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	39 f5       	brne	.+78     	; 0x1378 <send_keyboard+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 e9 00 	sts	0x00E9, r24
    1330:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1332:	90 91 e8 00 	lds	r25, 0x00E8
    1336:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1338:	95 fd       	sbrc	r25, 5
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <send_keyboard+0x2c>
    133c:	95 ed       	ldi	r25, 0xD5	; 213
    133e:	9a 95       	dec	r25
    1340:	f1 f7       	brne	.-4      	; 0x133e <send_keyboard+0x22>
    1342:	00 00       	nop
    1344:	81 11       	cpse	r24, r1
    1346:	f5 cf       	rjmp	.-22     	; 0x1332 <send_keyboard+0x16>
    1348:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    134c:	85 ff       	sbrs	r24, 5
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <send_keyboard+0x5c>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	68 e0       	ldi	r22, 0x08	; 8
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 c6 0b 	call	0x178c	; 0x178c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    135e:	80 91 e8 00 	lds	r24, 0x00E8
    1362:	8e 77       	andi	r24, 0x7E	; 126
    1364:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1368:	88 e0       	ldi	r24, 0x08	; 8
    136a:	fe 01       	movw	r30, r28
    136c:	a2 e6       	ldi	r26, 0x62	; 98
    136e:	b1 e0       	ldi	r27, 0x01	; 1
    1370:	01 90       	ld	r0, Z+
    1372:	0d 92       	st	X+, r0
    1374:	8a 95       	dec	r24
    1376:	e1 f7       	brne	.-8      	; 0x1370 <send_keyboard+0x54>
}
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    137e:	8f ed       	ldi	r24, 0xDF	; 223
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1386:	80 91 45 02 	lds	r24, 0x0245
    138a:	81 11       	cpse	r24, r1
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    138e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <USB_Disable>
        USB_Init();
    1392:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1396:	80 91 e2 00 	lds	r24, 0x00E2
    139a:	84 60       	ori	r24, 0x04	; 4
    139c:	80 93 e2 00 	sts	0x00E2, r24
    13a0:	08 95       	ret

000013a2 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    13a2:	8b ed       	ldi	r24, 0xDB	; 219
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    13aa:	10 92 45 02 	sts	0x0245, r1
    13ae:	08 95       	ret

000013b0 <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    13b0:	08 95       	ret

000013b2 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    13b2:	80 91 5f 01 	lds	r24, 0x015F
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	80 93 5f 01 	sts	0x015F, r24
    13bc:	62 e3       	ldi	r22, 0x32	; 50
    13be:	0e 94 ab 2a 	call	0x5556	; 0x5556 <__udivmodqi4>
    13c2:	91 11       	cpse	r25, r1
    13c4:	35 c0       	rjmp	.+106    	; 0x1430 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    13c6:	10 92 5f 01 	sts	0x015F, r1

    if (!console_flush) return;
    13ca:	80 91 61 01 	lds	r24, 0x0161
    13ce:	88 23       	and	r24, r24
    13d0:	79 f1       	breq	.+94     	; 0x1430 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    13d2:	80 91 46 02 	lds	r24, 0x0246
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	49 f5       	brne	.+82     	; 0x142c <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13da:	80 91 e9 00 	lds	r24, 0x00E9
    13de:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13e0:	90 91 ec 00 	lds	r25, 0x00EC
    13e4:	90 ff       	sbrs	r25, 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <EVENT_USB_Device_StartOfFrame+0x3a>
    13e8:	90 e8       	ldi	r25, 0x80	; 128
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <EVENT_USB_Device_StartOfFrame+0x3c>
    13ec:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13ee:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f0:	84 e0       	ldi	r24, 0x04	; 4
    13f2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13f6:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    13fa:	80 ff       	sbrs	r24, 0
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    13fe:	80 91 ee 00 	lds	r24, 0x00EE
    1402:	87 ff       	sbrs	r24, 7
    1404:	10 c0       	rjmp	.+32     	; 0x1426 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1406:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    140a:	85 ff       	sbrs	r24, 5
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    140e:	10 92 f1 00 	sts	0x00F1, r1
    1412:	f9 cf       	rjmp	.-14     	; 0x1406 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1414:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1418:	80 ff       	sbrs	r24, 0
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    141c:	80 91 e8 00 	lds	r24, 0x00E8
    1420:	8e 77       	andi	r24, 0x7E	; 126
    1422:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1426:	9f 70       	andi	r25, 0x0F	; 15
    1428:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    142c:	10 92 61 01 	sts	0x0161, r1
    1430:	08 95       	ret

00001432 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1432:	42 e0       	ldi	r20, 0x02	; 2
    1434:	61 ec       	ldi	r22, 0xC1	; 193
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv>
    143c:	42 e0       	ldi	r20, 0x02	; 2
    143e:	61 ec       	ldi	r22, 0xC1	; 193
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv>
    1446:	42 e0       	ldi	r20, 0x02	; 2
    1448:	61 ec       	ldi	r22, 0xC1	; 193
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv>
    1450:	42 e2       	ldi	r20, 0x22	; 34
    1452:	61 ec       	ldi	r22, 0xC1	; 193
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv>

0000145a <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    145a:	80 91 48 02 	lds	r24, 0x0248
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	09 f4       	brne	.+2      	; 0x1464 <EVENT_USB_Device_ControlRequest+0xa>
    1462:	53 c0       	rjmp	.+166    	; 0x150a <EVENT_USB_Device_ControlRequest+0xb0>
    1464:	30 f4       	brcc	.+12     	; 0x1472 <EVENT_USB_Device_ControlRequest+0x18>
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	71 f0       	breq	.+28     	; 0x1486 <EVENT_USB_Device_ControlRequest+0x2c>
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	09 f4       	brne	.+2      	; 0x1470 <EVENT_USB_Device_ControlRequest+0x16>
    146e:	8c c0       	rjmp	.+280    	; 0x1588 <EVENT_USB_Device_ControlRequest+0x12e>
    1470:	08 95       	ret
    1472:	8a 30       	cpi	r24, 0x0A	; 10
    1474:	09 f4       	brne	.+2      	; 0x1478 <EVENT_USB_Device_ControlRequest+0x1e>
    1476:	78 c0       	rjmp	.+240    	; 0x1568 <EVENT_USB_Device_ControlRequest+0x10e>
    1478:	8b 30       	cpi	r24, 0x0B	; 11
    147a:	09 f4       	brne	.+2      	; 0x147e <EVENT_USB_Device_ControlRequest+0x24>
    147c:	5e c0       	rjmp	.+188    	; 0x153a <EVENT_USB_Device_ControlRequest+0xe0>
    147e:	89 30       	cpi	r24, 0x09	; 9
    1480:	09 f0       	breq	.+2      	; 0x1484 <EVENT_USB_Device_ControlRequest+0x2a>
    1482:	9a c0       	rjmp	.+308    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
    1484:	20 c0       	rjmp	.+64     	; 0x14c6 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1486:	80 91 47 02 	lds	r24, 0x0247
    148a:	81 3a       	cpi	r24, 0xA1	; 161
    148c:	09 f0       	breq	.+2      	; 0x1490 <EVENT_USB_Device_ControlRequest+0x36>
    148e:	94 c0       	rjmp	.+296    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1490:	80 91 e8 00 	lds	r24, 0x00E8
    1494:	87 7f       	andi	r24, 0xF7	; 247
    1496:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    149a:	80 91 4b 02 	lds	r24, 0x024B
    149e:	90 91 4c 02 	lds	r25, 0x024C
    14a2:	89 2b       	or	r24, r25
    14a4:	21 f0       	breq	.+8      	; 0x14ae <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    14a6:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    14ae:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    14b0:	82 e6       	ldi	r24, 0x62	; 98
    14b2:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	0e 94 0f 0c 	call	0x181e	; 0x181e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14ba:	80 91 e8 00 	lds	r24, 0x00E8
    14be:	8b 77       	andi	r24, 0x7B	; 123
    14c0:	80 93 e8 00 	sts	0x00E8, r24
    14c4:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14c6:	80 91 47 02 	lds	r24, 0x0247
    14ca:	81 32       	cpi	r24, 0x21	; 33
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <EVENT_USB_Device_ControlRequest+0x76>
    14ce:	74 c0       	rjmp	.+232    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14d0:	80 91 4b 02 	lds	r24, 0x024B
    14d4:	90 91 4c 02 	lds	r25, 0x024C
    14d8:	89 2b       	or	r24, r25
    14da:	09 f0       	breq	.+2      	; 0x14de <EVENT_USB_Device_ControlRequest+0x84>
    14dc:	6d c0       	rjmp	.+218    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14de:	80 91 e8 00 	lds	r24, 0x00E8
    14e2:	87 7f       	andi	r24, 0xF7	; 247
    14e4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14e8:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    14ec:	82 fd       	sbrc	r24, 2
    14ee:	05 c0       	rjmp	.+10     	; 0x14fa <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    14f0:	80 91 46 02 	lds	r24, 0x0246
    14f4:	81 11       	cpse	r24, r1
    14f6:	f8 cf       	rjmp	.-16     	; 0x14e8 <EVENT_USB_Device_ControlRequest+0x8e>
    14f8:	5f c0       	rjmp	.+190    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14fa:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    14fe:	80 93 6a 01 	sts	0x016A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1502:	80 91 e8 00 	lds	r24, 0x00E8
    1506:	8b 77       	andi	r24, 0x7B	; 123
    1508:	53 c0       	rjmp	.+166    	; 0x15b0 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    150a:	80 91 47 02 	lds	r24, 0x0247
    150e:	81 3a       	cpi	r24, 0xA1	; 161
    1510:	09 f0       	breq	.+2      	; 0x1514 <EVENT_USB_Device_ControlRequest+0xba>
    1512:	52 c0       	rjmp	.+164    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1514:	80 91 4b 02 	lds	r24, 0x024B
    1518:	90 91 4c 02 	lds	r25, 0x024C
    151c:	89 2b       	or	r24, r25
    151e:	09 f0       	breq	.+2      	; 0x1522 <EVENT_USB_Device_ControlRequest+0xc8>
    1520:	4b c0       	rjmp	.+150    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1522:	80 91 e8 00 	lds	r24, 0x00E8
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    152c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1530:	80 ff       	sbrs	r24, 0
    1532:	fc cf       	rjmp	.-8      	; 0x152c <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1534:	80 91 0b 01 	lds	r24, 0x010B
    1538:	36 c0       	rjmp	.+108    	; 0x15a6 <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    153a:	80 91 47 02 	lds	r24, 0x0247
    153e:	81 32       	cpi	r24, 0x21	; 33
    1540:	d9 f5       	brne	.+118    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1542:	80 91 4b 02 	lds	r24, 0x024B
    1546:	90 91 4c 02 	lds	r25, 0x024C
    154a:	89 2b       	or	r24, r25
    154c:	a9 f5       	brne	.+106    	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    154e:	80 91 e8 00 	lds	r24, 0x00E8
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1558:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    155c:	80 91 49 02 	lds	r24, 0x0249
    1560:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    1564:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1568:	80 91 47 02 	lds	r24, 0x0247
    156c:	81 32       	cpi	r24, 0x21	; 33
    156e:	21 f5       	brne	.+72     	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
    1570:	80 91 e8 00 	lds	r24, 0x00E8
    1574:	87 7f       	andi	r24, 0xF7	; 247
    1576:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    157a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    157e:	80 91 4a 02 	lds	r24, 0x024A
    1582:	80 93 6b 01 	sts	0x016B, r24
    1586:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1588:	80 91 47 02 	lds	r24, 0x0247
    158c:	81 3a       	cpi	r24, 0xA1	; 161
    158e:	a1 f4       	brne	.+40     	; 0x15b8 <EVENT_USB_Device_ControlRequest+0x15e>
    1590:	80 91 e8 00 	lds	r24, 0x00E8
    1594:	87 7f       	andi	r24, 0xF7	; 247
    1596:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    159a:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    159e:	80 ff       	sbrs	r24, 0
    15a0:	fc cf       	rjmp	.-8      	; 0x159a <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    15a2:	80 91 6b 01 	lds	r24, 0x016B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15a6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15aa:	80 91 e8 00 	lds	r24, 0x00E8
    15ae:	8e 77       	andi	r24, 0x7E	; 126
    15b0:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    15b4:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <Endpoint_ClearStatusStage>
    15b8:	08 95       	ret

000015ba <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    15ba:	08 95       	ret

000015bc <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    15bc:	08 95       	ret

000015be <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    15be:	80 91 6a 01 	lds	r24, 0x016A
    15c2:	80 93 60 01 	sts	0x0160, r24
    keyboard_led_stats = 0;
    15c6:	10 92 6a 01 	sts	0x016A, r1
    led_set(keyboard_led_stats);
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 96 08 	call	0x112c	; 0x112c <led_set>

    matrix_clear();
    15d0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <matrix_clear>
    clear_keyboard();
    15d4:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <clear_keyboard>

000015d8 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    15d8:	0c 94 df 0a 	jmp	0x15be	; 0x15be <hook_usb_suspend_entry>

000015dc <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    15dc:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    15e0:	80 91 44 02 	lds	r24, 0x0244
    15e4:	88 23       	and	r24, r24
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <hook_usb_suspend_loop+0x16>
    15e8:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <suspend_wakeup_condition>
    15ec:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    15ee:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <USB_Device_SendRemoteWakeup>
    15f2:	08 95       	ret

000015f4 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    15f4:	84 b7       	in	r24, 0x34	; 52
    15f6:	87 7f       	andi	r24, 0xF7	; 247
    15f8:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    15fa:	88 e1       	ldi	r24, 0x18	; 24
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	80 93 60 00 	sts	0x0060, r24
    1604:	10 92 60 00 	sts	0x0060, r1
    1608:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	80 e8       	ldi	r24, 0x80	; 128
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	80 93 61 00 	sts	0x0061, r24
    1616:	90 93 61 00 	sts	0x0061, r25
    161a:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    161c:	80 ea       	ldi	r24, 0xA0	; 160
    161e:	98 e0       	ldi	r25, 0x08	; 8
    1620:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <print_set_sendchar>
    print("\r\ninit\n");
    1624:	83 ed       	ldi	r24, 0xD3	; 211
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>

    hook_early_init();
    162c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <hook_early_init>
    keyboard_setup();
    1630:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1634:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <USB_Disable>

    USB_Init();
    1638:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <USB_Init>
    163c:	80 91 e2 00 	lds	r24, 0x00E2
    1640:	84 60       	ori	r24, 0x04	; 4
    1642:	80 93 e2 00 	sts	0x00E2, r24
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1646:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1648:	80 91 46 02 	lds	r24, 0x0246
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	e1 f7       	brne	.-8      	; 0x1648 <main+0x54>
    1650:	81 ed       	ldi	r24, 0xD1	; 209
    1652:	97 e0       	ldi	r25, 0x07	; 7
    1654:	01 97       	sbiw	r24, 0x01	; 1
    }

    /* wait for Console startup */
    // TODO: long delay often works anyhoo but proper startup would be better
    uint16_t delay = 2000;
    while (delay--) {
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	39 f0       	breq	.+14     	; 0x1668 <main+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    165a:	ef e9       	ldi	r30, 0x9F	; 159
    165c:	ff e0       	ldi	r31, 0x0F	; 15
    165e:	31 97       	sbiw	r30, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <main+0x6a>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <main+0x70>
    1664:	00 00       	nop
    1666:	f6 cf       	rjmp	.-20     	; 0x1654 <main+0x60>
        USB_USBTask();
#endif
        _delay_ms(1);
    }

    print("USB configured.\n");
    1668:	82 ec       	ldi	r24, 0xC2	; 194
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>

    /* init modules */
    keyboard_init();
    1670:	0e 94 ee 10 	call	0x21dc	; 0x21dc <keyboard_init>
    host_set_driver(&lufa_driver);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	0e 94 2f 10 	call	0x205e	; 0x205e <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    167c:	81 eb       	ldi	r24, 0xB1	; 177
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    hook_late_init();
    1684:	0e 94 de 0a 	call	0x15bc	; 0x15bc <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1688:	80 91 46 02 	lds	r24, 0x0246
    168c:	85 30       	cpi	r24, 0x05	; 5
    168e:	19 f4       	brne	.+6      	; 0x1696 <main+0xa2>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    1690:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <hook_usb_suspend_loop>
    1694:	f9 cf       	rjmp	.-14     	; 0x1688 <main+0x94>
        }

        keyboard_task();
    1696:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    169a:	f6 cf       	rjmp	.-20     	; 0x1688 <main+0x94>

0000169c <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    169c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    16a0:	80 91 60 01 	lds	r24, 0x0160
    16a4:	80 93 6a 01 	sts	0x016A, r24
    16a8:	08 95       	ret

000016aa <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    16aa:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <hook_usb_wakeup>

000016ae <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    16ae:	29 2f       	mov	r18, r25
    16b0:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16b2:	23 30       	cpi	r18, 0x03	; 3
    16b4:	31 05       	cpc	r19, r1
    16b6:	a9 f0       	breq	.+42     	; 0x16e2 <CALLBACK_USB_GetDescriptor+0x34>
    16b8:	6c f4       	brge	.+26     	; 0x16d4 <CALLBACK_USB_GetDescriptor+0x26>
    16ba:	21 30       	cpi	r18, 0x01	; 1
    16bc:	31 05       	cpc	r19, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <CALLBACK_USB_GetDescriptor+0x14>
    16c0:	42 c0       	rjmp	.+132    	; 0x1746 <CALLBACK_USB_GetDescriptor+0x98>
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <CALLBACK_USB_GetDescriptor+0x1c>
    16c8:	43 c0       	rjmp	.+134    	; 0x1750 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16ca:	84 e7       	ldi	r24, 0x74	; 116
    16cc:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    16ce:	23 e6       	ldi	r18, 0x63	; 99
    16d0:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    16d2:	42 c0       	rjmp	.+132    	; 0x1758 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16d4:	21 32       	cpi	r18, 0x21	; 33
    16d6:	31 05       	cpc	r19, r1
    16d8:	c9 f0       	breq	.+50     	; 0x170c <CALLBACK_USB_GetDescriptor+0x5e>
    16da:	22 32       	cpi	r18, 0x22	; 34
    16dc:	31 05       	cpc	r19, r1
    16de:	19 f1       	breq	.+70     	; 0x1726 <CALLBACK_USB_GetDescriptor+0x78>
    16e0:	37 c0       	rjmp	.+110    	; 0x1750 <CALLBACK_USB_GetDescriptor+0xa2>
    16e2:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	41 f0       	breq	.+16     	; 0x16fa <CALLBACK_USB_GetDescriptor+0x4c>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	91 05       	cpc	r25, r1
    16ee:	41 f0       	breq	.+16     	; 0x1700 <CALLBACK_USB_GetDescriptor+0x52>
    16f0:	89 2b       	or	r24, r25
    16f2:	71 f5       	brne	.+92     	; 0x1750 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    16f4:	ef e5       	ldi	r30, 0x5F	; 95
    16f6:	f2 e0       	ldi	r31, 0x02	; 2
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    16fa:	e3 e3       	ldi	r30, 0x33	; 51
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1700:	e3 ee       	ldi	r30, 0xE3	; 227
    1702:	f1 e0       	ldi	r31, 0x01	; 1
    1704:	84 91       	lpm	r24, Z
    1706:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1708:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    170a:	26 c0       	rjmp	.+76     	; 0x1758 <CALLBACK_USB_GetDescriptor+0xaa>
    170c:	64 30       	cpi	r22, 0x04	; 4
    170e:	00 f5       	brcc	.+64     	; 0x1750 <CALLBACK_USB_GetDescriptor+0xa2>
    1710:	e6 2f       	mov	r30, r22
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	e0 5e       	subi	r30, 0xE0	; 224
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	20 81       	ld	r18, Z
    171e:	31 81       	ldd	r19, Z+1	; 0x01
    1720:	89 e0       	ldi	r24, 0x09	; 9
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	19 c0       	rjmp	.+50     	; 0x1758 <CALLBACK_USB_GetDescriptor+0xaa>
    1726:	64 30       	cpi	r22, 0x04	; 4
    1728:	98 f4       	brcc	.+38     	; 0x1750 <CALLBACK_USB_GetDescriptor+0xa2>
    172a:	e6 2f       	mov	r30, r22
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	df 01       	movw	r26, r30
    1730:	aa 0f       	add	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	a8 5e       	subi	r26, 0xE8	; 232
    1736:	be 4f       	sbci	r27, 0xFE	; 254
    1738:	2d 91       	ld	r18, X+
    173a:	3c 91       	ld	r19, X
    173c:	ec 5e       	subi	r30, 0xEC	; 236
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	80 81       	ld	r24, Z
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1746:	82 e1       	ldi	r24, 0x12	; 18
    1748:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    174a:	27 ed       	ldi	r18, 0xD7	; 215
    174c:	32 e0       	ldi	r19, 0x02	; 2
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <CALLBACK_USB_GetDescriptor+0xaa>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1758:	fa 01       	movw	r30, r20
    175a:	31 83       	std	Z+1, r19	; 0x01
    175c:	20 83       	st	Z, r18
    return Size;
}
    175e:	08 95       	ret

00001760 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1764:	82 e1       	ldi	r24, 0x12	; 18
    1766:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1768:	09 b4       	in	r0, 0x29	; 41
    176a:	00 fe       	sbrs	r0, 0
    176c:	fd cf       	rjmp	.-6      	; 0x1768 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    176e:	80 91 d8 00 	lds	r24, 0x00D8
    1772:	8f 7d       	andi	r24, 0xDF	; 223
    1774:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1778:	80 91 e0 00 	lds	r24, 0x00E0
    177c:	82 60       	ori	r24, 0x02	; 2
    177e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1782:	80 91 e0 00 	lds	r24, 0x00E0
    1786:	81 fd       	sbrc	r24, 1
    1788:	fc cf       	rjmp	.-8      	; 0x1782 <USB_Device_SendRemoteWakeup+0x22>
}
    178a:	08 95       	ret

0000178c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	7c 01       	movw	r14, r24
    179e:	8b 01       	movw	r16, r22
    17a0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17a2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <Endpoint_WaitUntilReady>
    17a6:	81 11       	cpse	r24, r1
    17a8:	31 c0       	rjmp	.+98     	; 0x180c <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    17aa:	20 97       	sbiw	r28, 0x00	; 0
    17ac:	31 f0       	breq	.+12     	; 0x17ba <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    17ae:	88 81       	ld	r24, Y
    17b0:	99 81       	ldd	r25, Y+1	; 0x01
    17b2:	08 1b       	sub	r16, r24
    17b4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    17b6:	e8 0e       	add	r14, r24
    17b8:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    17ba:	c1 2c       	mov	r12, r1
    17bc:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17be:	01 15       	cp	r16, r1
    17c0:	11 05       	cpc	r17, r1
    17c2:	19 f1       	breq	.+70     	; 0x180a <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17c4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    17c8:	85 fd       	sbrc	r24, 5
    17ca:	14 c0       	rjmp	.+40     	; 0x17f4 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17cc:	80 91 e8 00 	lds	r24, 0x00E8
    17d0:	8e 77       	andi	r24, 0x7E	; 126
    17d2:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    17d6:	20 97       	sbiw	r28, 0x00	; 0
    17d8:	41 f0       	breq	.+16     	; 0x17ea <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    17da:	88 81       	ld	r24, Y
    17dc:	99 81       	ldd	r25, Y+1	; 0x01
    17de:	8c 0d       	add	r24, r12
    17e0:	9d 1d       	adc	r25, r13
    17e2:	99 83       	std	Y+1, r25	; 0x01
    17e4:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    17e6:	85 e0       	ldi	r24, 0x05	; 5
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17ea:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <Endpoint_WaitUntilReady>
    17ee:	88 23       	and	r24, r24
    17f0:	31 f3       	breq	.-52     	; 0x17be <Endpoint_Write_Stream_LE+0x32>
    17f2:	0c c0       	rjmp	.+24     	; 0x180c <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17f4:	f7 01       	movw	r30, r14
    17f6:	81 91       	ld	r24, Z+
    17f8:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17fa:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    17fe:	01 50       	subi	r16, 0x01	; 1
    1800:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1802:	ff ef       	ldi	r31, 0xFF	; 255
    1804:	cf 1a       	sub	r12, r31
    1806:	df 0a       	sbc	r13, r31
    1808:	da cf       	rjmp	.-76     	; 0x17be <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    180a:	80 e0       	ldi	r24, 0x00	; 0
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	08 95       	ret

0000181e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    181e:	20 91 4d 02 	lds	r18, 0x024D
    1822:	30 91 4e 02 	lds	r19, 0x024E
    1826:	26 17       	cp	r18, r22
    1828:	37 07       	cpc	r19, r23
    182a:	48 f0       	brcs	.+18     	; 0x183e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    182c:	61 15       	cp	r22, r1
    182e:	71 05       	cpc	r23, r1
    1830:	39 f4       	brne	.+14     	; 0x1840 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1832:	20 91 e8 00 	lds	r18, 0x00E8
    1836:	2e 77       	andi	r18, 0x7E	; 126
    1838:	20 93 e8 00 	sts	0x00E8, r18
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <Endpoint_Write_Control_Stream_LE+0x22>
    183e:	b9 01       	movw	r22, r18
    1840:	fc 01       	movw	r30, r24
    1842:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1844:	61 15       	cp	r22, r1
    1846:	71 05       	cpc	r23, r1
    1848:	b9 f1       	breq	.+110    	; 0x18b8 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    184a:	80 91 46 02 	lds	r24, 0x0246

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    184e:	88 23       	and	r24, r24
    1850:	09 f4       	brne	.+2      	; 0x1854 <Endpoint_Write_Control_Stream_LE+0x36>
    1852:	40 c0       	rjmp	.+128    	; 0x18d4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1854:	85 30       	cpi	r24, 0x05	; 5
    1856:	09 f4       	brne	.+2      	; 0x185a <Endpoint_Write_Control_Stream_LE+0x3c>
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    185a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    185e:	83 fd       	sbrc	r24, 3
    1860:	3d c0       	rjmp	.+122    	; 0x18dc <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1862:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1866:	82 ff       	sbrs	r24, 2
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <Endpoint_Write_Control_Stream_LE+0x58>
    186a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    186e:	82 ff       	sbrs	r24, 2
    1870:	26 c0       	rjmp	.+76     	; 0x18be <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1876:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    187a:	80 ff       	sbrs	r24, 0
    187c:	e3 cf       	rjmp	.-58     	; 0x1844 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    187e:	20 91 f3 00 	lds	r18, 0x00F3
    1882:	80 91 f2 00 	lds	r24, 0x00F2
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    188a:	61 15       	cp	r22, r1
    188c:	71 05       	cpc	r23, r1
    188e:	51 f0       	breq	.+20     	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0x86>
    1890:	88 30       	cpi	r24, 0x08	; 8
    1892:	91 05       	cpc	r25, r1
    1894:	38 f4       	brcc	.+14     	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1896:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1898:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    189c:	61 50       	subi	r22, 0x01	; 1
    189e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	f3 cf       	rjmp	.-26     	; 0x188a <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	08 97       	sbiw	r24, 0x08	; 8
    18a8:	09 f0       	breq	.+2      	; 0x18ac <Endpoint_Write_Control_Stream_LE+0x8e>
    18aa:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ac:	80 91 e8 00 	lds	r24, 0x00E8
    18b0:	8e 77       	andi	r24, 0x7E	; 126
    18b2:	80 93 e8 00 	sts	0x00E8, r24
    18b6:	c6 cf       	rjmp	.-116    	; 0x1844 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18b8:	21 11       	cpse	r18, r1
    18ba:	c7 cf       	rjmp	.-114    	; 0x184a <Endpoint_Write_Control_Stream_LE+0x2c>
    18bc:	d6 cf       	rjmp	.-84     	; 0x186a <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18be:	80 91 46 02 	lds	r24, 0x0246

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18c2:	88 23       	and	r24, r24
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18c6:	85 30       	cpi	r24, 0x05	; 5
    18c8:	39 f0       	breq	.+14     	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ce:	83 ff       	sbrs	r24, 3
    18d0:	cc cf       	rjmp	.-104    	; 0x186a <Endpoint_Write_Control_Stream_LE+0x4c>
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18de:	08 95       	ret

000018e0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18e0:	20 91 4d 02 	lds	r18, 0x024D
    18e4:	30 91 4e 02 	lds	r19, 0x024E
    18e8:	26 17       	cp	r18, r22
    18ea:	37 07       	cpc	r19, r23
    18ec:	48 f0       	brcs	.+18     	; 0x1900 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	39 f4       	brne	.+14     	; 0x1902 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18f4:	20 91 e8 00 	lds	r18, 0x00E8
    18f8:	2e 77       	andi	r18, 0x7E	; 126
    18fa:	20 93 e8 00 	sts	0x00E8, r18
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <Endpoint_Write_Control_PStream_LE+0x22>
    1900:	b9 01       	movw	r22, r18
    1902:	fc 01       	movw	r30, r24
    1904:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1906:	61 15       	cp	r22, r1
    1908:	71 05       	cpc	r23, r1
    190a:	c1 f1       	breq	.+112    	; 0x197c <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    190c:	80 91 46 02 	lds	r24, 0x0246

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1910:	88 23       	and	r24, r24
    1912:	09 f4       	brne	.+2      	; 0x1916 <Endpoint_Write_Control_PStream_LE+0x36>
    1914:	41 c0       	rjmp	.+130    	; 0x1998 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1916:	85 30       	cpi	r24, 0x05	; 5
    1918:	09 f4       	brne	.+2      	; 0x191c <Endpoint_Write_Control_PStream_LE+0x3c>
    191a:	40 c0       	rjmp	.+128    	; 0x199c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    191c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1920:	83 fd       	sbrc	r24, 3
    1922:	3e c0       	rjmp	.+124    	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1924:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1928:	82 ff       	sbrs	r24, 2
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <Endpoint_Write_Control_PStream_LE+0x58>
    192c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1930:	82 ff       	sbrs	r24, 2
    1932:	27 c0       	rjmp	.+78     	; 0x1982 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1938:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    193c:	80 ff       	sbrs	r24, 0
    193e:	e3 cf       	rjmp	.-58     	; 0x1906 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1940:	20 91 f3 00 	lds	r18, 0x00F3
    1944:	80 91 f2 00 	lds	r24, 0x00F2
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    194c:	61 15       	cp	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	59 f0       	breq	.+22     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0x88>
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	91 05       	cpc	r25, r1
    1956:	40 f4       	brcc	.+16     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1958:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    195a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    195e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1960:	61 50       	subi	r22, 0x01	; 1
    1962:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	f2 cf       	rjmp	.-28     	; 0x194c <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	08 97       	sbiw	r24, 0x08	; 8
    196c:	09 f0       	breq	.+2      	; 0x1970 <Endpoint_Write_Control_PStream_LE+0x90>
    196e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1970:	80 91 e8 00 	lds	r24, 0x00E8
    1974:	8e 77       	andi	r24, 0x7E	; 126
    1976:	80 93 e8 00 	sts	0x00E8, r24
    197a:	c5 cf       	rjmp	.-118    	; 0x1906 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    197c:	21 11       	cpse	r18, r1
    197e:	c6 cf       	rjmp	.-116    	; 0x190c <Endpoint_Write_Control_PStream_LE+0x2c>
    1980:	d5 cf       	rjmp	.-86     	; 0x192c <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1982:	80 91 46 02 	lds	r24, 0x0246

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1986:	88 23       	and	r24, r24
    1988:	39 f0       	breq	.+14     	; 0x1998 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    198a:	85 30       	cpi	r24, 0x05	; 5
    198c:	39 f0       	breq	.+14     	; 0x199c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    198e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1992:	83 ff       	sbrs	r24, 3
    1994:	cb cf       	rjmp	.-106    	; 0x192c <Endpoint_Write_Control_PStream_LE+0x4c>
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19a2:	08 95       	ret

000019a4 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19a4:	98 2f       	mov	r25, r24
    19a6:	97 30       	cpi	r25, 0x07	; 7
    19a8:	58 f5       	brcc	.+86     	; 0x1a00 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19aa:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    19ae:	98 17       	cp	r25, r24
    19b0:	39 f0       	breq	.+14     	; 0x19c0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    19b2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    19b6:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    19ba:	50 91 f0 00 	lds	r21, 0x00F0
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    19c0:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    19c2:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    19c4:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    19c6:	21 ff       	sbrs	r18, 1
    19c8:	19 c0       	rjmp	.+50     	; 0x19fc <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    19ca:	30 91 eb 00 	lds	r19, 0x00EB
    19ce:	3e 7f       	andi	r19, 0xFE	; 254
    19d0:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    19d4:	30 91 ed 00 	lds	r19, 0x00ED
    19d8:	3d 7f       	andi	r19, 0xFD	; 253
    19da:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    19de:	30 91 eb 00 	lds	r19, 0x00EB
    19e2:	31 60       	ori	r19, 0x01	; 1
    19e4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    19e8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    19ec:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    19f0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    19f4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    19f8:	27 ff       	sbrs	r18, 7
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19fc:	9f 5f       	subi	r25, 0xFF	; 255
    19fe:	d3 cf       	rjmp	.-90     	; 0x19a6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a00:	8f 70       	andi	r24, 0x0F	; 15
    1a02:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1a0c:	08 95       	ret

00001a0e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a0e:	80 91 47 02 	lds	r24, 0x0247
    1a12:	87 fd       	sbrc	r24, 7
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a16:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a1a:	80 ff       	sbrs	r24, 0
    1a1c:	0e c0       	rjmp	.+28     	; 0x1a3a <Endpoint_ClearStatusStage+0x2c>
    1a1e:	12 c0       	rjmp	.+36     	; 0x1a44 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a20:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1a24:	82 fd       	sbrc	r24, 2
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a28:	80 91 46 02 	lds	r24, 0x0246
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	f8 cf       	rjmp	.-16     	; 0x1a20 <Endpoint_ClearStatusStage+0x12>
    1a30:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a32:	80 91 e8 00 	lds	r24, 0x00E8
    1a36:	8b 77       	andi	r24, 0x7B	; 123
    1a38:	08 c0       	rjmp	.+16     	; 0x1a4a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a3a:	80 91 46 02 	lds	r24, 0x0246
    1a3e:	81 11       	cpse	r24, r1
    1a40:	ea cf       	rjmp	.-44     	; 0x1a16 <Endpoint_ClearStatusStage+0x8>
    1a42:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a44:	80 91 e8 00 	lds	r24, 0x00E8
    1a48:	8e 77       	andi	r24, 0x7E	; 126
    1a4a:	80 93 e8 00 	sts	0x00E8, r24
    1a4e:	08 95       	ret

00001a50 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a50:	80 91 e4 00 	lds	r24, 0x00E4
    1a54:	90 91 e5 00 	lds	r25, 0x00E5
    1a58:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a5a:	20 91 ec 00 	lds	r18, 0x00EC
    1a5e:	20 ff       	sbrs	r18, 0
    1a60:	21 c0       	rjmp	.+66     	; 0x1aa4 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a62:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a66:	20 fd       	sbrc	r18, 0
    1a68:	21 c0       	rjmp	.+66     	; 0x1aac <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a6a:	20 91 46 02 	lds	r18, 0x0246

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a6e:	22 23       	and	r18, r18
    1a70:	89 f0       	breq	.+34     	; 0x1a94 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a72:	25 30       	cpi	r18, 0x05	; 5
    1a74:	89 f0       	breq	.+34     	; 0x1a98 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a76:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a7a:	25 fd       	sbrc	r18, 5
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <Endpoint_WaitUntilReady+0x4c>
    1a7e:	20 91 e4 00 	lds	r18, 0x00E4
    1a82:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1a86:	28 17       	cp	r18, r24
    1a88:	39 07       	cpc	r19, r25
    1a8a:	39 f3       	breq	.-50     	; 0x1a5a <Endpoint_WaitUntilReady+0xa>
    1a8c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1a8e:	41 f0       	breq	.+16     	; 0x1aa0 <Endpoint_WaitUntilReady+0x50>
    1a90:	c9 01       	movw	r24, r18
    1a92:	e3 cf       	rjmp	.-58     	; 0x1a5a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aa4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1aa8:	22 ff       	sbrs	r18, 2
    1aaa:	df cf       	rjmp	.-66     	; 0x1a6a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	08 95       	ret

00001ab0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1ab0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ab4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1ab8:	e0 ee       	ldi	r30, 0xE0	; 224
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1ac2:	e8 ed       	ldi	r30, 0xD8	; 216
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8f 77       	andi	r24, 0x7F	; 127
    1aca:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1acc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1ace:	a7 ed       	ldi	r26, 0xD7	; 215
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	8c 91       	ld	r24, X
    1ad4:	8e 7f       	andi	r24, 0xFE	; 254
    1ad6:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1ad8:	80 81       	ld	r24, Z
    1ada:	8f 7e       	andi	r24, 0xEF	; 239
    1adc:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1ade:	10 92 45 02 	sts	0x0245, r1
    1ae2:	08 95       	ret

00001ae4 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1aec:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1af0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1af4:	c8 ed       	ldi	r28, 0xD8	; 216
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	88 81       	ld	r24, Y
    1afa:	8f 77       	andi	r24, 0x7F	; 127
    1afc:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1afe:	88 81       	ld	r24, Y
    1b00:	80 68       	ori	r24, 0x80	; 128
    1b02:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b04:	88 81       	ld	r24, Y
    1b06:	8f 7d       	andi	r24, 0xDF	; 223
    1b08:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b0a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b0c:	10 92 46 02 	sts	0x0246, r1
	USB_Device_ConfigurationNumber  = 0;
    1b10:	10 92 42 02 	sts	0x0242, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b14:	10 92 44 02 	sts	0x0244, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b18:	10 92 43 02 	sts	0x0243, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b1c:	00 ee       	ldi	r16, 0xE0	; 224
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
    1b20:	f8 01       	movw	r30, r16
    1b22:	80 81       	ld	r24, Z
    1b24:	8b 7f       	andi	r24, 0xFB	; 251
    1b26:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1b28:	88 81       	ld	r24, Y
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b2e:	42 e0       	ldi	r20, 0x02	; 2
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b38:	e1 ee       	ldi	r30, 0xE1	; 225
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b42:	e2 ee       	ldi	r30, 0xE2	; 226
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	81 60       	ori	r24, 0x01	; 1
    1b4a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 60       	ori	r24, 0x08	; 8
    1b50:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 81       	ld	r24, Z
    1b56:	8e 7f       	andi	r24, 0xFE	; 254
    1b58:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b5a:	88 81       	ld	r24, Y
    1b5c:	80 61       	ori	r24, 0x10	; 16
    1b5e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b6a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 7e       	andi	r24, 0xEF	; 239
    1b72:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1b74:	e7 ed       	ldi	r30, 0xD7	; 215
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	81 60       	ori	r24, 0x01	; 1
    1b7c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1b7e:	84 e0       	ldi	r24, 0x04	; 4
    1b80:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 93 45 02 	sts	0x0245, r24

	USB_ResetInterface();
    1b88:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <USB_ResetInterface>

00001b8c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1b8c:	e8 ed       	ldi	r30, 0xD8	; 216
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8e 7f       	andi	r24, 0xFE	; 254
    1b94:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b96:	10 92 e2 00 	sts	0x00E2, r1
    1b9a:	08 95       	ret

00001b9c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1b9c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1ba0:	10 92 e1 00 	sts	0x00E1, r1
    1ba4:	08 95       	ret

00001ba6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1bc8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1bcc:	82 ff       	sbrs	r24, 2
    1bce:	0b c0       	rjmp	.+22     	; 0x1be6 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1bd0:	80 91 e2 00 	lds	r24, 0x00E2
    1bd4:	82 ff       	sbrs	r24, 2
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1bd8:	80 91 e1 00 	lds	r24, 0x00E1
    1bdc:	8b 7f       	andi	r24, 0xFB	; 251
    1bde:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1be2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1be6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1bea:	80 ff       	sbrs	r24, 0
    1bec:	1f c0       	rjmp	.+62     	; 0x1c2c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1bee:	80 91 d8 00 	lds	r24, 0x00D8
    1bf2:	80 ff       	sbrs	r24, 0
    1bf4:	1b c0       	rjmp	.+54     	; 0x1c2c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1bf6:	80 91 da 00 	lds	r24, 0x00DA
    1bfa:	8e 7f       	andi	r24, 0xFE	; 254
    1bfc:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c00:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c04:	80 ff       	sbrs	r24, 0
    1c06:	0d c0       	rjmp	.+26     	; 0x1c22 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c08:	80 e1       	ldi	r24, 0x10	; 16
    1c0a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c0c:	82 e1       	ldi	r24, 0x12	; 18
    1c0e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c10:	09 b4       	in	r0, 0x29	; 41
    1c12:	00 fe       	sbrs	r0, 0
    1c14:	fd cf       	rjmp	.-6      	; 0x1c10 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	80 93 46 02 	sts	0x0246, r24
			EVENT_USB_Device_Connect();
    1c1c:	0e 94 bf 09 	call	0x137e	; 0x137e <EVENT_USB_Device_Connect>
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c22:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c24:	10 92 46 02 	sts	0x0246, r1
			EVENT_USB_Device_Disconnect();
    1c28:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c2c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c30:	80 ff       	sbrs	r24, 0
    1c32:	19 c0       	rjmp	.+50     	; 0x1c66 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c34:	80 91 e2 00 	lds	r24, 0x00E2
    1c38:	80 ff       	sbrs	r24, 0
    1c3a:	15 c0       	rjmp	.+42     	; 0x1c66 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c3c:	80 91 e2 00 	lds	r24, 0x00E2
    1c40:	8e 7f       	andi	r24, 0xFE	; 254
    1c42:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c46:	80 91 e2 00 	lds	r24, 0x00E2
    1c4a:	80 61       	ori	r24, 0x10	; 16
    1c4c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c50:	80 91 d8 00 	lds	r24, 0x00D8
    1c54:	80 62       	ori	r24, 0x20	; 32
    1c56:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c5a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c5c:	85 e0       	ldi	r24, 0x05	; 5
    1c5e:	80 93 46 02 	sts	0x0246, r24
		EVENT_USB_Device_Suspend();
    1c62:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c66:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c6a:	84 ff       	sbrs	r24, 4
    1c6c:	30 c0       	rjmp	.+96     	; 0x1cce <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c6e:	80 91 e2 00 	lds	r24, 0x00E2
    1c72:	84 ff       	sbrs	r24, 4
    1c74:	2c c0       	rjmp	.+88     	; 0x1cce <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c76:	80 e1       	ldi	r24, 0x10	; 16
    1c78:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c7a:	82 e1       	ldi	r24, 0x12	; 18
    1c7c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c7e:	09 b4       	in	r0, 0x29	; 41
    1c80:	00 fe       	sbrs	r0, 0
    1c82:	fd cf       	rjmp	.-6      	; 0x1c7e <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c84:	80 91 d8 00 	lds	r24, 0x00D8
    1c88:	8f 7d       	andi	r24, 0xDF	; 223
    1c8a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c8e:	80 91 e1 00 	lds	r24, 0x00E1
    1c92:	8f 7e       	andi	r24, 0xEF	; 239
    1c94:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c98:	80 91 e2 00 	lds	r24, 0x00E2
    1c9c:	8f 7e       	andi	r24, 0xEF	; 239
    1c9e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ca2:	80 91 e2 00 	lds	r24, 0x00E2
    1ca6:	81 60       	ori	r24, 0x01	; 1
    1ca8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1cac:	80 91 42 02 	lds	r24, 0x0242
    1cb0:	88 23       	and	r24, r24
    1cb2:	11 f0       	breq	.+4      	; 0x1cb8 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1cb4:	84 e0       	ldi	r24, 0x04	; 4
    1cb6:	07 c0       	rjmp	.+14     	; 0x1cc6 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cb8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1cbc:	87 ff       	sbrs	r24, 7
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <__vector_10+0x11e>
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <__vector_10+0x120>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 46 02 	sts	0x0246, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1cca:	0e 94 55 0b 	call	0x16aa	; 0x16aa <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1cce:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1cd2:	83 ff       	sbrs	r24, 3
    1cd4:	29 c0       	rjmp	.+82     	; 0x1d28 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1cd6:	80 91 e2 00 	lds	r24, 0x00E2
    1cda:	83 ff       	sbrs	r24, 3
    1cdc:	25 c0       	rjmp	.+74     	; 0x1d28 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1cde:	80 91 e1 00 	lds	r24, 0x00E1
    1ce2:	87 7f       	andi	r24, 0xF7	; 247
    1ce4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	80 93 46 02 	sts	0x0246, r24
		USB_Device_ConfigurationNumber = 0;
    1cee:	10 92 42 02 	sts	0x0242, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cf2:	80 91 e1 00 	lds	r24, 0x00E1
    1cf6:	8e 7f       	andi	r24, 0xFE	; 254
    1cf8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cfc:	80 91 e2 00 	lds	r24, 0x00E2
    1d00:	8e 7f       	andi	r24, 0xFE	; 254
    1d02:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d06:	80 91 e2 00 	lds	r24, 0x00E2
    1d0a:	80 61       	ori	r24, 0x10	; 16
    1d0c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d10:	42 e0       	ldi	r20, 0x02	; 2
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d1a:	80 91 f0 00 	lds	r24, 0x00F0
    1d1e:	88 60       	ori	r24, 0x08	; 8
    1d20:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d24:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d28:	ff 91       	pop	r31
    1d2a:	ef 91       	pop	r30
    1d2c:	bf 91       	pop	r27
    1d2e:	af 91       	pop	r26
    1d30:	9f 91       	pop	r25
    1d32:	8f 91       	pop	r24
    1d34:	7f 91       	pop	r23
    1d36:	6f 91       	pop	r22
    1d38:	5f 91       	pop	r21
    1d3a:	4f 91       	pop	r20
    1d3c:	3f 91       	pop	r19
    1d3e:	2f 91       	pop	r18
    1d40:	0f 90       	pop	r0
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	0f 90       	pop	r0
    1d46:	1f 90       	pop	r1
    1d48:	18 95       	reti

00001d4a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	cf 93       	push	r28
    1d6a:	ef 93       	push	r30
    1d6c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d6e:	c0 91 e9 00 	lds	r28, 0x00E9
    1d72:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d74:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d78:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1d7c:	80 91 f0 00 	lds	r24, 0x00F0
    1d80:	87 7f       	andi	r24, 0xF7	; 247
    1d82:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1d86:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1d88:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <USB_Device_ProcessControlRequest>
    1d8c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d90:	80 91 f0 00 	lds	r24, 0x00F0
    1d94:	88 60       	ori	r24, 0x08	; 8
    1d96:	80 93 f0 00 	sts	0x00F0, r24
    1d9a:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	cf 91       	pop	r28
    1da4:	bf 91       	pop	r27
    1da6:	af 91       	pop	r26
    1da8:	9f 91       	pop	r25
    1daa:	8f 91       	pop	r24
    1dac:	7f 91       	pop	r23
    1dae:	6f 91       	pop	r22
    1db0:	5f 91       	pop	r21
    1db2:	4f 91       	pop	r20
    1db4:	3f 91       	pop	r19
    1db6:	2f 91       	pop	r18
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	aa 97       	sbiw	r28, 0x2a	; 42
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	e7 e4       	ldi	r30, 0x47	; 71
    1dda:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ddc:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1de0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1de2:	22 e0       	ldi	r18, 0x02	; 2
    1de4:	ef 34       	cpi	r30, 0x4F	; 79
    1de6:	f2 07       	cpc	r31, r18
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1dea:	0e 94 2d 0a 	call	0x145a	; 0x145a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dee:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1df2:	83 ff       	sbrs	r24, 3
    1df4:	1c c1       	rjmp	.+568    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1df6:	20 91 47 02 	lds	r18, 0x0247

		switch (USB_ControlRequest.bRequest)
    1dfa:	30 91 48 02 	lds	r19, 0x0248
    1dfe:	83 2f       	mov	r24, r19
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	8a 30       	cpi	r24, 0x0A	; 10
    1e04:	91 05       	cpc	r25, r1
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <USB_Device_ProcessControlRequest+0x48>
    1e08:	12 c1       	rjmp	.+548    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	ea 5a       	subi	r30, 0xAA	; 170
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	0c 94 cb 2a 	jmp	0x5596	; 0x5596 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e14:	20 38       	cpi	r18, 0x80	; 128
    1e16:	81 f0       	breq	.+32     	; 0x1e38 <USB_Device_ProcessControlRequest+0x76>
    1e18:	22 38       	cpi	r18, 0x82	; 130
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <USB_Device_ProcessControlRequest+0x5c>
    1e1c:	08 c1       	rjmp	.+528    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e1e:	80 91 4b 02 	lds	r24, 0x024B
    1e22:	8f 70       	andi	r24, 0x0F	; 15
    1e24:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e28:	80 91 eb 00 	lds	r24, 0x00EB
    1e2c:	85 fb       	bst	r24, 5
    1e2e:	88 27       	eor	r24, r24
    1e30:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e32:	10 92 e9 00 	sts	0x00E9, r1
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e38:	80 91 43 02 	lds	r24, 0x0243
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e3c:	90 91 44 02 	lds	r25, 0x0244
    1e40:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e42:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e44:	90 91 e8 00 	lds	r25, 0x00E8
    1e48:	97 7f       	andi	r25, 0xF7	; 247
    1e4a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e4e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1e52:	10 92 f1 00 	sts	0x00F1, r1
    1e56:	c5 c0       	rjmp	.+394    	; 0x1fe2 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e58:	82 2f       	mov	r24, r18
    1e5a:	8d 7f       	andi	r24, 0xFD	; 253
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <USB_Device_ProcessControlRequest+0x9e>
    1e5e:	e7 c0       	rjmp	.+462    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e60:	22 23       	and	r18, r18
    1e62:	19 f0       	breq	.+6      	; 0x1e6a <USB_Device_ProcessControlRequest+0xa8>
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <USB_Device_ProcessControlRequest+0xbe>
    1e68:	e2 c0       	rjmp	.+452    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e6a:	80 91 49 02 	lds	r24, 0x0249
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <USB_Device_ProcessControlRequest+0xb2>
    1e72:	dd c0       	rjmp	.+442    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e74:	33 30       	cpi	r19, 0x03	; 3
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <USB_Device_ProcessControlRequest+0xb8>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	80 93 44 02 	sts	0x0244, r24
    1e7e:	28 c0       	rjmp	.+80     	; 0x1ed0 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e80:	80 91 49 02 	lds	r24, 0x0249
    1e84:	81 11       	cpse	r24, r1
    1e86:	24 c0       	rjmp	.+72     	; 0x1ed0 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e88:	20 91 4b 02 	lds	r18, 0x024B
    1e8c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <USB_Device_ProcessControlRequest+0xd0>
    1e90:	ce c0       	rjmp	.+412    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e92:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e96:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e9a:	80 ff       	sbrs	r24, 0
    1e9c:	19 c0       	rjmp	.+50     	; 0x1ed0 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e9e:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ea2:	33 30       	cpi	r19, 0x03	; 3
    1ea4:	11 f4       	brne	.+4      	; 0x1eaa <USB_Device_ProcessControlRequest+0xe8>
    1ea6:	80 62       	ori	r24, 0x20	; 32
    1ea8:	11 c0       	rjmp	.+34     	; 0x1ecc <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1eaa:	80 61       	ori	r24, 0x10	; 16
    1eac:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <USB_Device_ProcessControlRequest+0xf8>
    1eb8:	88 0f       	add	r24, r24
    1eba:	0a 94       	dec	r0
    1ebc:	ea f7       	brpl	.-6      	; 0x1eb8 <USB_Device_ProcessControlRequest+0xf6>
    1ebe:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1ec2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ec6:	80 91 eb 00 	lds	r24, 0x00EB
    1eca:	88 60       	ori	r24, 0x08	; 8
    1ecc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ed4:	80 91 e8 00 	lds	r24, 0x00E8
    1ed8:	87 7f       	andi	r24, 0xF7	; 247
    1eda:	86 c0       	rjmp	.+268    	; 0x1fe8 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1edc:	21 11       	cpse	r18, r1
    1ede:	a7 c0       	rjmp	.+334    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1ee0:	10 91 49 02 	lds	r17, 0x0249
    1ee4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ee6:	80 91 e3 00 	lds	r24, 0x00E3
    1eea:	80 78       	andi	r24, 0x80	; 128
    1eec:	81 2b       	or	r24, r17
    1eee:	80 93 e3 00 	sts	0x00E3, r24
    1ef2:	80 91 e8 00 	lds	r24, 0x00E8
    1ef6:	87 7f       	andi	r24, 0xF7	; 247
    1ef8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1efc:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f00:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f04:	80 ff       	sbrs	r24, 0
    1f06:	fc cf       	rjmp	.-8      	; 0x1f00 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f08:	80 91 e3 00 	lds	r24, 0x00E3
    1f0c:	80 68       	ori	r24, 0x80	; 128
    1f0e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f12:	11 23       	and	r17, r17
    1f14:	11 f0       	breq	.+4      	; 0x1f1a <USB_Device_ProcessControlRequest+0x158>
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <USB_Device_ProcessControlRequest+0x15a>
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	80 93 46 02 	sts	0x0246, r24
    1f20:	86 c0       	rjmp	.+268    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f22:	20 58       	subi	r18, 0x80	; 128
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <USB_Device_ProcessControlRequest+0x168>
    1f28:	82 c0       	rjmp	.+260    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f2a:	80 91 49 02 	lds	r24, 0x0249
    1f2e:	90 91 4a 02 	lds	r25, 0x024A
    1f32:	8c 3d       	cpi	r24, 0xDC	; 220
    1f34:	23 e0       	ldi	r18, 0x03	; 3
    1f36:	92 07       	cpc	r25, r18
    1f38:	79 f5       	brne	.+94     	; 0x1f98 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f3e:	8a e2       	ldi	r24, 0x2A	; 42
    1f40:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f42:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f44:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f46:	de 01       	movw	r26, r28
    1f48:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f4c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f4e:	51 e2       	ldi	r21, 0x21	; 33
    1f50:	e3 2f       	mov	r30, r19
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	50 93 57 00 	sts	0x0057, r21
    1f58:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1f5a:	20 ff       	sbrs	r18, 0
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1f5e:	e2 95       	swap	r30
    1f60:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f62:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f64:	ef 70       	andi	r30, 0x0F	; 15
    1f66:	8e 2f       	mov	r24, r30
    1f68:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f6a:	ea 30       	cpi	r30, 0x0A	; 10
    1f6c:	10 f0       	brcs	.+4      	; 0x1f72 <USB_Device_ProcessControlRequest+0x1b0>
    1f6e:	c7 96       	adiw	r24, 0x37	; 55
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <USB_Device_ProcessControlRequest+0x1b2>
    1f72:	c0 96       	adiw	r24, 0x30	; 48
    1f74:	8d 93       	st	X+, r24
    1f76:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f78:	2f 5f       	subi	r18, 0xFF	; 255
    1f7a:	24 31       	cpi	r18, 0x14	; 20
    1f7c:	49 f7       	brne	.-46     	; 0x1f50 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f7e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f80:	80 91 e8 00 	lds	r24, 0x00E8
    1f84:	87 7f       	andi	r24, 0xF7	; 247
    1f86:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f8a:	6a e2       	ldi	r22, 0x2A	; 42
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	ce 01       	movw	r24, r28
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	0e 94 0f 0c 	call	0x181e	; 0x181e <Endpoint_Write_Control_Stream_LE>
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f98:	ae 01       	movw	r20, r28
    1f9a:	4f 5f       	subi	r20, 0xFF	; 255
    1f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9e:	60 91 4b 02 	lds	r22, 0x024B
    1fa2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <CALLBACK_USB_GetDescriptor>
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <USB_Device_ProcessControlRequest+0x1ea>
    1faa:	41 c0       	rjmp	.+130    	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
    1fac:	20 91 e8 00 	lds	r18, 0x00E8
    1fb0:	27 7f       	andi	r18, 0xF7	; 247
    1fb2:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fc0:	80 91 e8 00 	lds	r24, 0x00E8
    1fc4:	8b 77       	andi	r24, 0x7B	; 123
    1fc6:	80 93 e8 00 	sts	0x00E8, r24
    1fca:	31 c0       	rjmp	.+98     	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1fcc:	20 38       	cpi	r18, 0x80	; 128
    1fce:	79 f5       	brne	.+94     	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd0:	80 91 e8 00 	lds	r24, 0x00E8
    1fd4:	87 7f       	andi	r24, 0xF7	; 247
    1fd6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1fda:	80 91 42 02 	lds	r24, 0x0242
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fde:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fe2:	80 91 e8 00 	lds	r24, 0x00E8
    1fe6:	8e 77       	andi	r24, 0x7E	; 126
    1fe8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1fec:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_ClearStatusStage>
    1ff0:	1e c0       	rjmp	.+60     	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ff2:	21 11       	cpse	r18, r1
    1ff4:	1c c0       	rjmp	.+56     	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1ff6:	90 91 49 02 	lds	r25, 0x0249
    1ffa:	92 30       	cpi	r25, 0x02	; 2
    1ffc:	c0 f4       	brcc	.+48     	; 0x202e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ffe:	80 91 e8 00 	lds	r24, 0x00E8
    2002:	87 7f       	andi	r24, 0xF7	; 247
    2004:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2008:	90 93 42 02 	sts	0x0242, r25

	Endpoint_ClearStatusStage();
    200c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2010:	80 91 42 02 	lds	r24, 0x0242
    2014:	81 11       	cpse	r24, r1
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2018:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    201c:	87 ff       	sbrs	r24, 7
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <USB_Device_ProcessControlRequest+0x262>
    2020:	84 e0       	ldi	r24, 0x04	; 4
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <USB_Device_ProcessControlRequest+0x264>
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	80 93 46 02 	sts	0x0246, r24

	EVENT_USB_Device_ConfigurationChanged();
    202a:	0e 94 19 0a 	call	0x1432	; 0x1432 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    202e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2032:	83 ff       	sbrs	r24, 3
    2034:	0a c0       	rjmp	.+20     	; 0x204a <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2036:	80 91 e8 00 	lds	r24, 0x00E8
    203a:	87 7f       	andi	r24, 0xF7	; 247
    203c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2040:	80 91 eb 00 	lds	r24, 0x00EB
    2044:	80 62       	ori	r24, 0x20	; 32
    2046:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    204a:	aa 96       	adiw	r28, 0x2a	; 42
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	08 95       	ret

0000205e <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    205e:	90 93 71 01 	sts	0x0171, r25
    2062:	80 93 70 01 	sts	0x0170, r24
    2066:	08 95       	ret

00002068 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2068:	e0 91 70 01 	lds	r30, 0x0170
    206c:	f0 91 71 01 	lds	r31, 0x0171
    2070:	30 97       	sbiw	r30, 0x00	; 0
    2072:	21 f0       	breq	.+8      	; 0x207c <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2074:	01 90       	ld	r0, Z+
    2076:	f0 81       	ld	r31, Z
    2078:	e0 2d       	mov	r30, r0
    207a:	09 94       	ijmp
}
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret

00002080 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	8c 01       	movw	r16, r24
    if (!driver) return;
    208c:	e0 91 70 01 	lds	r30, 0x0170
    2090:	f0 91 71 01 	lds	r31, 0x0171
    2094:	30 97       	sbiw	r30, 0x00	; 0
    2096:	99 f1       	breq	.+102    	; 0x20fe <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2098:	02 80       	ldd	r0, Z+2	; 0x02
    209a:	f3 81       	ldd	r31, Z+3	; 0x03
    209c:	e0 2d       	mov	r30, r0
    209e:	09 95       	icall

    if (debug_keyboard) {
    20a0:	80 91 31 02 	lds	r24, 0x0231
    20a4:	82 ff       	sbrs	r24, 2
    20a6:	2b c0       	rjmp	.+86     	; 0x20fe <host_keyboard_send+0x7e>
        dprint("keyboard: ");
    20a8:	80 ff       	sbrs	r24, 0
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <host_keyboard_send+0x34>
    20ac:	84 ef       	ldi	r24, 0xF4	; 244
    20ae:	93 e0       	ldi	r25, 0x03	; 3
    20b0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    20b4:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20b6:	88 e0       	ldi	r24, 0x08	; 8
    20b8:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    20ba:	0e ee       	ldi	r16, 0xEE	; 238
    20bc:	13 e0       	ldi	r17, 0x03	; 3
    20be:	80 91 31 02 	lds	r24, 0x0231
    20c2:	80 ff       	sbrs	r24, 0
    20c4:	0b c0       	rjmp	.+22     	; 0x20dc <host_keyboard_send+0x5c>
    20c6:	88 81       	ld	r24, Y
    20c8:	1f 92       	push	r1
    20ca:	8f 93       	push	r24
    20cc:	1f 93       	push	r17
    20ce:	0f 93       	push	r16
    20d0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	fa 94       	dec	r15
    20de:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    20e0:	f1 10       	cpse	r15, r1
    20e2:	ed cf       	rjmp	.-38     	; 0x20be <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    20e4:	80 91 31 02 	lds	r24, 0x0231
    20e8:	80 ff       	sbrs	r24, 0
    20ea:	09 c0       	rjmp	.+18     	; 0x20fe <host_keyboard_send+0x7e>
    20ec:	8c ee       	ldi	r24, 0xEC	; 236
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    20fa:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <xputs>
    }
}
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	08 95       	ret

0000210a <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    210a:	e0 91 70 01 	lds	r30, 0x0170
    210e:	f0 91 71 01 	lds	r31, 0x0171
    2112:	30 97       	sbiw	r30, 0x00	; 0
    2114:	21 f0       	breq	.+8      	; 0x211e <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2116:	04 80       	ldd	r0, Z+4	; 0x04
    2118:	f5 81       	ldd	r31, Z+5	; 0x05
    211a:	e0 2d       	mov	r30, r0
    211c:	09 94       	ijmp
    211e:	08 95       	ret

00002120 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    2126:	80 91 6e 01 	lds	r24, 0x016E
    212a:	90 91 6f 01 	lds	r25, 0x016F
    212e:	c8 17       	cp	r28, r24
    2130:	d9 07       	cpc	r29, r25
    2132:	09 f1       	breq	.+66     	; 0x2176 <host_system_send+0x56>
    last_system_report = report;
    2134:	d0 93 6f 01 	sts	0x016F, r29
    2138:	c0 93 6e 01 	sts	0x016E, r28

    if (!driver) return;
    213c:	e0 91 70 01 	lds	r30, 0x0170
    2140:	f0 91 71 01 	lds	r31, 0x0171
    2144:	30 97       	sbiw	r30, 0x00	; 0
    2146:	b9 f0       	breq	.+46     	; 0x2176 <host_system_send+0x56>
    (*driver->send_system)(report);
    2148:	06 80       	ldd	r0, Z+6	; 0x06
    214a:	f7 81       	ldd	r31, Z+7	; 0x07
    214c:	e0 2d       	mov	r30, r0
    214e:	ce 01       	movw	r24, r28
    2150:	09 95       	icall

    if (debug_keyboard) {
    2152:	80 91 31 02 	lds	r24, 0x0231
    2156:	82 ff       	sbrs	r24, 2
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <host_system_send+0x56>
        dprintf("system: %04X\n", report);
    215a:	80 ff       	sbrs	r24, 0
    215c:	0c c0       	rjmp	.+24     	; 0x2176 <host_system_send+0x56>
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	8e ed       	ldi	r24, 0xDE	; 222
    2164:	93 e0       	ldi	r25, 0x03	; 3
    2166:	9f 93       	push	r25
    2168:	8f 93       	push	r24
    216a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    }
}
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    2182:	80 91 6c 01 	lds	r24, 0x016C
    2186:	90 91 6d 01 	lds	r25, 0x016D
    218a:	c8 17       	cp	r28, r24
    218c:	d9 07       	cpc	r29, r25
    218e:	09 f1       	breq	.+66     	; 0x21d2 <host_consumer_send+0x56>
    last_consumer_report = report;
    2190:	d0 93 6d 01 	sts	0x016D, r29
    2194:	c0 93 6c 01 	sts	0x016C, r28

    if (!driver) return;
    2198:	e0 91 70 01 	lds	r30, 0x0170
    219c:	f0 91 71 01 	lds	r31, 0x0171
    21a0:	30 97       	sbiw	r30, 0x00	; 0
    21a2:	b9 f0       	breq	.+46     	; 0x21d2 <host_consumer_send+0x56>
    (*driver->send_consumer)(report);
    21a4:	00 84       	ldd	r0, Z+8	; 0x08
    21a6:	f1 85       	ldd	r31, Z+9	; 0x09
    21a8:	e0 2d       	mov	r30, r0
    21aa:	ce 01       	movw	r24, r28
    21ac:	09 95       	icall

    if (debug_keyboard) {
    21ae:	80 91 31 02 	lds	r24, 0x0231
    21b2:	82 ff       	sbrs	r24, 2
    21b4:	0e c0       	rjmp	.+28     	; 0x21d2 <host_consumer_send+0x56>
        dprintf("consumer: %04X\n", report);
    21b6:	80 ff       	sbrs	r24, 0
    21b8:	0c c0       	rjmp	.+24     	; 0x21d2 <host_consumer_send+0x56>
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	8e ec       	ldi	r24, 0xCE	; 206
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	9f 93       	push	r25
    21c4:	8f 93       	push	r24
    21c6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    }
}
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    21d8:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <matrix_setup>

000021dc <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    21dc:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <timer_init>
    matrix_init();
    21e0:	0e 94 f4 06 	call	0xde8	; 0xde8 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    21e4:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <bootmagic>

000021e8 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    21e8:	2f 92       	push	r2
    21ea:	3f 92       	push	r3
    21ec:	4f 92       	push	r4
    21ee:	5f 92       	push	r5
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	00 d0       	rcall	.+0      	; 0x220e <keyboard_task+0x26>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <keyboard_task+0x28>
    2210:	1f 92       	push	r1
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2216:	0e 94 20 07 	call	0xe40	; 0xe40 <matrix_scan>
    221a:	03 e7       	ldi	r16, 0x73	; 115
    221c:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    221e:	31 2c       	mov	r3, r1
        matrix_row = matrix_get_row(r);
    2220:	83 2d       	mov	r24, r3
    2222:	0e 94 8b 08 	call	0x1116	; 0x1116 <matrix_get_row>
    2226:	2b 01       	movw	r4, r22
    2228:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    222a:	f8 01       	movw	r30, r16
    222c:	80 80       	ld	r8, Z
    222e:	91 80       	ldd	r9, Z+1	; 0x01
    2230:	a2 80       	ldd	r10, Z+2	; 0x02
    2232:	b3 80       	ldd	r11, Z+3	; 0x03
    2234:	86 26       	eor	r8, r22
    2236:	97 26       	eor	r9, r23
    2238:	a8 26       	eor	r10, r24
    223a:	b9 26       	eor	r11, r25
        if (matrix_change) {
    223c:	81 14       	cp	r8, r1
    223e:	91 04       	cpc	r9, r1
    2240:	a1 04       	cpc	r10, r1
    2242:	b1 04       	cpc	r11, r1
    2244:	39 f4       	brne	.+14     	; 0x2254 <keyboard_task+0x6c>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2246:	33 94       	inc	r3
    2248:	0c 5f       	subi	r16, 0xFC	; 252
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	f5 e0       	ldi	r31, 0x05	; 5
    224e:	3f 12       	cpse	r3, r31
    2250:	e7 cf       	rjmp	.-50     	; 0x2220 <keyboard_task+0x38>
    2252:	4c c0       	rjmp	.+152    	; 0x22ec <keyboard_task+0x104>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2254:	80 91 31 02 	lds	r24, 0x0231
    2258:	81 fd       	sbrc	r24, 1
    225a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    225e:	21 2c       	mov	r2, r1
    2260:	c1 2c       	mov	r12, r1
    2262:	d1 2c       	mov	r13, r1
    2264:	76 01       	movw	r14, r12
    2266:	c3 94       	inc	r12
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    2268:	d7 01       	movw	r26, r14
    226a:	c6 01       	movw	r24, r12
    226c:	88 21       	and	r24, r8
    226e:	99 21       	and	r25, r9
    2270:	aa 21       	and	r26, r10
    2272:	bb 21       	and	r27, r11
    2274:	89 2b       	or	r24, r25
    2276:	8a 2b       	or	r24, r26
    2278:	8b 2b       	or	r24, r27
    227a:	79 f1       	breq	.+94     	; 0x22da <keyboard_task+0xf2>
                    keyevent_t e = (keyevent_t){
    227c:	29 82       	std	Y+1, r2	; 0x01
    227e:	3a 82       	std	Y+2, r3	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    2280:	21 e0       	ldi	r18, 0x01	; 1
    2282:	d7 01       	movw	r26, r14
    2284:	c6 01       	movw	r24, r12
    2286:	84 21       	and	r24, r4
    2288:	95 21       	and	r25, r5
    228a:	a6 21       	and	r26, r6
    228c:	b7 21       	and	r27, r7
    228e:	89 2b       	or	r24, r25
    2290:	8a 2b       	or	r24, r26
    2292:	8b 2b       	or	r24, r27
    2294:	09 f4       	brne	.+2      	; 0x2298 <keyboard_task+0xb0>
    2296:	20 e0       	ldi	r18, 0x00	; 0
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    2298:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
    229a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <timer_read>
    229e:	81 60       	ori	r24, 0x01	; 1
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    22a0:	78 2f       	mov	r23, r24
    22a2:	9d 83       	std	Y+5, r25	; 0x05
    22a4:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    22a6:	49 81       	ldd	r20, Y+1	; 0x01
    22a8:	5a 81       	ldd	r21, Y+2	; 0x02
    22aa:	6b 81       	ldd	r22, Y+3	; 0x03
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	0e 94 15 12 	call	0x242a	; 0x242a <action_exec>
                    hook_matrix_change(e);
    22b2:	49 81       	ldd	r20, Y+1	; 0x01
    22b4:	5a 81       	ldd	r21, Y+2	; 0x02
    22b6:	6b 81       	ldd	r22, Y+3	; 0x03
    22b8:	7c 81       	ldd	r23, Y+4	; 0x04
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    22c0:	f8 01       	movw	r30, r16
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	a2 81       	ldd	r26, Z+2	; 0x02
    22c8:	b3 81       	ldd	r27, Z+3	; 0x03
    22ca:	8c 25       	eor	r24, r12
    22cc:	9d 25       	eor	r25, r13
    22ce:	ae 25       	eor	r26, r14
    22d0:	bf 25       	eor	r27, r15
    22d2:	80 83       	st	Z, r24
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	a2 83       	std	Z+2, r26	; 0x02
    22d8:	b3 83       	std	Z+3, r27	; 0x03
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    22da:	23 94       	inc	r2
    22dc:	cc 0c       	add	r12, r12
    22de:	dd 1c       	adc	r13, r13
    22e0:	ee 1c       	adc	r14, r14
    22e2:	ff 1c       	adc	r15, r15
    22e4:	f3 e1       	ldi	r31, 0x13	; 19
    22e6:	2f 12       	cpse	r2, r31
    22e8:	bf cf       	rjmp	.-130    	; 0x2268 <keyboard_task+0x80>
    22ea:	ad cf       	rjmp	.-166    	; 0x2246 <keyboard_task+0x5e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    22ec:	8f ef       	ldi	r24, 0xFF	; 255
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	8a 83       	std	Y+2, r24	; 0x02
    22f2:	1b 82       	std	Y+3, r1	; 0x03
    22f4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <timer_read>
    22f8:	81 60       	ori	r24, 0x01	; 1
    22fa:	78 2f       	mov	r23, r24
    22fc:	9d 83       	std	Y+5, r25	; 0x05
    22fe:	8c 83       	std	Y+4, r24	; 0x04
    2300:	49 81       	ldd	r20, Y+1	; 0x01
    2302:	5a 81       	ldd	r21, Y+2	; 0x02
    2304:	6b 81       	ldd	r22, Y+3	; 0x03
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	0e 94 15 12 	call	0x242a	; 0x242a <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    230c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2310:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2314:	10 91 72 01 	lds	r17, 0x0172
    2318:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    231c:	18 17       	cp	r17, r24
    231e:	89 f1       	breq	.+98     	; 0x2382 <keyboard_task+0x19a>
        led_status = host_keyboard_leds();
    2320:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    2324:	80 93 72 01 	sts	0x0172, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2328:	90 91 31 02 	lds	r25, 0x0231
    232c:	92 ff       	sbrs	r25, 2
    232e:	0e c0       	rjmp	.+28     	; 0x234c <keyboard_task+0x164>
    2330:	90 ff       	sbrs	r25, 0
    2332:	0c c0       	rjmp	.+24     	; 0x234c <keyboard_task+0x164>
    2334:	1f 92       	push	r1
    2336:	8f 93       	push	r24
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	9f 93       	push	r25
    233e:	8f 93       	push	r24
    2340:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    234c:	80 91 72 01 	lds	r24, 0x0172
    }
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	ff 90       	pop	r15
    2364:	ef 90       	pop	r14
    2366:	df 90       	pop	r13
    2368:	cf 90       	pop	r12
    236a:	bf 90       	pop	r11
    236c:	af 90       	pop	r10
    236e:	9f 90       	pop	r9
    2370:	8f 90       	pop	r8
    2372:	7f 90       	pop	r7
    2374:	6f 90       	pop	r6
    2376:	5f 90       	pop	r5
    2378:	4f 90       	pop	r4
    237a:	3f 90       	pop	r3
    237c:	2f 90       	pop	r2

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    237e:	0c 94 e5 1d 	jmp	0x3bca	; 0x3bca <hook_keyboard_leds_change>
    }
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	bf 90       	pop	r11
    239e:	af 90       	pop	r10
    23a0:	9f 90       	pop	r9
    23a2:	8f 90       	pop	r8
    23a4:	7f 90       	pop	r7
    23a6:	6f 90       	pop	r6
    23a8:	5f 90       	pop	r5
    23aa:	4f 90       	pop	r4
    23ac:	3f 90       	pop	r3
    23ae:	2f 90       	pop	r2
    23b0:	08 95       	ret

000023b2 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    23b2:	0c 94 96 08 	jmp	0x112c	; 0x112c <led_set>

000023b6 <matrix_clear>:
    return MATRIX_COLS;
}

__attribute__ ((weak))
void matrix_clear(void)
{
    23b6:	08 95       	ret

000023b8 <matrix_setup>:
}

__attribute__ ((weak))
void matrix_setup(void) {}
    23b8:	08 95       	ret

000023ba <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
#elif (MATRIX_COLS <= 16)
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
    23c6:	89 e1       	ldi	r24, 0x19	; 25
    23c8:	94 e0       	ldi	r25, 0x04	; 4
    23ca:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    23ce:	c0 e0       	ldi	r28, 0x00	; 0
    23d0:	d0 e0       	ldi	r29, 0x00	; 0
#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
#elif (MATRIX_COLS <= 16)
        xprintf("%02X: %016b%s\n", row, bitrev16(matrix_get_row(row)),
#elif (MATRIX_COLS <= 32)
        xprintf("%02X: %032b%s\n", row, bitrev32(matrix_get_row(row)),
    23d2:	88 e2       	ldi	r24, 0x28	; 40
    23d4:	e8 2e       	mov	r14, r24
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	f8 2e       	mov	r15, r24
    23da:	0a e0       	ldi	r16, 0x0A	; 10
    23dc:	14 e0       	ldi	r17, 0x04	; 4
    23de:	8c 2f       	mov	r24, r28
    23e0:	0e 94 8b 08 	call	0x1116	; 0x1116 <matrix_get_row>
    23e4:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <bitrev32>
    23e8:	ff 92       	push	r15
    23ea:	ef 92       	push	r14
    23ec:	9f 93       	push	r25
    23ee:	8f 93       	push	r24
    23f0:	7f 93       	push	r23
    23f2:	6f 93       	push	r22
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	1f 93       	push	r17
    23fa:	0f 93       	push	r16
    23fc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    2400:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2402:	8d b7       	in	r24, 0x3d	; 61
    2404:	9e b7       	in	r25, 0x3e	; 62
    2406:	0a 96       	adiw	r24, 0x0a	; 10
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	9e bf       	out	0x3e, r25	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	8d bf       	out	0x3d, r24	; 61
    2412:	c5 30       	cpi	r28, 0x05	; 5
    2414:	d1 05       	cpc	r29, r1
    2416:	19 f7       	brne	.-58     	; 0x23de <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	08 95       	ret

00002426 <matrix_power_up>:
    }
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
    2426:	08 95       	ret

00002428 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    2428:	08 95       	ret

0000242a <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	2b 97       	sbiw	r28, 0x0b	; 11
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	4f 83       	std	Y+7, r20	; 0x07
    2440:	58 87       	std	Y+8, r21	; 0x08
    2442:	69 87       	std	Y+9, r22	; 0x09
    2444:	7a 87       	std	Y+10, r23	; 0x0a
    2446:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2448:	8a 85       	ldd	r24, Y+10	; 0x0a
    244a:	9b 85       	ldd	r25, Y+11	; 0x0b
    244c:	89 2b       	or	r24, r25
    244e:	31 f0       	breq	.+12     	; 0x245c <action_exec+0x32>
    2450:	5f 3f       	cpi	r21, 0xFF	; 255
    2452:	11 f0       	breq	.+4      	; 0x2458 <action_exec+0x2e>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	03 c0       	rjmp	.+6      	; 0x245e <action_exec+0x34>
    2458:	4f 3f       	cpi	r20, 0xFF	; 255
    245a:	e1 f7       	brne	.-8      	; 0x2454 <action_exec+0x2a>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    245e:	81 11       	cpse	r24, r1
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2462:	4f 81       	ldd	r20, Y+7	; 0x07
    2464:	58 85       	ldd	r21, Y+8	; 0x08
    2466:	69 85       	ldd	r22, Y+9	; 0x09
    2468:	7a 85       	ldd	r23, Y+10	; 0x0a
    246a:	8b 85       	ldd	r24, Y+11	; 0x0b
    246c:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2470:	de 01       	movw	r26, r28
    2472:	11 96       	adiw	r26, 0x01	; 1
    2474:	86 e0       	ldi	r24, 0x06	; 6
    2476:	fd 01       	movw	r30, r26
    2478:	11 92       	st	Z+, r1
    247a:	8a 95       	dec	r24
    247c:	e9 f7       	brne	.-6      	; 0x2478 <action_exec+0x4e>
    247e:	85 e0       	ldi	r24, 0x05	; 5
    2480:	fe 01       	movw	r30, r28
    2482:	37 96       	adiw	r30, 0x07	; 7
    2484:	01 90       	ld	r0, Z+
    2486:	0d 92       	st	X+, r0
    2488:	8a 95       	dec	r24
    248a:	e1 f7       	brne	.-8      	; 0x2484 <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    248c:	49 81       	ldd	r20, Y+1	; 0x01
    248e:	5a 81       	ldd	r21, Y+2	; 0x02
    2490:	6b 81       	ldd	r22, Y+3	; 0x03
    2492:	7c 81       	ldd	r23, Y+4	; 0x04
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	0e 94 08 1a 	call	0x3410	; 0x3410 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    249c:	2b 96       	adiw	r28, 0x0b	; 11
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    24ae:	cf 93       	push	r28
    24b0:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    24b2:	88 23       	and	r24, r24
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <register_code+0xa>
    24b6:	e7 c0       	rjmp	.+462    	; 0x2686 <register_code+0x1d8>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    24b8:	82 38       	cpi	r24, 0x82	; 130
    24ba:	a1 f4       	brne	.+40     	; 0x24e4 <register_code+0x36>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    24bc:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    24c0:	81 fd       	sbrc	r24, 1
    24c2:	e1 c0       	rjmp	.+450    	; 0x2686 <register_code+0x1d8>
#endif
        add_key(KC_CAPSLOCK);
    24c4:	89 e3       	ldi	r24, 0x39	; 57
    24c6:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
        send_keyboard_report();
    24ca:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    24ce:	2f ef       	ldi	r18, 0xFF	; 255
    24d0:	81 ee       	ldi	r24, 0xE1	; 225
    24d2:	94 e0       	ldi	r25, 0x04	; 4
    24d4:	21 50       	subi	r18, 0x01	; 1
    24d6:	80 40       	sbci	r24, 0x00	; 0
    24d8:	90 40       	sbci	r25, 0x00	; 0
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <register_code+0x26>
    24dc:	00 c0       	rjmp	.+0      	; 0x24de <register_code+0x30>
    24de:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    24e0:	89 e3       	ldi	r24, 0x39	; 57
    24e2:	15 c0       	rjmp	.+42     	; 0x250e <register_code+0x60>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    24e4:	83 38       	cpi	r24, 0x83	; 131
    24e6:	c1 f4       	brne	.+48     	; 0x2518 <register_code+0x6a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    24e8:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    24ec:	80 fd       	sbrc	r24, 0
    24ee:	cb c0       	rjmp	.+406    	; 0x2686 <register_code+0x1d8>
#endif
        add_key(KC_NUMLOCK);
    24f0:	83 e5       	ldi	r24, 0x53	; 83
    24f2:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
        send_keyboard_report();
    24f6:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    24fa:	2f ef       	ldi	r18, 0xFF	; 255
    24fc:	81 ee       	ldi	r24, 0xE1	; 225
    24fe:	94 e0       	ldi	r25, 0x04	; 4
    2500:	21 50       	subi	r18, 0x01	; 1
    2502:	80 40       	sbci	r24, 0x00	; 0
    2504:	90 40       	sbci	r25, 0x00	; 0
    2506:	e1 f7       	brne	.-8      	; 0x2500 <register_code+0x52>
    2508:	00 c0       	rjmp	.+0      	; 0x250a <register_code+0x5c>
    250a:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    250c:	83 e5       	ldi	r24, 0x53	; 83
    250e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2512:	cf 91       	pop	r28
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2514:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2518:	84 38       	cpi	r24, 0x84	; 132
    251a:	a1 f4       	brne	.+40     	; 0x2544 <register_code+0x96>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    251c:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    2520:	82 fd       	sbrc	r24, 2
    2522:	b1 c0       	rjmp	.+354    	; 0x2686 <register_code+0x1d8>
#endif
        add_key(KC_SCROLLLOCK);
    2524:	87 e4       	ldi	r24, 0x47	; 71
    2526:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
        send_keyboard_report();
    252a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    252e:	2f ef       	ldi	r18, 0xFF	; 255
    2530:	81 ee       	ldi	r24, 0xE1	; 225
    2532:	94 e0       	ldi	r25, 0x04	; 4
    2534:	21 50       	subi	r18, 0x01	; 1
    2536:	80 40       	sbci	r24, 0x00	; 0
    2538:	90 40       	sbci	r25, 0x00	; 0
    253a:	e1 f7       	brne	.-8      	; 0x2534 <register_code+0x86>
    253c:	00 c0       	rjmp	.+0      	; 0x253e <register_code+0x90>
    253e:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2540:	87 e4       	ldi	r24, 0x47	; 71
    2542:	e5 cf       	rjmp	.-54     	; 0x250e <register_code+0x60>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2544:	8c ef       	ldi	r24, 0xFC	; 252
    2546:	8c 0f       	add	r24, r28
    2548:	81 3a       	cpi	r24, 0xA1	; 161
    254a:	48 f4       	brcc	.+18     	; 0x255e <register_code+0xb0>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    254c:	8c 2f       	mov	r24, r28
    254e:	0e 94 37 28 	call	0x506e	; 0x506e <command_proc>
    2552:	81 11       	cpse	r24, r1
    2554:	98 c0       	rjmp	.+304    	; 0x2686 <register_code+0x1d8>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2556:	8c 2f       	mov	r24, r28
    2558:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
    255c:	da cf       	rjmp	.-76     	; 0x2512 <register_code+0x64>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    255e:	80 e2       	ldi	r24, 0x20	; 32
    2560:	8c 0f       	add	r24, r28
    2562:	88 30       	cpi	r24, 0x08	; 8
    2564:	48 f4       	brcc	.+18     	; 0x2578 <register_code+0xca>
        add_mods(MOD_BIT(code));
    2566:	c7 70       	andi	r28, 0x07	; 7
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	01 c0       	rjmp	.+2      	; 0x256e <register_code+0xc0>
    256c:	88 0f       	add	r24, r24
    256e:	ca 95       	dec	r28
    2570:	ea f7       	brpl	.-6      	; 0x256c <register_code+0xbe>
    2572:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <add_mods>
    2576:	cd cf       	rjmp	.-102    	; 0x2512 <register_code+0x64>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2578:	8b e5       	ldi	r24, 0x5B	; 91
    257a:	8c 0f       	add	r24, r28
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	78 f4       	brcc	.+30     	; 0x259e <register_code+0xf0>
        host_system_send(KEYCODE2SYSTEM(code));
    2580:	c5 3a       	cpi	r28, 0xA5	; 165
    2582:	29 f0       	breq	.+10     	; 0x258e <register_code+0xe0>
    2584:	c6 3a       	cpi	r28, 0xA6	; 166
    2586:	31 f4       	brne	.+12     	; 0x2594 <register_code+0xe6>
    2588:	82 e8       	ldi	r24, 0x82	; 130
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <register_code+0xea>
    258e:	81 e8       	ldi	r24, 0x81	; 129
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <register_code+0xea>
    2594:	83 e8       	ldi	r24, 0x83	; 131
    2596:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2598:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    259a:	0c 94 90 10 	jmp	0x2120	; 0x2120 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    259e:	88 e5       	ldi	r24, 0x58	; 88
    25a0:	8c 0f       	add	r24, r28
    25a2:	85 31       	cpi	r24, 0x15	; 21
    25a4:	08 f0       	brcs	.+2      	; 0x25a8 <register_code+0xfa>
    25a6:	6f c0       	rjmp	.+222    	; 0x2686 <register_code+0x1d8>
        host_consumer_send(KEYCODE2CONSUMER(code));
    25a8:	c8 3a       	cpi	r28, 0xA8	; 168
    25aa:	61 f1       	breq	.+88     	; 0x2604 <register_code+0x156>
    25ac:	c9 3a       	cpi	r28, 0xA9	; 169
    25ae:	69 f1       	breq	.+90     	; 0x260a <register_code+0x15c>
    25b0:	ca 3a       	cpi	r28, 0xAA	; 170
    25b2:	71 f1       	breq	.+92     	; 0x2610 <register_code+0x162>
    25b4:	cb 3a       	cpi	r28, 0xAB	; 171
    25b6:	79 f1       	breq	.+94     	; 0x2616 <register_code+0x168>
    25b8:	cc 3a       	cpi	r28, 0xAC	; 172
    25ba:	81 f1       	breq	.+96     	; 0x261c <register_code+0x16e>
    25bc:	cd 3a       	cpi	r28, 0xAD	; 173
    25be:	89 f1       	breq	.+98     	; 0x2622 <register_code+0x174>
    25c0:	ce 3a       	cpi	r28, 0xAE	; 174
    25c2:	91 f1       	breq	.+100    	; 0x2628 <register_code+0x17a>
    25c4:	cf 3a       	cpi	r28, 0xAF	; 175
    25c6:	99 f1       	breq	.+102    	; 0x262e <register_code+0x180>
    25c8:	c1 3b       	cpi	r28, 0xB1	; 177
    25ca:	a1 f1       	breq	.+104    	; 0x2634 <register_code+0x186>
    25cc:	c0 3b       	cpi	r28, 0xB0	; 176
    25ce:	a9 f1       	breq	.+106    	; 0x263a <register_code+0x18c>
    25d0:	c2 3b       	cpi	r28, 0xB2	; 178
    25d2:	b1 f1       	breq	.+108    	; 0x2640 <register_code+0x192>
    25d4:	c3 3b       	cpi	r28, 0xB3	; 179
    25d6:	b9 f1       	breq	.+110    	; 0x2646 <register_code+0x198>
    25d8:	c4 3b       	cpi	r28, 0xB4	; 180
    25da:	c1 f1       	breq	.+112    	; 0x264c <register_code+0x19e>
    25dc:	c5 3b       	cpi	r28, 0xB5	; 181
    25de:	c9 f1       	breq	.+114    	; 0x2652 <register_code+0x1a4>
    25e0:	c6 3b       	cpi	r28, 0xB6	; 182
    25e2:	d1 f1       	breq	.+116    	; 0x2658 <register_code+0x1aa>
    25e4:	c7 3b       	cpi	r28, 0xB7	; 183
    25e6:	d9 f1       	breq	.+118    	; 0x265e <register_code+0x1b0>
    25e8:	c8 3b       	cpi	r28, 0xB8	; 184
    25ea:	e1 f1       	breq	.+120    	; 0x2664 <register_code+0x1b6>
    25ec:	c9 3b       	cpi	r28, 0xB9	; 185
    25ee:	e9 f1       	breq	.+122    	; 0x266a <register_code+0x1bc>
    25f0:	ca 3b       	cpi	r28, 0xBA	; 186
    25f2:	f1 f1       	breq	.+124    	; 0x2670 <register_code+0x1c2>
    25f4:	cb 3b       	cpi	r28, 0xBB	; 187
    25f6:	f9 f1       	breq	.+126    	; 0x2676 <register_code+0x1c8>
    25f8:	cc 3b       	cpi	r28, 0xBC	; 188
    25fa:	09 f0       	breq	.+2      	; 0x25fe <register_code+0x150>
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <register_code+0x1ce>
    25fe:	8a e2       	ldi	r24, 0x2A	; 42
    2600:	92 e0       	ldi	r25, 0x02	; 2
    2602:	3e c0       	rjmp	.+124    	; 0x2680 <register_code+0x1d2>
    2604:	82 ee       	ldi	r24, 0xE2	; 226
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	3b c0       	rjmp	.+118    	; 0x2680 <register_code+0x1d2>
    260a:	89 ee       	ldi	r24, 0xE9	; 233
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	38 c0       	rjmp	.+112    	; 0x2680 <register_code+0x1d2>
    2610:	8a ee       	ldi	r24, 0xEA	; 234
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	35 c0       	rjmp	.+106    	; 0x2680 <register_code+0x1d2>
    2616:	85 eb       	ldi	r24, 0xB5	; 181
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	32 c0       	rjmp	.+100    	; 0x2680 <register_code+0x1d2>
    261c:	86 eb       	ldi	r24, 0xB6	; 182
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	2f c0       	rjmp	.+94     	; 0x2680 <register_code+0x1d2>
    2622:	83 eb       	ldi	r24, 0xB3	; 179
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	2c c0       	rjmp	.+88     	; 0x2680 <register_code+0x1d2>
    2628:	84 eb       	ldi	r24, 0xB4	; 180
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	29 c0       	rjmp	.+82     	; 0x2680 <register_code+0x1d2>
    262e:	87 eb       	ldi	r24, 0xB7	; 183
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	26 c0       	rjmp	.+76     	; 0x2680 <register_code+0x1d2>
    2634:	8c ec       	ldi	r24, 0xCC	; 204
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	23 c0       	rjmp	.+70     	; 0x2680 <register_code+0x1d2>
    263a:	8d ec       	ldi	r24, 0xCD	; 205
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	20 c0       	rjmp	.+64     	; 0x2680 <register_code+0x1d2>
    2640:	83 e8       	ldi	r24, 0x83	; 131
    2642:	91 e0       	ldi	r25, 0x01	; 1
    2644:	1d c0       	rjmp	.+58     	; 0x2680 <register_code+0x1d2>
    2646:	8a e8       	ldi	r24, 0x8A	; 138
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	1a c0       	rjmp	.+52     	; 0x2680 <register_code+0x1d2>
    264c:	82 e9       	ldi	r24, 0x92	; 146
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	17 c0       	rjmp	.+46     	; 0x2680 <register_code+0x1d2>
    2652:	84 e9       	ldi	r24, 0x94	; 148
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <register_code+0x1d2>
    2658:	81 e2       	ldi	r24, 0x21	; 33
    265a:	92 e0       	ldi	r25, 0x02	; 2
    265c:	11 c0       	rjmp	.+34     	; 0x2680 <register_code+0x1d2>
    265e:	83 e2       	ldi	r24, 0x23	; 35
    2660:	92 e0       	ldi	r25, 0x02	; 2
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <register_code+0x1d2>
    2664:	84 e2       	ldi	r24, 0x24	; 36
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	0b c0       	rjmp	.+22     	; 0x2680 <register_code+0x1d2>
    266a:	85 e2       	ldi	r24, 0x25	; 37
    266c:	92 e0       	ldi	r25, 0x02	; 2
    266e:	08 c0       	rjmp	.+16     	; 0x2680 <register_code+0x1d2>
    2670:	86 e2       	ldi	r24, 0x26	; 38
    2672:	92 e0       	ldi	r25, 0x02	; 2
    2674:	05 c0       	rjmp	.+10     	; 0x2680 <register_code+0x1d2>
    2676:	87 e2       	ldi	r24, 0x27	; 39
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <register_code+0x1d2>
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2680:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2682:	0c 94 be 10 	jmp	0x217c	; 0x217c <host_consumer_send>
    }
}
    2686:	cf 91       	pop	r28
    2688:	08 95       	ret

0000268a <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    268a:	88 23       	and	r24, r24
    268c:	09 f4       	brne	.+2      	; 0x2690 <unregister_code+0x6>
    268e:	66 c0       	rjmp	.+204    	; 0x275c <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2690:	82 38       	cpi	r24, 0x82	; 130
    2692:	a1 f4       	brne	.+40     	; 0x26bc <unregister_code+0x32>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2694:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    2698:	81 ff       	sbrs	r24, 1
    269a:	60 c0       	rjmp	.+192    	; 0x275c <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    269c:	89 e3       	ldi	r24, 0x39	; 57
    269e:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
        send_keyboard_report();
    26a2:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    26a6:	2f ef       	ldi	r18, 0xFF	; 255
    26a8:	81 ee       	ldi	r24, 0xE1	; 225
    26aa:	94 e0       	ldi	r25, 0x04	; 4
    26ac:	21 50       	subi	r18, 0x01	; 1
    26ae:	80 40       	sbci	r24, 0x00	; 0
    26b0:	90 40       	sbci	r25, 0x00	; 0
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <unregister_code+0x22>
    26b4:	00 c0       	rjmp	.+0      	; 0x26b6 <unregister_code+0x2c>
    26b6:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    26b8:	89 e3       	ldi	r24, 0x39	; 57
    26ba:	15 c0       	rjmp	.+42     	; 0x26e6 <unregister_code+0x5c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    26bc:	83 38       	cpi	r24, 0x83	; 131
    26be:	b9 f4       	brne	.+46     	; 0x26ee <unregister_code+0x64>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    26c0:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    26c4:	80 ff       	sbrs	r24, 0
    26c6:	4a c0       	rjmp	.+148    	; 0x275c <unregister_code+0xd2>
#endif
        add_key(KC_NUMLOCK);
    26c8:	83 e5       	ldi	r24, 0x53	; 83
    26ca:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
        send_keyboard_report();
    26ce:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    26d2:	2f ef       	ldi	r18, 0xFF	; 255
    26d4:	81 ee       	ldi	r24, 0xE1	; 225
    26d6:	94 e0       	ldi	r25, 0x04	; 4
    26d8:	21 50       	subi	r18, 0x01	; 1
    26da:	80 40       	sbci	r24, 0x00	; 0
    26dc:	90 40       	sbci	r25, 0x00	; 0
    26de:	e1 f7       	brne	.-8      	; 0x26d8 <unregister_code+0x4e>
    26e0:	00 c0       	rjmp	.+0      	; 0x26e2 <unregister_code+0x58>
    26e2:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    26e4:	83 e5       	ldi	r24, 0x53	; 83
    26e6:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <del_key>
        send_keyboard_report();
    26ea:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    26ee:	84 38       	cpi	r24, 0x84	; 132
    26f0:	a1 f4       	brne	.+40     	; 0x271a <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    26f2:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    26f6:	82 ff       	sbrs	r24, 2
    26f8:	31 c0       	rjmp	.+98     	; 0x275c <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    26fa:	87 e4       	ldi	r24, 0x47	; 71
    26fc:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <add_key>
        send_keyboard_report();
    2700:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    2704:	2f ef       	ldi	r18, 0xFF	; 255
    2706:	81 ee       	ldi	r24, 0xE1	; 225
    2708:	94 e0       	ldi	r25, 0x04	; 4
    270a:	21 50       	subi	r18, 0x01	; 1
    270c:	80 40       	sbci	r24, 0x00	; 0
    270e:	90 40       	sbci	r25, 0x00	; 0
    2710:	e1 f7       	brne	.-8      	; 0x270a <unregister_code+0x80>
    2712:	00 c0       	rjmp	.+0      	; 0x2714 <unregister_code+0x8a>
    2714:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2716:	87 e4       	ldi	r24, 0x47	; 71
    2718:	e6 cf       	rjmp	.-52     	; 0x26e6 <unregister_code+0x5c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    271a:	9c ef       	ldi	r25, 0xFC	; 252
    271c:	98 0f       	add	r25, r24
    271e:	91 3a       	cpi	r25, 0xA1	; 161
    2720:	10 f3       	brcs	.-60     	; 0x26e6 <unregister_code+0x5c>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2722:	90 e2       	ldi	r25, 0x20	; 32
    2724:	98 0f       	add	r25, r24
    2726:	98 30       	cpi	r25, 0x08	; 8
    2728:	50 f4       	brcc	.+20     	; 0x273e <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    272a:	87 70       	andi	r24, 0x07	; 7
    272c:	91 e0       	ldi	r25, 0x01	; 1
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <unregister_code+0xa8>
    2730:	99 0f       	add	r25, r25
    2732:	8a 95       	dec	r24
    2734:	ea f7       	brpl	.-6      	; 0x2730 <unregister_code+0xa6>
    2736:	89 2f       	mov	r24, r25
    2738:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <del_mods>
    273c:	d6 cf       	rjmp	.-84     	; 0x26ea <unregister_code+0x60>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    273e:	9b e5       	ldi	r25, 0x5B	; 91
    2740:	98 0f       	add	r25, r24
    2742:	93 30       	cpi	r25, 0x03	; 3
    2744:	20 f4       	brcc	.+8      	; 0x274e <unregister_code+0xc4>
        host_system_send(0);
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0c 94 90 10 	jmp	0x2120	; 0x2120 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    274e:	88 5a       	subi	r24, 0xA8	; 168
    2750:	85 31       	cpi	r24, 0x15	; 21
    2752:	20 f4       	brcc	.+8      	; 0x275c <unregister_code+0xd2>
        host_consumer_send(0);
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0c 94 be 10 	jmp	0x217c	; 0x217c <host_consumer_send>
    275c:	08 95       	ret

0000275e <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    275e:	88 23       	and	r24, r24
    2760:	21 f0       	breq	.+8      	; 0x276a <register_mods+0xc>
        add_mods(mods);
    2762:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <add_mods>
        send_keyboard_report();
    2766:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <send_keyboard_report>
    276a:	08 95       	ret

0000276c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    276c:	88 23       	and	r24, r24
    276e:	21 f0       	breq	.+8      	; 0x2778 <unregister_mods+0xc>
        del_mods(mods);
    2770:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <del_mods>
        send_keyboard_report();
    2774:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <send_keyboard_report>
    2778:	08 95       	ret

0000277a <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	28 97       	sbiw	r28, 0x08	; 8
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    279c:	85 e0       	ldi	r24, 0x05	; 5
    279e:	f8 01       	movw	r30, r16
    27a0:	de 01       	movw	r26, r28
    27a2:	11 96       	adiw	r26, 0x01	; 1
    27a4:	01 90       	ld	r0, Z+
    27a6:	0d 92       	st	X+, r0
    27a8:	8a 95       	dec	r24
    27aa:	e1 f7       	brne	.-8      	; 0x27a4 <process_action+0x2a>
    27ac:	f8 01       	movw	r30, r16
    27ae:	40 81       	ld	r20, Z
    27b0:	51 81       	ldd	r21, Z+1	; 0x01
    27b2:	f2 80       	ldd	r15, Z+2	; 0x02
    27b4:	83 81       	ldd	r24, Z+3	; 0x03
    27b6:	94 81       	ldd	r25, Z+4	; 0x04
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    27b8:	25 81       	ldd	r18, Z+5	; 0x05
    27ba:	22 95       	swap	r18
    27bc:	2f 70       	andi	r18, 0x0F	; 15
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	31 f0       	breq	.+12     	; 0x27ce <process_action+0x54>
    27c2:	5f 3f       	cpi	r21, 0xFF	; 255
    27c4:	31 f4       	brne	.+12     	; 0x27d2 <process_action+0x58>
    27c6:	31 e0       	ldi	r19, 0x01	; 1
    27c8:	4f 3f       	cpi	r20, 0xFF	; 255
    27ca:	19 f4       	brne	.+6      	; 0x27d2 <process_action+0x58>
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <process_action+0x5a>
    27ce:	31 e0       	ldi	r19, 0x01	; 1
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <process_action+0x5a>
    27d2:	30 e0       	ldi	r19, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    27d4:	30 fd       	sbrc	r19, 0
    27d6:	e2 c2       	rjmp	.+1476   	; 0x2d9c <process_action+0x622>

    action_t action = layer_switch_get_action(event);
    27d8:	78 2f       	mov	r23, r24
    27da:	9d 83       	std	Y+5, r25	; 0x05
    27dc:	8c 83       	std	Y+4, r24	; 0x04
    27de:	6f 2d       	mov	r22, r15
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	2f 83       	std	Y+7, r18	; 0x07
    27e4:	0e 94 55 1c 	call	0x38aa	; 0x38aa <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	88 87       	std	Y+8, r24	; 0x08
    27ec:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    27f0:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    27f4:	4e 81       	ldd	r20, Y+6	; 0x06
    27f6:	e4 2f       	mov	r30, r20
    27f8:	e2 95       	swap	r30
    27fa:	ef 70       	andi	r30, 0x0F	; 15
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	e0 5a       	subi	r30, 0xA0	; 160
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	2f 81       	ldd	r18, Y+7	; 0x07
    2804:	68 85       	ldd	r22, Y+8	; 0x08
    2806:	0c 94 cb 2a 	jmp	0x5596	; 0x5596 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    280a:	84 2f       	mov	r24, r20
    280c:	80 7f       	andi	r24, 0xF0	; 240
    280e:	14 2f       	mov	r17, r20
    2810:	1f 70       	andi	r17, 0x0F	; 15
    2812:	88 23       	and	r24, r24
    2814:	11 f0       	breq	.+4      	; 0x281a <process_action+0xa0>
    2816:	12 95       	swap	r17
    2818:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    281a:	ff 20       	and	r15, r15
    281c:	59 f0       	breq	.+22     	; 0x2834 <process_action+0xba>
                    if (mods) {
    281e:	11 23       	and	r17, r17
    2820:	09 f4       	brne	.+2      	; 0x2824 <process_action+0xaa>
    2822:	71 c2       	rjmp	.+1250   	; 0x2d06 <process_action+0x58c>
                        add_weak_mods(mods);
    2824:	81 2f       	mov	r24, r17
    2826:	68 87       	std	Y+8, r22	; 0x08
    2828:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <add_weak_mods>
                        send_keyboard_report();
    282c:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
    2830:	68 85       	ldd	r22, Y+8	; 0x08
    2832:	69 c2       	rjmp	.+1234   	; 0x2d06 <process_action+0x58c>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2834:	86 2f       	mov	r24, r22
    2836:	0e 94 45 13 	call	0x268a	; 0x268a <unregister_code>
                    if (mods) {
    283a:	11 23       	and	r17, r17
    283c:	09 f4       	brne	.+2      	; 0x2840 <process_action+0xc6>
    283e:	ae c2       	rjmp	.+1372   	; 0x2d9c <process_action+0x622>
                        del_weak_mods(mods);
    2840:	81 2f       	mov	r24, r17
    2842:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2846:	28 96       	adiw	r28, 0x08	; 8
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2862:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2866:	84 2f       	mov	r24, r20
    2868:	80 7f       	andi	r24, 0xF0	; 240
    286a:	94 2f       	mov	r25, r20
    286c:	9f 70       	andi	r25, 0x0F	; 15
    286e:	e9 2e       	mov	r14, r25
    2870:	80 32       	cpi	r24, 0x20	; 32
    2872:	19 f0       	breq	.+6      	; 0x287a <process_action+0x100>
    2874:	e2 94       	swap	r14
    2876:	80 ef       	ldi	r24, 0xF0	; 240
    2878:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    287a:	66 23       	and	r22, r22
    287c:	19 f0       	breq	.+6      	; 0x2884 <process_action+0x10a>
    287e:	61 30       	cpi	r22, 0x01	; 1
    2880:	01 f1       	breq	.+64     	; 0x28c2 <process_action+0x148>
    2882:	29 c0       	rjmp	.+82     	; 0x28d6 <process_action+0x15c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2884:	ff 20       	and	r15, r15
    2886:	a9 f0       	breq	.+42     	; 0x28b2 <process_action+0x138>
                            if (tap_count == 0) {
                                register_mods(mods);
    2888:	8e 2d       	mov	r24, r14
                switch (action.key.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    288a:	22 23       	and	r18, r18
    288c:	49 f1       	breq	.+82     	; 0x28e0 <process_action+0x166>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    288e:	21 30       	cpi	r18, 0x01	; 1
    2890:	39 f5       	brne	.+78     	; 0x28e0 <process_action+0x166>
            break;
#endif
        default:
            break;
    }
}
    2892:	28 96       	adiw	r28, 0x08	; 8
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    28ae:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    28b2:	22 23       	and	r18, r18
    28b4:	19 f0       	breq	.+6      	; 0x28bc <process_action+0x142>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    28b6:	21 30       	cpi	r18, 0x01	; 1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <process_action+0x142>
    28ba:	70 c2       	rjmp	.+1248   	; 0x2d9c <process_action+0x622>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    28bc:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <clear_oneshot_mods>
    28c0:	2c c0       	rjmp	.+88     	; 0x291a <process_action+0x1a0>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    28c2:	ff 20       	and	r15, r15
    28c4:	e9 f0       	breq	.+58     	; 0x2900 <process_action+0x186>
                            if (tap_count <= TAPPING_TOGGLE) {
    28c6:	26 30       	cpi	r18, 0x06	; 6
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <process_action+0x152>
    28ca:	68 c2       	rjmp	.+1232   	; 0x2d9c <process_action+0x622>
                                if (mods & get_mods()) {
    28cc:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <get_mods>
    28d0:	8e 21       	and	r24, r14
    28d2:	29 f0       	breq	.+10     	; 0x28de <process_action+0x164>
    28d4:	22 c0       	rjmp	.+68     	; 0x291a <process_action+0x1a0>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    28d6:	ff 20       	and	r15, r15
    28d8:	f1 f0       	breq	.+60     	; 0x2916 <process_action+0x19c>
                            if (tap_count > 0) {
    28da:	21 11       	cpse	r18, r1
    28dc:	15 c0       	rjmp	.+42     	; 0x2908 <process_action+0x18e>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28de:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    28e0:	28 96       	adiw	r28, 0x08	; 8
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28fc:	0c 94 af 13 	jmp	0x275e	; 0x275e <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2900:	25 30       	cpi	r18, 0x05	; 5
    2902:	08 f0       	brcs	.+2      	; 0x2906 <process_action+0x18c>
    2904:	4b c2       	rjmp	.+1174   	; 0x2d9c <process_action+0x622>
    2906:	09 c0       	rjmp	.+18     	; 0x291a <process_action+0x1a0>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2908:	f8 01       	movw	r30, r16
    290a:	85 81       	ldd	r24, Z+5	; 0x05
    290c:	80 ff       	sbrs	r24, 0
    290e:	fb c1       	rjmp	.+1014   	; 0x2d06 <process_action+0x58c>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2910:	8f 70       	andi	r24, 0x0F	; 15
    2912:	85 83       	std	Z+5, r24	; 0x05
    2914:	e4 cf       	rjmp	.-56     	; 0x28de <process_action+0x164>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2916:	21 11       	cpse	r18, r1
    2918:	0a c2       	rjmp	.+1044   	; 0x2d2e <process_action+0x5b4>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    291a:	8e 2d       	mov	r24, r14
    291c:	78 c1       	rjmp	.+752    	; 0x2c0e <process_action+0x494>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    291e:	24 2f       	mov	r18, r20
    2920:	26 95       	lsr	r18
    2922:	26 95       	lsr	r18
    2924:	23 70       	andi	r18, 0x03	; 3
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	21 15       	cp	r18, r1
    292a:	31 05       	cpc	r19, r1
    292c:	21 f0       	breq	.+8      	; 0x2936 <process_action+0x1bc>
    292e:	21 30       	cpi	r18, 0x01	; 1
    2930:	31 05       	cpc	r19, r1
    2932:	c9 f0       	breq	.+50     	; 0x2966 <process_action+0x1ec>
    2934:	33 c2       	rjmp	.+1126   	; 0x2d9c <process_action+0x622>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2936:	ff 20       	and	r15, r15
    2938:	21 f0       	breq	.+8      	; 0x2942 <process_action+0x1c8>
                        host_system_send(action.usage.code);
    293a:	86 2f       	mov	r24, r22
    293c:	94 2f       	mov	r25, r20
    293e:	93 70       	andi	r25, 0x03	; 3
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <process_action+0x1cc>
                    } else {
                        host_system_send(0);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2946:	28 96       	adiw	r28, 0x08	; 8
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2962:	0c 94 90 10 	jmp	0x2120	; 0x2120 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2966:	ff 20       	and	r15, r15
    2968:	21 f0       	breq	.+8      	; 0x2972 <process_action+0x1f8>
                        host_consumer_send(action.usage.code);
    296a:	86 2f       	mov	r24, r22
    296c:	94 2f       	mov	r25, r20
    296e:	93 70       	andi	r25, 0x03	; 3
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <process_action+0x1fc>
                    } else {
                        host_consumer_send(0);
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2976:	28 96       	adiw	r28, 0x08	; 8
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	ff 90       	pop	r15
    298c:	ef 90       	pop	r14
    298e:	df 90       	pop	r13
    2990:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2992:	0c 94 be 10 	jmp	0x217c	; 0x217c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2996:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2998:	ff 20       	and	r15, r15
    299a:	19 f0       	breq	.+6      	; 0x29a2 <process_action+0x228>
                mousekey_on(action.key.code);
    299c:	0e 94 67 22 	call	0x44ce	; 0x44ce <mousekey_on>
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <process_action+0x22c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    29a2:	0e 94 cf 22 	call	0x459e	; 0x459e <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    29a6:	28 96       	adiw	r28, 0x08	; 8
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	ff 90       	pop	r15
    29bc:	ef 90       	pop	r14
    29be:	df 90       	pop	r13
    29c0:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    29c2:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    29c6:	84 2f       	mov	r24, r20
    29c8:	83 70       	andi	r24, 0x03	; 3
    29ca:	09 f0       	breq	.+2      	; 0x29ce <process_action+0x254>
    29cc:	76 c0       	rjmp	.+236    	; 0x2aba <process_action+0x340>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    29ce:	f1 10       	cpse	r15, r1
    29d0:	e5 c1       	rjmp	.+970    	; 0x2d9c <process_action+0x622>
                    uint8_t shift = action.layer_bitop.part*4;
    29d2:	26 2f       	mov	r18, r22
    29d4:	22 95       	swap	r18
    29d6:	26 95       	lsr	r18
    29d8:	27 70       	andi	r18, 0x07	; 7
    29da:	22 0f       	add	r18, r18
    29dc:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    29de:	86 2f       	mov	r24, r22
    29e0:	8f 70       	andi	r24, 0x0F	; 15
    29e2:	c8 2e       	mov	r12, r24
    29e4:	d1 2c       	mov	r13, r1
    29e6:	e1 2c       	mov	r14, r1
    29e8:	f1 2c       	mov	r15, r1
    29ea:	02 2e       	mov	r0, r18
    29ec:	04 c0       	rjmp	.+8      	; 0x29f6 <process_action+0x27c>
    29ee:	cc 0c       	add	r12, r12
    29f0:	dd 1c       	adc	r13, r13
    29f2:	ee 1c       	adc	r14, r14
    29f4:	ff 1c       	adc	r15, r15
    29f6:	0a 94       	dec	r0
    29f8:	d2 f7       	brpl	.-12     	; 0x29ee <process_action+0x274>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    29fa:	64 ff       	sbrs	r22, 4
    29fc:	10 c0       	rjmp	.+32     	; 0x2a1e <process_action+0x2a4>
    29fe:	6f e0       	ldi	r22, 0x0F	; 15
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <process_action+0x296>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	2a 95       	dec	r18
    2a12:	d2 f7       	brpl	.-12     	; 0x2a08 <process_action+0x28e>
    2a14:	60 95       	com	r22
    2a16:	70 95       	com	r23
    2a18:	80 95       	com	r24
    2a1a:	90 95       	com	r25
    2a1c:	03 c0       	rjmp	.+6      	; 0x2a24 <process_action+0x2aa>
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a24:	24 2f       	mov	r18, r20
    2a26:	26 95       	lsr	r18
    2a28:	26 95       	lsr	r18
    2a2a:	23 70       	andi	r18, 0x03	; 3
    2a2c:	42 2f       	mov	r20, r18
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	42 30       	cpi	r20, 0x02	; 2
    2a32:	51 05       	cpc	r21, r1
    2a34:	d1 f0       	breq	.+52     	; 0x2a6a <process_action+0x2f0>
    2a36:	43 30       	cpi	r20, 0x03	; 3
    2a38:	51 05       	cpc	r21, r1
    2a3a:	59 f1       	breq	.+86     	; 0x2a92 <process_action+0x318>
    2a3c:	6c 29       	or	r22, r12
    2a3e:	7d 29       	or	r23, r13
    2a40:	8e 29       	or	r24, r14
    2a42:	9f 29       	or	r25, r15
    2a44:	41 30       	cpi	r20, 0x01	; 1
    2a46:	51 05       	cpc	r21, r1
    2a48:	41 f1       	breq	.+80     	; 0x2a9a <process_action+0x320>
            break;
#endif
        default:
            break;
    }
}
    2a4a:	28 96       	adiw	r28, 0x08	; 8
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2a66:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a6a:	6c 29       	or	r22, r12
    2a6c:	7d 29       	or	r23, r13
    2a6e:	8e 29       	or	r24, r14
    2a70:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a72:	28 96       	adiw	r28, 0x08	; 8
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	df 90       	pop	r13
    2a8c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a8e:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a92:	0e 94 81 1b 	call	0x3702	; 0x3702 <default_layer_and>
    2a96:	c7 01       	movw	r24, r14
    2a98:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2a9a:	28 96       	adiw	r28, 0x08	; 8
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	ff 90       	pop	r15
    2ab0:	ef 90       	pop	r14
    2ab2:	df 90       	pop	r13
    2ab4:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2ab6:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2aba:	ff 20       	and	r15, r15
    2abc:	19 f0       	breq	.+6      	; 0x2ac4 <process_action+0x34a>
    2abe:	84 2f       	mov	r24, r20
    2ac0:	81 70       	andi	r24, 0x01	; 1
    2ac2:	01 c0       	rjmp	.+2      	; 0x2ac6 <process_action+0x34c>
    2ac4:	86 95       	lsr	r24
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <process_action+0x352>
    2aca:	68 c1       	rjmp	.+720    	; 0x2d9c <process_action+0x622>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2acc:	26 2f       	mov	r18, r22
    2ace:	22 95       	swap	r18
    2ad0:	26 95       	lsr	r18
    2ad2:	27 70       	andi	r18, 0x07	; 7
    2ad4:	22 0f       	add	r18, r18
    2ad6:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ad8:	86 2f       	mov	r24, r22
    2ada:	8f 70       	andi	r24, 0x0F	; 15
    2adc:	c8 2e       	mov	r12, r24
    2ade:	d1 2c       	mov	r13, r1
    2ae0:	e1 2c       	mov	r14, r1
    2ae2:	f1 2c       	mov	r15, r1
    2ae4:	02 2e       	mov	r0, r18
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <process_action+0x376>
    2ae8:	cc 0c       	add	r12, r12
    2aea:	dd 1c       	adc	r13, r13
    2aec:	ee 1c       	adc	r14, r14
    2aee:	ff 1c       	adc	r15, r15
    2af0:	0a 94       	dec	r0
    2af2:	d2 f7       	brpl	.-12     	; 0x2ae8 <process_action+0x36e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2af4:	64 ff       	sbrs	r22, 4
    2af6:	10 c0       	rjmp	.+32     	; 0x2b18 <process_action+0x39e>
    2af8:	6f e0       	ldi	r22, 0x0F	; 15
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	04 c0       	rjmp	.+8      	; 0x2b0a <process_action+0x390>
    2b02:	66 0f       	add	r22, r22
    2b04:	77 1f       	adc	r23, r23
    2b06:	88 1f       	adc	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	2a 95       	dec	r18
    2b0c:	d2 f7       	brpl	.-12     	; 0x2b02 <process_action+0x388>
    2b0e:	60 95       	com	r22
    2b10:	70 95       	com	r23
    2b12:	80 95       	com	r24
    2b14:	90 95       	com	r25
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <process_action+0x3a4>
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2b1e:	24 2f       	mov	r18, r20
    2b20:	26 95       	lsr	r18
    2b22:	26 95       	lsr	r18
    2b24:	23 70       	andi	r18, 0x03	; 3
    2b26:	42 2f       	mov	r20, r18
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	42 30       	cpi	r20, 0x02	; 2
    2b2c:	51 05       	cpc	r21, r1
    2b2e:	d1 f0       	breq	.+52     	; 0x2b64 <process_action+0x3ea>
    2b30:	43 30       	cpi	r20, 0x03	; 3
    2b32:	51 05       	cpc	r21, r1
    2b34:	59 f1       	breq	.+86     	; 0x2b8c <process_action+0x412>
    2b36:	6c 29       	or	r22, r12
    2b38:	7d 29       	or	r23, r13
    2b3a:	8e 29       	or	r24, r14
    2b3c:	9f 29       	or	r25, r15
    2b3e:	41 30       	cpi	r20, 0x01	; 1
    2b40:	51 05       	cpc	r21, r1
    2b42:	41 f1       	breq	.+80     	; 0x2b94 <process_action+0x41a>
            break;
#endif
        default:
            break;
    }
}
    2b44:	28 96       	adiw	r28, 0x08	; 8
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2b60:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b64:	6c 29       	or	r22, r12
    2b66:	7d 29       	or	r23, r13
    2b68:	8e 29       	or	r24, r14
    2b6a:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2b6c:	28 96       	adiw	r28, 0x08	; 8
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	ff 90       	pop	r15
    2b82:	ef 90       	pop	r14
    2b84:	df 90       	pop	r13
    2b86:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b88:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b8c:	0e 94 30 1c 	call	0x3860	; 0x3860 <layer_and>
    2b90:	c7 01       	movw	r24, r14
    2b92:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2b94:	28 96       	adiw	r28, 0x08	; 8
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2bb0:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2bb4:	60 3f       	cpi	r22, 0xF0	; 240
    2bb6:	d9 f1       	breq	.+118    	; 0x2c2e <process_action+0x4b4>
    2bb8:	28 f4       	brcc	.+10     	; 0x2bc4 <process_action+0x44a>
    2bba:	80 e4       	ldi	r24, 0x40	; 64
    2bbc:	86 0f       	add	r24, r22
    2bbe:	80 32       	cpi	r24, 0x20	; 32
    2bc0:	50 f0       	brcs	.+20     	; 0x2bd6 <process_action+0x45c>
    2bc2:	9c c0       	rjmp	.+312    	; 0x2cfc <process_action+0x582>
    2bc4:	62 3f       	cpi	r22, 0xF2	; 242
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <process_action+0x450>
    2bc8:	61 c0       	rjmp	.+194    	; 0x2c8c <process_action+0x512>
    2bca:	08 f4       	brcc	.+2      	; 0x2bce <process_action+0x454>
    2bcc:	4b c0       	rjmp	.+150    	; 0x2c64 <process_action+0x4ea>
    2bce:	63 3f       	cpi	r22, 0xF3	; 243
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <process_action+0x45a>
    2bd2:	70 c0       	rjmp	.+224    	; 0x2cb4 <process_action+0x53a>
    2bd4:	93 c0       	rjmp	.+294    	; 0x2cfc <process_action+0x582>
    2bd6:	16 2f       	mov	r17, r22
    2bd8:	10 71       	andi	r17, 0x10	; 16
    2bda:	84 2f       	mov	r24, r20
    2bdc:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
    2bde:	68 87       	std	Y+8, r22	; 0x08
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    2be0:	ff 20       	and	r15, r15
    2be2:	59 f0       	breq	.+22     	; 0x2bfa <process_action+0x480>
                        layer_on(action.layer_tap.val);
    2be4:	0e 94 c9 1b 	call	0x3792	; 0x3792 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2be8:	68 85       	ldd	r22, Y+8	; 0x08
    2bea:	86 2f       	mov	r24, r22
    2bec:	11 23       	and	r17, r17
    2bee:	19 f0       	breq	.+6      	; 0x2bf6 <process_action+0x47c>
    2bf0:	82 95       	swap	r24
    2bf2:	80 7f       	andi	r24, 0xF0	; 240
    2bf4:	75 ce       	rjmp	.-790    	; 0x28e0 <process_action+0x166>
    2bf6:	8f 70       	andi	r24, 0x0F	; 15
    2bf8:	73 ce       	rjmp	.-794    	; 0x28e0 <process_action+0x166>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    2bfa:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2bfe:	68 85       	ldd	r22, Y+8	; 0x08
    2c00:	86 2f       	mov	r24, r22
    2c02:	11 23       	and	r17, r17
    2c04:	19 f0       	breq	.+6      	; 0x2c0c <process_action+0x492>
    2c06:	82 95       	swap	r24
    2c08:	80 7f       	andi	r24, 0xF0	; 240
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <process_action+0x494>
    2c0c:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    2c0e:	28 96       	adiw	r28, 0x08	; 8
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2c2a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2c2e:	ff 20       	and	r15, r15
    2c30:	a9 f0       	breq	.+42     	; 0x2c5c <process_action+0x4e2>
                        if (tap_count < TAPPING_TOGGLE) {
    2c32:	25 30       	cpi	r18, 0x05	; 5
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <process_action+0x4be>
    2c36:	b2 c0       	rjmp	.+356    	; 0x2d9c <process_action+0x622>
                            layer_invert(action.layer_tap.val);
    2c38:	84 2f       	mov	r24, r20
    2c3a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c3c:	28 96       	adiw	r28, 0x08	; 8
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2c58:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2c5c:	26 30       	cpi	r18, 0x06	; 6
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <process_action+0x4e8>
    2c60:	9d c0       	rjmp	.+314    	; 0x2d9c <process_action+0x622>
    2c62:	ea cf       	rjmp	.-44     	; 0x2c38 <process_action+0x4be>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c64:	ff 20       	and	r15, r15
    2c66:	a1 f0       	breq	.+40     	; 0x2c90 <process_action+0x516>
    2c68:	84 2f       	mov	r24, r20
    2c6a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c6c:	28 96       	adiw	r28, 0x08	; 8
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c88:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c8c:	ff 20       	and	r15, r15
    2c8e:	61 f3       	breq	.-40     	; 0x2c68 <process_action+0x4ee>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c90:	84 2f       	mov	r24, r20
    2c92:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c94:	28 96       	adiw	r28, 0x08	; 8
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2cb0:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2cb4:	ff 20       	and	r15, r15
    2cb6:	91 f0       	breq	.+36     	; 0x2cdc <process_action+0x562>
    2cb8:	84 2f       	mov	r24, r20
    2cba:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2cbc:	28 96       	adiw	r28, 0x08	; 8
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2cd8:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2cdc:	28 96       	adiw	r28, 0x08	; 8
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2cf8:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2cfc:	ff 20       	and	r15, r15
    2cfe:	a1 f0       	breq	.+40     	; 0x2d28 <process_action+0x5ae>
                        if (tap_count > 0) {
    2d00:	22 23       	and	r18, r18
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <process_action+0x58c>
    2d04:	b1 cf       	rjmp	.-158    	; 0x2c68 <process_action+0x4ee>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2d06:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2d08:	28 96       	adiw	r28, 0x08	; 8
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	df 90       	pop	r13
    2d22:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2d24:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2d28:	22 23       	and	r18, r18
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <process_action+0x5b4>
    2d2c:	b1 cf       	rjmp	.-158    	; 0x2c90 <process_action+0x516>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d2e:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2d30:	28 96       	adiw	r28, 0x08	; 8
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	ff 90       	pop	r15
    2d46:	ef 90       	pop	r14
    2d48:	df 90       	pop	r13
    2d4a:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d4c:	0c 94 45 13 	jmp	0x268a	; 0x268a <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d50:	4f 70       	andi	r20, 0x0F	; 15
    2d52:	c8 01       	movw	r24, r16
    2d54:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2d58:	28 96       	adiw	r28, 0x08	; 8
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d74:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2d78:	4f 70       	andi	r20, 0x0F	; 15
    2d7a:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2d7c:	28 96       	adiw	r28, 0x08	; 8
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2d98:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2d9c:	28 96       	adiw	r28, 0x08	; 8
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
    2db4:	df 90       	pop	r13
    2db6:	cf 90       	pop	r12
    2db8:	08 95       	ret

00002dba <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2dba:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <clear_weak_mods>
    clear_keys();
    2dbe:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <clear_keys>
    send_keyboard_report();
    2dc2:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2dc6:	0e 94 82 24 	call	0x4904	; 0x4904 <mousekey_clear>
    mousekey_send();
    2dca:	0e 94 54 23 	call	0x46a8	; 0x46a8 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 90 10 	call	0x2120	; 0x2120 <host_system_send>
    host_consumer_send(0);
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0c 94 be 10 	jmp	0x217c	; 0x217c <host_consumer_send>

00002dde <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2dde:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <clear_mods>
    clear_keyboard_but_mods();
    2de2:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <clear_keyboard_but_mods>

00002de6 <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <is_tap_key+0x8>
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <is_tap_key+0xa>
    2df0:	1f 92       	push	r1
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	49 83       	std	Y+1, r20	; 0x01
    2df8:	5a 83       	std	Y+2, r21	; 0x02
    2dfa:	6b 83       	std	Y+3, r22	; 0x03
    2dfc:	7c 83       	std	Y+4, r23	; 0x04
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	8c 81       	ldd	r24, Y+4	; 0x04
    2e02:	9d 81       	ldd	r25, Y+5	; 0x05
    2e04:	89 2b       	or	r24, r25
    2e06:	31 f0       	breq	.+12     	; 0x2e14 <is_tap_key+0x2e>
    2e08:	5f 3f       	cpi	r21, 0xFF	; 255
    2e0a:	11 f0       	breq	.+4      	; 0x2e10 <is_tap_key+0x2a>
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	03 c0       	rjmp	.+6      	; 0x2e16 <is_tap_key+0x30>
    2e10:	4f 3f       	cpi	r20, 0xFF	; 255
    2e12:	e1 f7       	brne	.-8      	; 0x2e0c <is_tap_key+0x26>
    2e14:	11 e0       	ldi	r17, 0x01	; 1
    2e16:	11 70       	andi	r17, 0x01	; 1
    if (IS_NOEVENT(event)) { return false; }
    2e18:	c9 f5       	brne	.+114    	; 0x2e8c <is_tap_key+0xa6>

    action_t action = layer_switch_get_action(event);
    2e1a:	49 81       	ldd	r20, Y+1	; 0x01
    2e1c:	5a 81       	ldd	r21, Y+2	; 0x02
    2e1e:	6b 81       	ldd	r22, Y+3	; 0x03
    2e20:	7c 81       	ldd	r23, Y+4	; 0x04
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	0e 94 55 1c 	call	0x38aa	; 0x38aa <layer_switch_get_action>
    2e28:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    2e2a:	29 2f       	mov	r18, r25
    2e2c:	22 95       	swap	r18
    2e2e:	2f 70       	andi	r18, 0x0F	; 15
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	2c 30       	cpi	r18, 0x0C	; 12
    2e34:	31 05       	cpc	r19, r1
    2e36:	4c f4       	brge	.+18     	; 0x2e4a <is_tap_key+0x64>
    2e38:	2a 30       	cpi	r18, 0x0A	; 10
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	c4 f4       	brge	.+48     	; 0x2e6e <is_tap_key+0x88>
    2e3e:	22 50       	subi	r18, 0x02	; 2
    2e40:	31 09       	sbc	r19, r1
    2e42:	22 30       	cpi	r18, 0x02	; 2
    2e44:	31 05       	cpc	r19, r1
    2e46:	40 f0       	brcs	.+16     	; 0x2e58 <is_tap_key+0x72>
    2e48:	24 c0       	rjmp	.+72     	; 0x2e92 <is_tap_key+0xac>
    2e4a:	2c 30       	cpi	r18, 0x0C	; 12
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	d1 f0       	breq	.+52     	; 0x2e84 <is_tap_key+0x9e>
    2e50:	2f 30       	cpi	r18, 0x0F	; 15
    2e52:	31 05       	cpc	r19, r1
    2e54:	b9 f0       	breq	.+46     	; 0x2e84 <is_tap_key+0x9e>
    2e56:	1d c0       	rjmp	.+58     	; 0x2e92 <is_tap_key+0xac>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    2e58:	85 3a       	cpi	r24, 0xA5	; 165
    2e5a:	28 f4       	brcc	.+10     	; 0x2e66 <is_tap_key+0x80>
    2e5c:	84 30       	cpi	r24, 0x04	; 4
    2e5e:	c0 f4       	brcc	.+48     	; 0x2e90 <is_tap_key+0xaa>
    2e60:	82 30       	cpi	r24, 0x02	; 2
    2e62:	28 f4       	brcc	.+10     	; 0x2e6e <is_tap_key+0x88>
    2e64:	15 c0       	rjmp	.+42     	; 0x2e90 <is_tap_key+0xaa>
    2e66:	80 e2       	ldi	r24, 0x20	; 32
    2e68:	84 0f       	add	r24, r20
    2e6a:	88 30       	cpi	r24, 0x08	; 8
    2e6c:	88 f0       	brcs	.+34     	; 0x2e90 <is_tap_key+0xaa>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2e6e:	48 3e       	cpi	r20, 0xE8	; 232
    2e70:	30 f4       	brcc	.+12     	; 0x2e7e <is_tap_key+0x98>
    2e72:	40 3e       	cpi	r20, 0xE0	; 224
    2e74:	68 f4       	brcc	.+26     	; 0x2e90 <is_tap_key+0xaa>
    2e76:	44 50       	subi	r20, 0x04	; 4
    2e78:	41 3a       	cpi	r20, 0xA1	; 161
    2e7a:	58 f4       	brcc	.+22     	; 0x2e92 <is_tap_key+0xac>
    2e7c:	09 c0       	rjmp	.+18     	; 0x2e90 <is_tap_key+0xaa>
    2e7e:	40 3f       	cpi	r20, 0xF0	; 240
    2e80:	41 f4       	brne	.+16     	; 0x2e92 <is_tap_key+0xac>
    2e82:	06 c0       	rjmp	.+12     	; 0x2e90 <is_tap_key+0xaa>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2e84:	93 fb       	bst	r25, 3
    2e86:	11 27       	eor	r17, r17
    2e88:	10 f9       	bld	r17, 0
    2e8a:	03 c0       	rjmp	.+6      	; 0x2e92 <is_tap_key+0xac>
#endif
}

bool is_tap_key(keyevent_t event)
{
    if (IS_NOEVENT(event)) { return false; }
    2e8c:	10 e0       	ldi	r17, 0x00	; 0
    2e8e:	01 c0       	rjmp	.+2      	; 0x2e92 <is_tap_key+0xac>
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    2e90:	11 e0       	ldi	r17, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2e92:	81 2f       	mov	r24, r17
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	1f 91       	pop	r17
    2ea4:	08 95       	ret

00002ea6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <debug_event+0x6>
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <debug_event+0x8>
    2eae:	1f 92       	push	r1
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <debug_record>:

void debug_record(keyrecord_t record)
{
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <debug_record+0x6>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <debug_record+0x8>
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <debug_record+0xa>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2ed2:	26 96       	adiw	r28, 0x06	; 6
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eea:	c0 91 87 01 	lds	r28, 0x0187
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2eee:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ef0:	80 91 88 01 	lds	r24, 0x0188
    2ef4:	c8 17       	cp	r28, r24
    2ef6:	99 f0       	breq	.+38     	; 0x2f1e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2ef8:	d0 e0       	ldi	r29, 0x00	; 0
    2efa:	1c 9f       	mul	r17, r28
    2efc:	f0 01       	movw	r30, r0
    2efe:	1d 9f       	mul	r17, r29
    2f00:	f0 0d       	add	r31, r0
    2f02:	11 24       	eor	r1, r1
    2f04:	e7 57       	subi	r30, 0x77	; 119
    2f06:	fe 4f       	sbci	r31, 0xFE	; 254
    2f08:	40 81       	ld	r20, Z
    2f0a:	51 81       	ldd	r21, Z+1	; 0x01
    2f0c:	62 81       	ldd	r22, Z+2	; 0x02
    2f0e:	73 81       	ldd	r23, Z+3	; 0x03
    2f10:	84 81       	ldd	r24, Z+4	; 0x04
    2f12:	95 81       	ldd	r25, Z+5	; 0x05
    2f14:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f18:	21 96       	adiw	r28, 0x01	; 1
    2f1a:	c7 70       	andi	r28, 0x07	; 7
    2f1c:	e9 cf       	rjmp	.-46     	; 0x2ef0 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	1f 91       	pop	r17
    2f24:	08 95       	ret

00002f26 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2f26:	40 91 b9 01 	lds	r20, 0x01B9
    2f2a:	50 91 ba 01 	lds	r21, 0x01BA
    2f2e:	60 91 bb 01 	lds	r22, 0x01BB
    2f32:	70 91 bc 01 	lds	r23, 0x01BC
    2f36:	80 91 bd 01 	lds	r24, 0x01BD
    2f3a:	90 91 be 01 	lds	r25, 0x01BE
    2f3e:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <debug_record>

00002f42 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2f42:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2f44:	80 91 be 01 	lds	r24, 0x01BE
    2f48:	82 95       	swap	r24
    2f4a:	8f 70       	andi	r24, 0x0F	; 15
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <waiting_buffer_scan_tap+0xe>
    2f4e:	5f c0       	rjmp	.+190    	; 0x300e <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2f50:	80 91 bb 01 	lds	r24, 0x01BB
    2f54:	88 23       	and	r24, r24
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <waiting_buffer_scan_tap+0x18>
    2f58:	5a c0       	rjmp	.+180    	; 0x300e <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f5a:	20 91 87 01 	lds	r18, 0x0187
    2f5e:	a0 91 88 01 	lds	r26, 0x0188
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f62:	60 91 b9 01 	lds	r22, 0x01B9
    2f66:	70 91 ba 01 	lds	r23, 0x01BA
    2f6a:	80 91 bc 01 	lds	r24, 0x01BC
    2f6e:	90 91 bd 01 	lds	r25, 0x01BD
    2f72:	31 e0       	ldi	r19, 0x01	; 1
    2f74:	6f 3f       	cpi	r22, 0xFF	; 255
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <waiting_buffer_scan_tap+0x38>
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	b3 2f       	mov	r27, r19
    2f7c:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f7e:	2a 17       	cp	r18, r26
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <waiting_buffer_scan_tap+0x42>
    2f82:	45 c0       	rjmp	.+138    	; 0x300e <waiting_buffer_scan_tap+0xcc>
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	21 f0       	breq	.+8      	; 0x2f90 <waiting_buffer_scan_tap+0x4e>
    2f88:	7f 3f       	cpi	r23, 0xFF	; 255
    2f8a:	21 f4       	brne	.+8      	; 0x2f94 <waiting_buffer_scan_tap+0x52>
    2f8c:	4b 2f       	mov	r20, r27
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <waiting_buffer_scan_tap+0x54>
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <waiting_buffer_scan_tap+0x54>
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f98:	40 fd       	sbrc	r20, 0
    2f9a:	35 c0       	rjmp	.+106    	; 0x3006 <waiting_buffer_scan_tap+0xc4>
    2f9c:	c2 9f       	mul	r28, r18
    2f9e:	f0 01       	movw	r30, r0
    2fa0:	c3 9f       	mul	r28, r19
    2fa2:	f0 0d       	add	r31, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	e7 57       	subi	r30, 0x77	; 119
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	41 81       	ldd	r20, Z+1	; 0x01
    2fac:	74 13       	cpse	r23, r20
    2fae:	2b c0       	rjmp	.+86     	; 0x3006 <waiting_buffer_scan_tap+0xc4>
    2fb0:	40 81       	ld	r20, Z
    2fb2:	64 13       	cpse	r22, r20
    2fb4:	28 c0       	rjmp	.+80     	; 0x3006 <waiting_buffer_scan_tap+0xc4>
    2fb6:	42 81       	ldd	r20, Z+2	; 0x02
    2fb8:	41 11       	cpse	r20, r1
    2fba:	25 c0       	rjmp	.+74     	; 0x3006 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2fbc:	43 81       	ldd	r20, Z+3	; 0x03
    2fbe:	54 81       	ldd	r21, Z+4	; 0x04
    2fc0:	48 17       	cp	r20, r24
    2fc2:	59 07       	cpc	r21, r25
    2fc4:	10 f4       	brcc	.+4      	; 0x2fca <waiting_buffer_scan_tap+0x88>
    2fc6:	41 50       	subi	r20, 0x01	; 1
    2fc8:	51 09       	sbc	r21, r1
    2fca:	48 1b       	sub	r20, r24
    2fcc:	59 0b       	sbc	r21, r25
    2fce:	48 3c       	cpi	r20, 0xC8	; 200
    2fd0:	51 05       	cpc	r21, r1
    2fd2:	c8 f4       	brcc	.+50     	; 0x3006 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2fd4:	80 91 be 01 	lds	r24, 0x01BE
    2fd8:	8f 70       	andi	r24, 0x0F	; 15
    2fda:	80 61       	ori	r24, 0x10	; 16
    2fdc:	80 93 be 01 	sts	0x01BE, r24
            waiting_buffer[i].tap.count = 1;
    2fe0:	86 e0       	ldi	r24, 0x06	; 6
    2fe2:	82 9f       	mul	r24, r18
    2fe4:	f0 01       	movw	r30, r0
    2fe6:	83 9f       	mul	r24, r19
    2fe8:	f0 0d       	add	r31, r0
    2fea:	11 24       	eor	r1, r1
    2fec:	e2 57       	subi	r30, 0x72	; 114
    2fee:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8f 70       	andi	r24, 0x0F	; 15
    2ff4:	80 61       	ori	r24, 0x10	; 16
    2ff6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2ff8:	89 eb       	ldi	r24, 0xB9	; 185
    2ffa:	91 e0       	ldi	r25, 0x01	; 1
    2ffc:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3000:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3002:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3006:	2f 5f       	subi	r18, 0xFF	; 255
    3008:	3f 4f       	sbci	r19, 0xFF	; 255
    300a:	27 70       	andi	r18, 0x07	; 7
    300c:	b8 cf       	rjmp	.-144    	; 0x2f7e <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret

00003012 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3012:	bf 92       	push	r11
    3014:	cf 92       	push	r12
    3016:	df 92       	push	r13
    3018:	ef 92       	push	r14
    301a:	ff 92       	push	r15
    301c:	0f 93       	push	r16
    301e:	1f 93       	push	r17
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	61 97       	sbiw	r28, 0x11	; 17
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3036:	85 e0       	ldi	r24, 0x05	; 5
    3038:	f8 01       	movw	r30, r16
    303a:	de 01       	movw	r26, r28
    303c:	1d 96       	adiw	r26, 0x0d	; 13
    303e:	01 90       	ld	r0, Z+
    3040:	0d 92       	st	X+, r0
    3042:	8a 95       	dec	r24
    3044:	e1 f7       	brne	.-8      	; 0x303e <process_tapping+0x2c>
    3046:	d8 01       	movw	r26, r16
    3048:	4c 91       	ld	r20, X
    304a:	11 96       	adiw	r26, 0x01	; 1
    304c:	5c 91       	ld	r21, X
    304e:	11 97       	sbiw	r26, 0x01	; 1
    3050:	12 96       	adiw	r26, 0x02	; 2
    3052:	cc 90       	ld	r12, X
    3054:	12 97       	sbiw	r26, 0x02	; 2
    3056:	13 96       	adiw	r26, 0x03	; 3
    3058:	ed 90       	ld	r14, X+
    305a:	fc 90       	ld	r15, X
    305c:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    305e:	60 91 b9 01 	lds	r22, 0x01B9
    3062:	70 91 ba 01 	lds	r23, 0x01BA
    3066:	20 91 bc 01 	lds	r18, 0x01BC
    306a:	30 91 bd 01 	lds	r19, 0x01BD
    306e:	21 15       	cp	r18, r1
    3070:	31 05       	cpc	r19, r1
    3072:	31 f0       	breq	.+12     	; 0x3080 <process_tapping+0x6e>
    3074:	7f 3f       	cpi	r23, 0xFF	; 255
    3076:	31 f4       	brne	.+12     	; 0x3084 <process_tapping+0x72>
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	6f 3f       	cpi	r22, 0xFF	; 255
    307c:	19 f4       	brne	.+6      	; 0x3084 <process_tapping+0x72>
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <process_tapping+0x74>
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <process_tapping+0x74>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	b8 2f       	mov	r27, r24
    3088:	b1 70       	andi	r27, 0x01	; 1
    308a:	bb 2e       	mov	r11, r27
    308c:	80 fd       	sbrc	r24, 0
    308e:	77 c1       	rjmp	.+750    	; 0x337e <process_tapping+0x36c>
    3090:	d0 90 bb 01 	lds	r13, 0x01BB
    3094:	dd 20       	and	r13, r13
    3096:	09 f4       	brne	.+2      	; 0x309a <process_tapping+0x88>
    3098:	fb c0       	rjmp	.+502    	; 0x3290 <process_tapping+0x27e>
    309a:	e0 91 be 01 	lds	r30, 0x01BE
        if (WITHIN_TAPPING_TERM(event)) {
    309e:	e2 16       	cp	r14, r18
    30a0:	f3 06       	cpc	r15, r19
    30a2:	38 f0       	brcs	.+14     	; 0x30b2 <process_tapping+0xa0>
    30a4:	c7 01       	movw	r24, r14
    30a6:	82 1b       	sub	r24, r18
    30a8:	93 0b       	sbc	r25, r19
    30aa:	88 3c       	cpi	r24, 0xC8	; 200
    30ac:	91 05       	cpc	r25, r1
    30ae:	48 f0       	brcs	.+18     	; 0x30c2 <process_tapping+0xb0>
    30b0:	a0 c0       	rjmp	.+320    	; 0x31f2 <process_tapping+0x1e0>
    30b2:	20 95       	com	r18
    30b4:	30 95       	com	r19
    30b6:	2e 0d       	add	r18, r14
    30b8:	3f 1d       	adc	r19, r15
    30ba:	28 3c       	cpi	r18, 0xC8	; 200
    30bc:	31 05       	cpc	r19, r1
    30be:	08 f0       	brcs	.+2      	; 0x30c2 <process_tapping+0xb0>
    30c0:	98 c0       	rjmp	.+304    	; 0x31f2 <process_tapping+0x1e0>
            if (tapping_key.tap.count == 0) {
    30c2:	8e 2f       	mov	r24, r30
    30c4:	80 7f       	andi	r24, 0xF0	; 240
    30c6:	09 f0       	breq	.+2      	; 0x30ca <process_tapping+0xb8>
    30c8:	53 c0       	rjmp	.+166    	; 0x3170 <process_tapping+0x15e>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30ca:	75 13       	cpse	r23, r21
    30cc:	14 c0       	rjmp	.+40     	; 0x30f6 <process_tapping+0xe4>
    30ce:	64 13       	cpse	r22, r20
    30d0:	12 c0       	rjmp	.+36     	; 0x30f6 <process_tapping+0xe4>
    30d2:	dc 2c       	mov	r13, r12
    30d4:	c1 10       	cpse	r12, r1
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <process_tapping+0xe4>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    30d8:	ef 70       	andi	r30, 0x0F	; 15
    30da:	e0 61       	ori	r30, 0x10	; 16
    30dc:	e0 93 be 01 	sts	0x01BE, r30
                    debug_tapping_key();
    30e0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_tapping_key>
                    process_action(&tapping_key);
    30e4:	89 eb       	ldi	r24, 0xB9	; 185
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    30ec:	80 91 be 01 	lds	r24, 0x01BE
    30f0:	f8 01       	movw	r30, r16
    30f2:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    30f4:	7c c1       	rjmp	.+760    	; 0x33ee <process_tapping+0x3dc>
    30f6:	e1 14       	cp	r14, r1
    30f8:	f1 04       	cpc	r15, r1
    30fa:	31 f0       	breq	.+12     	; 0x3108 <process_tapping+0xf6>
    30fc:	5f 3f       	cpi	r21, 0xFF	; 255
    30fe:	31 f4       	brne	.+12     	; 0x310c <process_tapping+0xfa>
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	4f 3f       	cpi	r20, 0xFF	; 255
    3104:	19 f4       	brne	.+6      	; 0x310c <process_tapping+0xfa>
    3106:	03 c0       	rjmp	.+6      	; 0x310e <process_tapping+0xfc>
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	01 c0       	rjmp	.+2      	; 0x310e <process_tapping+0xfc>
    310c:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    310e:	80 fd       	sbrc	r24, 0
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <process_tapping+0x106>
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	8c 25       	eor	r24, r12
    3116:	01 c0       	rjmp	.+2      	; 0x311a <process_tapping+0x108>
    3118:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    311a:	f8 2f       	mov	r31, r24
    311c:	f1 70       	andi	r31, 0x01	; 1
    311e:	df 2e       	mov	r13, r31
    3120:	80 ff       	sbrs	r24, 0
    3122:	1c c0       	rjmp	.+56     	; 0x315c <process_tapping+0x14a>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3124:	80 91 87 01 	lds	r24, 0x0187
    3128:	20 91 88 01 	lds	r18, 0x0188
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    312c:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    312e:	82 17       	cp	r24, r18
    3130:	09 f4       	brne	.+2      	; 0x3134 <process_tapping+0x122>
    3132:	36 c1       	rjmp	.+620    	; 0x33a0 <process_tapping+0x38e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	38 9f       	mul	r19, r24
    3138:	f0 01       	movw	r30, r0
    313a:	39 9f       	mul	r19, r25
    313c:	f0 0d       	add	r31, r0
    313e:	11 24       	eor	r1, r1
    3140:	e7 57       	subi	r30, 0x77	; 119
    3142:	fe 4f       	sbci	r31, 0xFE	; 254
    3144:	61 81       	ldd	r22, Z+1	; 0x01
    3146:	56 13       	cpse	r21, r22
    3148:	06 c0       	rjmp	.+12     	; 0x3156 <process_tapping+0x144>
    314a:	60 81       	ld	r22, Z
    314c:	46 13       	cpse	r20, r22
    314e:	03 c0       	rjmp	.+6      	; 0x3156 <process_tapping+0x144>
    3150:	62 81       	ldd	r22, Z+2	; 0x02
    3152:	c6 12       	cpse	r12, r22
    3154:	03 c0       	rjmp	.+6      	; 0x315c <process_tapping+0x14a>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	87 70       	andi	r24, 0x07	; 7
    315a:	e9 cf       	rjmp	.-46     	; 0x312e <process_tapping+0x11c>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    315c:	dc 2c       	mov	r13, r12
    315e:	cc 20       	and	r12, r12
    3160:	09 f4       	brne	.+2      	; 0x3164 <process_tapping+0x152>
    3162:	45 c1       	rjmp	.+650    	; 0x33ee <process_tapping+0x3dc>
                        tapping_key.tap.interrupted = true;
    3164:	80 91 be 01 	lds	r24, 0x01BE
    3168:	81 60       	ori	r24, 0x01	; 1
    316a:	80 93 be 01 	sts	0x01BE, r24
    316e:	58 c0       	rjmp	.+176    	; 0x3220 <process_tapping+0x20e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3170:	75 13       	cpse	r23, r21
    3172:	08 c0       	rjmp	.+16     	; 0x3184 <process_tapping+0x172>
    3174:	64 13       	cpse	r22, r20
    3176:	06 c0       	rjmp	.+12     	; 0x3184 <process_tapping+0x172>
    3178:	c1 10       	cpse	r12, r1
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <process_tapping+0x172>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    317c:	d8 01       	movw	r26, r16
    317e:	15 96       	adiw	r26, 0x05	; 5
    3180:	ec 93       	st	X, r30
    3182:	b3 c0       	rjmp	.+358    	; 0x32ea <process_tapping+0x2d8>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    3184:	4d 87       	std	Y+13, r20	; 0x0d
    3186:	5e 87       	std	Y+14, r21	; 0x0e
    3188:	cf 86       	std	Y+15, r12	; 0x0f
    318a:	7e 2d       	mov	r23, r14
    318c:	f9 8a       	std	Y+17, r15	; 0x11
    318e:	e8 8a       	std	Y+16, r14	; 0x10
    3190:	6c 2d       	mov	r22, r12
    3192:	89 89       	ldd	r24, Y+17	; 0x11
    3194:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <is_tap_key>
    3198:	88 23       	and	r24, r24
    319a:	39 f1       	breq	.+78     	; 0x31ea <process_tapping+0x1d8>
    319c:	dc 2c       	mov	r13, r12
    319e:	cc 20       	and	r12, r12
    31a0:	21 f1       	breq	.+72     	; 0x31ea <process_tapping+0x1d8>
                    if (tapping_key.tap.count > 1) {
    31a2:	20 91 be 01 	lds	r18, 0x01BE
    31a6:	82 2f       	mov	r24, r18
    31a8:	82 95       	swap	r24
    31aa:	8f 70       	andi	r24, 0x0F	; 15
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	02 97       	sbiw	r24, 0x02	; 2
    31b0:	0c f4       	brge	.+2      	; 0x31b4 <process_tapping+0x1a2>
    31b2:	63 c0       	rjmp	.+198    	; 0x327a <process_tapping+0x268>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    31b4:	80 91 b9 01 	lds	r24, 0x01B9
    31b8:	90 91 ba 01 	lds	r25, 0x01BA
    31bc:	98 87       	std	Y+8, r25	; 0x08
    31be:	8f 83       	std	Y+7, r24	; 0x07
    31c0:	19 86       	std	Y+9, r1	; 0x09
    31c2:	fb 86       	std	Y+11, r15	; 0x0b
    31c4:	ea 86       	std	Y+10, r14	; 0x0a
    31c6:	2c 87       	std	Y+12, r18	; 0x0c
    31c8:	ce 01       	movw	r24, r28
    31ca:	07 96       	adiw	r24, 0x07	; 7
    31cc:	54 c0       	rjmp	.+168    	; 0x3276 <process_tapping+0x264>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31ce:	75 17       	cp	r23, r21
    31d0:	49 f1       	breq	.+82     	; 0x3224 <process_tapping+0x212>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    31d2:	4d 87       	std	Y+13, r20	; 0x0d
    31d4:	5e 87       	std	Y+14, r21	; 0x0e
    31d6:	cf 86       	std	Y+15, r12	; 0x0f
    31d8:	7e 2d       	mov	r23, r14
    31da:	f9 8a       	std	Y+17, r15	; 0x11
    31dc:	e8 8a       	std	Y+16, r14	; 0x10
    31de:	6c 2d       	mov	r22, r12
    31e0:	89 89       	ldd	r24, Y+17	; 0x11
    31e2:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <is_tap_key>
    31e6:	81 11       	cpse	r24, r1
    31e8:	2f c0       	rjmp	.+94     	; 0x3248 <process_tapping+0x236>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    31ea:	c8 01       	movw	r24, r16
    31ec:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
    31f0:	a9 c0       	rjmp	.+338    	; 0x3344 <process_tapping+0x332>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    31f2:	8e 2f       	mov	r24, r30
    31f4:	80 7f       	andi	r24, 0xF0	; 240
    31f6:	59 f7       	brne	.-42     	; 0x31ce <process_tapping+0x1bc>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    31f8:	7e 2d       	mov	r23, r14
    31fa:	f9 8a       	std	Y+17, r15	; 0x11
    31fc:	e8 8a       	std	Y+16, r14	; 0x10
    31fe:	6c 2d       	mov	r22, r12
    3200:	89 89       	ldd	r24, Y+17	; 0x11
    3202:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <debug_event>
                process_action(&tapping_key);
    3206:	89 eb       	ldi	r24, 0xB9	; 185
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
                tapping_key = (keyrecord_t){};
    320e:	e9 eb       	ldi	r30, 0xB9	; 185
    3210:	f1 e0       	ldi	r31, 0x01	; 1
    3212:	86 e0       	ldi	r24, 0x06	; 6
    3214:	df 01       	movw	r26, r30
    3216:	1d 92       	st	X+, r1
    3218:	8a 95       	dec	r24
    321a:	e9 f7       	brne	.-6      	; 0x3216 <process_tapping+0x204>
                debug_tapping_key();
    321c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_tapping_key>
                return false;
    3220:	d1 2c       	mov	r13, r1
    3222:	e5 c0       	rjmp	.+458    	; 0x33ee <process_tapping+0x3dc>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3224:	64 13       	cpse	r22, r20
    3226:	d5 cf       	rjmp	.-86     	; 0x31d2 <process_tapping+0x1c0>
    3228:	c1 10       	cpse	r12, r1
    322a:	d3 cf       	rjmp	.-90     	; 0x31d2 <process_tapping+0x1c0>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    322c:	d8 01       	movw	r26, r16
    322e:	15 96       	adiw	r26, 0x05	; 5
    3230:	ec 93       	st	X, r30
                    process_action(keyp);
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
                    tapping_key = (keyrecord_t){};
    3238:	e9 eb       	ldi	r30, 0xB9	; 185
    323a:	f1 e0       	ldi	r31, 0x01	; 1
    323c:	86 e0       	ldi	r24, 0x06	; 6
    323e:	df 01       	movw	r26, r30
    3240:	1d 92       	st	X+, r1
    3242:	8a 95       	dec	r24
    3244:	e9 f7       	brne	.-6      	; 0x3240 <process_tapping+0x22e>
                    return true;
    3246:	d3 c0       	rjmp	.+422    	; 0x33ee <process_tapping+0x3dc>
                }
                else if (is_tap_key(event) && event.pressed) {
    3248:	dc 2c       	mov	r13, r12
    324a:	cc 20       	and	r12, r12
    324c:	71 f2       	breq	.-100    	; 0x31ea <process_tapping+0x1d8>
                    if (tapping_key.tap.count > 1) {
    324e:	20 91 be 01 	lds	r18, 0x01BE
    3252:	82 2f       	mov	r24, r18
    3254:	82 95       	swap	r24
    3256:	8f 70       	andi	r24, 0x0F	; 15
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	02 97       	sbiw	r24, 0x02	; 2
    325c:	74 f0       	brlt	.+28     	; 0x327a <process_tapping+0x268>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    325e:	80 91 b9 01 	lds	r24, 0x01B9
    3262:	90 91 ba 01 	lds	r25, 0x01BA
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	1b 82       	std	Y+3, r1	; 0x03
    326c:	fd 82       	std	Y+5, r15	; 0x05
    326e:	ec 82       	std	Y+4, r14	; 0x04
    3270:	2e 83       	std	Y+6, r18	; 0x06
    3272:	ce 01       	movw	r24, r28
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    327a:	86 e0       	ldi	r24, 0x06	; 6
    327c:	f8 01       	movw	r30, r16
    327e:	a9 eb       	ldi	r26, 0xB9	; 185
    3280:	b1 e0       	ldi	r27, 0x01	; 1
    3282:	01 90       	ld	r0, Z+
    3284:	0d 92       	st	X+, r0
    3286:	8a 95       	dec	r24
    3288:	e1 f7       	brne	.-8      	; 0x3282 <process_tapping+0x270>
                    waiting_buffer_scan_tap();
    328a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <waiting_buffer_scan_tap>
    328e:	74 c0       	rjmp	.+232    	; 0x3378 <process_tapping+0x366>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3290:	e2 16       	cp	r14, r18
    3292:	f3 06       	cpc	r15, r19
    3294:	28 f0       	brcs	.+10     	; 0x32a0 <process_tapping+0x28e>
    3296:	f7 01       	movw	r30, r14
    3298:	e2 1b       	sub	r30, r18
    329a:	f3 0b       	sbc	r31, r19
    329c:	9f 01       	movw	r18, r30
    329e:	04 c0       	rjmp	.+8      	; 0x32a8 <process_tapping+0x296>
    32a0:	20 95       	com	r18
    32a2:	30 95       	com	r19
    32a4:	2e 0d       	add	r18, r14
    32a6:	3f 1d       	adc	r19, r15
    32a8:	28 3c       	cpi	r18, 0xC8	; 200
    32aa:	31 05       	cpc	r19, r1
    32ac:	08 f0       	brcs	.+2      	; 0x32b0 <process_tapping+0x29e>
    32ae:	56 c0       	rjmp	.+172    	; 0x335c <process_tapping+0x34a>
            if (event.pressed) {
    32b0:	dc 2c       	mov	r13, r12
    32b2:	cc 20       	and	r12, r12
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <process_tapping+0x2a6>
    32b6:	99 cf       	rjmp	.-206    	; 0x31ea <process_tapping+0x1d8>
                if (IS_TAPPING_KEY(event.key)) {
    32b8:	75 13       	cpse	r23, r21
    32ba:	2c c0       	rjmp	.+88     	; 0x3314 <process_tapping+0x302>
    32bc:	64 13       	cpse	r22, r20
    32be:	2a c0       	rjmp	.+84     	; 0x3314 <process_tapping+0x302>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    32c0:	80 91 be 01 	lds	r24, 0x01BE
    32c4:	80 fd       	sbrc	r24, 0
    32c6:	1d c0       	rjmp	.+58     	; 0x3302 <process_tapping+0x2f0>
    32c8:	98 2f       	mov	r25, r24
    32ca:	92 95       	swap	r25
    32cc:	9f 70       	andi	r25, 0x0F	; 15
    32ce:	c9 f0       	breq	.+50     	; 0x3302 <process_tapping+0x2f0>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    32d0:	d8 01       	movw	r26, r16
    32d2:	15 96       	adiw	r26, 0x05	; 5
    32d4:	8c 93       	st	X, r24
    32d6:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    32d8:	9f 30       	cpi	r25, 0x0F	; 15
    32da:	39 f0       	breq	.+14     	; 0x32ea <process_tapping+0x2d8>
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	92 95       	swap	r25
    32e0:	90 7f       	andi	r25, 0xF0	; 240
    32e2:	8f 70       	andi	r24, 0x0F	; 15
    32e4:	89 2b       	or	r24, r25
    32e6:	15 96       	adiw	r26, 0x05	; 5
    32e8:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    32ea:	c8 01       	movw	r24, r16
    32ec:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
                        tapping_key = *keyp;
    32f0:	86 e0       	ldi	r24, 0x06	; 6
    32f2:	f8 01       	movw	r30, r16
    32f4:	a9 eb       	ldi	r26, 0xB9	; 185
    32f6:	b1 e0       	ldi	r27, 0x01	; 1
    32f8:	01 90       	ld	r0, Z+
    32fa:	0d 92       	st	X+, r0
    32fc:	8a 95       	dec	r24
    32fe:	e1 f7       	brne	.-8      	; 0x32f8 <process_tapping+0x2e6>
    3300:	3b c0       	rjmp	.+118    	; 0x3378 <process_tapping+0x366>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3302:	86 e0       	ldi	r24, 0x06	; 6
    3304:	f8 01       	movw	r30, r16
    3306:	a9 eb       	ldi	r26, 0xB9	; 185
    3308:	b1 e0       	ldi	r27, 0x01	; 1
    330a:	01 90       	ld	r0, Z+
    330c:	0d 92       	st	X+, r0
    330e:	8a 95       	dec	r24
    3310:	e1 f7       	brne	.-8      	; 0x330a <process_tapping+0x2f8>
                        return true;
    3312:	6d c0       	rjmp	.+218    	; 0x33ee <process_tapping+0x3dc>
                    }
                } else if (is_tap_key(event)) {
    3314:	4d 87       	std	Y+13, r20	; 0x0d
    3316:	5e 87       	std	Y+14, r21	; 0x0e
    3318:	cf 86       	std	Y+15, r12	; 0x0f
    331a:	7e 2d       	mov	r23, r14
    331c:	f9 8a       	std	Y+17, r15	; 0x11
    331e:	e8 8a       	std	Y+16, r14	; 0x10
    3320:	6c 2d       	mov	r22, r12
    3322:	89 89       	ldd	r24, Y+17	; 0x11
    3324:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <is_tap_key>
    3328:	88 23       	and	r24, r24
    332a:	79 f0       	breq	.+30     	; 0x334a <process_tapping+0x338>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    332c:	86 e0       	ldi	r24, 0x06	; 6
    332e:	f8 01       	movw	r30, r16
    3330:	a9 eb       	ldi	r26, 0xB9	; 185
    3332:	b1 e0       	ldi	r27, 0x01	; 1
    3334:	01 90       	ld	r0, Z+
    3336:	0d 92       	st	X+, r0
    3338:	8a 95       	dec	r24
    333a:	e1 f7       	brne	.-8      	; 0x3334 <process_tapping+0x322>
                    waiting_buffer_scan_tap();
    333c:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3340:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_tapping_key>
                    return true;
    3344:	dd 24       	eor	r13, r13
    3346:	d3 94       	inc	r13
    3348:	52 c0       	rjmp	.+164    	; 0x33ee <process_tapping+0x3dc>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    334a:	80 91 be 01 	lds	r24, 0x01BE
    334e:	81 60       	ori	r24, 0x01	; 1
    3350:	80 93 be 01 	sts	0x01BE, r24
                    process_action(keyp);
    3354:	c8 01       	movw	r24, r16
    3356:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
                    return true;
    335a:	49 c0       	rjmp	.+146    	; 0x33ee <process_tapping+0x3dc>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    335c:	7e 2d       	mov	r23, r14
    335e:	f9 8a       	std	Y+17, r15	; 0x11
    3360:	e8 8a       	std	Y+16, r14	; 0x10
    3362:	6c 2d       	mov	r22, r12
    3364:	89 89       	ldd	r24, Y+17	; 0x11
    3366:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <debug_event>
            tapping_key = (keyrecord_t){};
    336a:	e9 eb       	ldi	r30, 0xB9	; 185
    336c:	f1 e0       	ldi	r31, 0x01	; 1
    336e:	86 e0       	ldi	r24, 0x06	; 6
    3370:	df 01       	movw	r26, r30
    3372:	1d 92       	st	X+, r1
    3374:	8a 95       	dec	r24
    3376:	e9 f7       	brne	.-6      	; 0x3372 <process_tapping+0x360>
            debug_tapping_key();
    3378:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_tapping_key>
            return false;
    337c:	38 c0       	rjmp	.+112    	; 0x33ee <process_tapping+0x3dc>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event)) {
    337e:	cc 20       	and	r12, r12
    3380:	09 f4       	brne	.+2      	; 0x3384 <process_tapping+0x372>
    3382:	33 cf       	rjmp	.-410    	; 0x31ea <process_tapping+0x1d8>
    3384:	4d 87       	std	Y+13, r20	; 0x0d
    3386:	5e 87       	std	Y+14, r21	; 0x0e
    3388:	cf 86       	std	Y+15, r12	; 0x0f
    338a:	7e 2d       	mov	r23, r14
    338c:	f9 8a       	std	Y+17, r15	; 0x11
    338e:	e8 8a       	std	Y+16, r14	; 0x10
    3390:	6c 2d       	mov	r22, r12
    3392:	89 89       	ldd	r24, Y+17	; 0x11
    3394:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <is_tap_key>
    3398:	88 23       	and	r24, r24
    339a:	09 f4       	brne	.+2      	; 0x339e <process_tapping+0x38c>
    339c:	26 cf       	rjmp	.-436    	; 0x31ea <process_tapping+0x1d8>
    339e:	c6 cf       	rjmp	.-116    	; 0x332c <process_tapping+0x31a>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
    33a0:	7e 2d       	mov	r23, r14
    33a2:	f9 8a       	std	Y+17, r15	; 0x11
    33a4:	e8 8a       	std	Y+16, r14	; 0x10
    33a6:	6c 2d       	mov	r22, r12
    33a8:	89 89       	ldd	r24, Y+17	; 0x11
    33aa:	0e 94 55 1c 	call	0x38aa	; 0x38aa <layer_switch_get_action>
                    switch (action.kind.id) {
    33ae:	29 2f       	mov	r18, r25
    33b0:	22 95       	swap	r18
    33b2:	2f 70       	andi	r18, 0x0F	; 15
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	22 30       	cpi	r18, 0x02	; 2
    33b8:	31 05       	cpc	r19, r1
    33ba:	2c f4       	brge	.+10     	; 0x33c6 <process_tapping+0x3b4>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    33bc:	9f 70       	andi	r25, 0x0F	; 15
    33be:	41 f0       	breq	.+16     	; 0x33d0 <process_tapping+0x3be>
    33c0:	81 11       	cpse	r24, r1
    33c2:	06 c0       	rjmp	.+12     	; 0x33d0 <process_tapping+0x3be>
    33c4:	0c c0       	rjmp	.+24     	; 0x33de <process_tapping+0x3cc>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
                    switch (action.kind.id) {
    33c6:	24 30       	cpi	r18, 0x04	; 4
    33c8:	31 05       	cpc	r19, r1
    33ca:	2c f4       	brge	.+10     	; 0x33d6 <process_tapping+0x3c4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    33cc:	9f 70       	andi	r25, 0x0F	; 15
    33ce:	49 f4       	brne	.+18     	; 0x33e2 <process_tapping+0x3d0>
                            if (IS_MOD(action.key.code)) return false;
    33d0:	80 5e       	subi	r24, 0xE0	; 224
    33d2:	88 30       	cpi	r24, 0x08	; 8
    33d4:	20 f0       	brcs	.+8      	; 0x33de <process_tapping+0x3cc>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    33d6:	c8 01       	movw	r24, r16
    33d8:	0e 94 bd 13 	call	0x277a	; 0x277a <process_action>
                    return true;
    33dc:	bd 2c       	mov	r11, r13
    33de:	db 2c       	mov	r13, r11
    33e0:	06 c0       	rjmp	.+12     	; 0x33ee <process_tapping+0x3dc>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    33e2:	d8 01       	movw	r26, r16
    33e4:	15 96       	adiw	r26, 0x05	; 5
    33e6:	9c 91       	ld	r25, X
    33e8:	90 7f       	andi	r25, 0xF0	; 240
    33ea:	91 f7       	brne	.-28     	; 0x33d0 <process_tapping+0x3be>
    33ec:	f8 cf       	rjmp	.-16     	; 0x33de <process_tapping+0x3cc>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    33ee:	8d 2d       	mov	r24, r13
    33f0:	61 96       	adiw	r28, 0x11	; 17
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	ff 90       	pop	r15
    3406:	ef 90       	pop	r14
    3408:	df 90       	pop	r13
    340a:	cf 90       	pop	r12
    340c:	bf 90       	pop	r11
    340e:	08 95       	ret

00003410 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	2c 97       	sbiw	r28, 0x0c	; 12
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	4f 83       	std	Y+7, r20	; 0x07
    3428:	58 87       	std	Y+8, r21	; 0x08
    342a:	69 87       	std	Y+9, r22	; 0x09
    342c:	7a 87       	std	Y+10, r23	; 0x0a
    342e:	8b 87       	std	Y+11, r24	; 0x0b
    3430:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3432:	ce 01       	movw	r24, r28
    3434:	07 96       	adiw	r24, 0x07	; 7
    3436:	0e 94 09 18 	call	0x3012	; 0x3012 <process_tapping>
    343a:	88 23       	and	r24, r24
    343c:	c1 f0       	breq	.+48     	; 0x346e <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    343e:	2f 81       	ldd	r18, Y+7	; 0x07
    3440:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3442:	8a 85       	ldd	r24, Y+10	; 0x0a
    3444:	9b 85       	ldd	r25, Y+11	; 0x0b
    3446:	89 2b       	or	r24, r25
    3448:	31 f0       	breq	.+12     	; 0x3456 <action_tapping_process+0x46>
    344a:	3f 3f       	cpi	r19, 0xFF	; 255
    344c:	11 f0       	breq	.+4      	; 0x3452 <action_tapping_process+0x42>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	03 c0       	rjmp	.+6      	; 0x3458 <action_tapping_process+0x48>
    3452:	2f 3f       	cpi	r18, 0xFF	; 255
    3454:	e1 f7       	brne	.-8      	; 0x344e <action_tapping_process+0x3e>
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	81 11       	cpse	r24, r1
    345a:	47 c0       	rjmp	.+142    	; 0x34ea <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    345c:	4f 81       	ldd	r20, Y+7	; 0x07
    345e:	58 85       	ldd	r21, Y+8	; 0x08
    3460:	69 85       	ldd	r22, Y+9	; 0x09
    3462:	7a 85       	ldd	r23, Y+10	; 0x0a
    3464:	8b 85       	ldd	r24, Y+11	; 0x0b
    3466:	9c 85       	ldd	r25, Y+12	; 0x0c
    3468:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <debug_record>
    346c:	3e c0       	rjmp	.+124    	; 0x34ea <action_tapping_process+0xda>
    346e:	86 e0       	ldi	r24, 0x06	; 6
    3470:	fe 01       	movw	r30, r28
    3472:	37 96       	adiw	r30, 0x07	; 7
    3474:	de 01       	movw	r26, r28
    3476:	11 96       	adiw	r26, 0x01	; 1
    3478:	01 90       	ld	r0, Z+
    347a:	0d 92       	st	X+, r0
    347c:	8a 95       	dec	r24
    347e:	e1 f7       	brne	.-8      	; 0x3478 <action_tapping_process+0x68>
    3480:	ff 81       	ldd	r31, Y+7	; 0x07
    3482:	e8 85       	ldd	r30, Y+8	; 0x08
    3484:	4a 85       	ldd	r20, Y+10	; 0x0a
    3486:	5b 85       	ldd	r21, Y+11	; 0x0b
    3488:	41 15       	cp	r20, r1
    348a:	51 05       	cpc	r21, r1
    348c:	31 f0       	breq	.+12     	; 0x349a <action_tapping_process+0x8a>
    348e:	ef 3f       	cpi	r30, 0xFF	; 255
    3490:	31 f4       	brne	.+12     	; 0x349e <action_tapping_process+0x8e>
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	ff 3f       	cpi	r31, 0xFF	; 255
    3496:	19 f4       	brne	.+6      	; 0x349e <action_tapping_process+0x8e>
    3498:	03 c0       	rjmp	.+6      	; 0x34a0 <action_tapping_process+0x90>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <action_tapping_process+0x90>
    349e:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    34a0:	80 fd       	sbrc	r24, 0
    34a2:	23 c0       	rjmp	.+70     	; 0x34ea <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    34a4:	20 91 88 01 	lds	r18, 0x0188
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	c9 01       	movw	r24, r18
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	87 70       	andi	r24, 0x07	; 7
    34b0:	99 27       	eor	r25, r25
    34b2:	60 91 87 01 	lds	r22, 0x0187
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	86 17       	cp	r24, r22
    34ba:	97 07       	cpc	r25, r23
    34bc:	f1 f1       	breq	.+124    	; 0x353a <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    34be:	f9 83       	std	Y+1, r31	; 0x01
    34c0:	ea 83       	std	Y+2, r30	; 0x02
    34c2:	5d 83       	std	Y+5, r21	; 0x05
    34c4:	4c 83       	std	Y+4, r20	; 0x04
    34c6:	96 e0       	ldi	r25, 0x06	; 6
    34c8:	92 9f       	mul	r25, r18
    34ca:	d0 01       	movw	r26, r0
    34cc:	93 9f       	mul	r25, r19
    34ce:	b0 0d       	add	r27, r0
    34d0:	11 24       	eor	r1, r1
    34d2:	a7 57       	subi	r26, 0x77	; 119
    34d4:	be 4f       	sbci	r27, 0xFE	; 254
    34d6:	fe 01       	movw	r30, r28
    34d8:	31 96       	adiw	r30, 0x01	; 1
    34da:	01 90       	ld	r0, Z+
    34dc:	0d 92       	st	X+, r0
    34de:	9a 95       	dec	r25
    34e0:	e1 f7       	brne	.-8      	; 0x34da <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    34e2:	80 93 88 01 	sts	0x0188, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    34e6:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34ea:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34ec:	80 91 87 01 	lds	r24, 0x0187
    34f0:	90 91 88 01 	lds	r25, 0x0188
    34f4:	89 17       	cp	r24, r25
    34f6:	79 f1       	breq	.+94     	; 0x3556 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34f8:	18 9f       	mul	r17, r24
    34fa:	c0 01       	movw	r24, r0
    34fc:	11 24       	eor	r1, r1
    34fe:	87 57       	subi	r24, 0x77	; 119
    3500:	9e 4f       	sbci	r25, 0xFE	; 254
    3502:	0e 94 09 18 	call	0x3012	; 0x3012 <process_tapping>
    3506:	88 23       	and	r24, r24
    3508:	31 f1       	breq	.+76     	; 0x3556 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    350a:	e0 91 87 01 	lds	r30, 0x0187
    350e:	1e 9f       	mul	r17, r30
    3510:	f0 01       	movw	r30, r0
    3512:	11 24       	eor	r1, r1
    3514:	e7 57       	subi	r30, 0x77	; 119
    3516:	fe 4f       	sbci	r31, 0xFE	; 254
    3518:	40 81       	ld	r20, Z
    351a:	51 81       	ldd	r21, Z+1	; 0x01
    351c:	62 81       	ldd	r22, Z+2	; 0x02
    351e:	73 81       	ldd	r23, Z+3	; 0x03
    3520:	84 81       	ldd	r24, Z+4	; 0x04
    3522:	95 81       	ldd	r25, Z+5	; 0x05
    3524:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3528:	80 91 87 01 	lds	r24, 0x0187
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	87 70       	andi	r24, 0x07	; 7
    3532:	99 27       	eor	r25, r25
    3534:	80 93 87 01 	sts	0x0187, r24
    3538:	d9 cf       	rjmp	.-78     	; 0x34ec <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    353a:	0e 94 ef 16 	call	0x2dde	; 0x2dde <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    353e:	10 92 88 01 	sts	0x0188, r1
    waiting_buffer_tail = 0;
    3542:	10 92 87 01 	sts	0x0187, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3546:	e9 eb       	ldi	r30, 0xB9	; 185
    3548:	f1 e0       	ldi	r31, 0x01	; 1
    354a:	86 e0       	ldi	r24, 0x06	; 6
    354c:	df 01       	movw	r26, r30
    354e:	1d 92       	st	X+, r1
    3550:	8a 95       	dec	r24
    3552:	e9 f7       	brne	.-6      	; 0x354e <action_tapping_process+0x13e>
    3554:	ca cf       	rjmp	.-108    	; 0x34ea <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3556:	2c 96       	adiw	r28, 0x0c	; 12
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	08 95       	ret

0000356a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    356a:	df 92       	push	r13
    356c:	ef 92       	push	r14
    356e:	ff 92       	push	r15
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	09 f4       	brne	.+2      	; 0x3580 <action_macro_play+0x16>
    357e:	8a c0       	rjmp	.+276    	; 0x3694 <action_macro_play+0x12a>
    3580:	e1 2c       	mov	r14, r1
    3582:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3584:	dd 24       	eor	r13, r13
    3586:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3588:	ef 01       	movw	r28, r30
    358a:	21 96       	adiw	r28, 0x01	; 1
    358c:	84 91       	lpm	r24, Z
    358e:	85 37       	cpi	r24, 0x75	; 117
    3590:	09 f4       	brne	.+2      	; 0x3594 <action_macro_play+0x2a>
    3592:	61 c0       	rjmp	.+194    	; 0x3656 <action_macro_play+0xec>
    3594:	58 f4       	brcc	.+22     	; 0x35ac <action_macro_play+0x42>
    3596:	84 37       	cpi	r24, 0x74	; 116
    3598:	08 f0       	brcs	.+2      	; 0x359c <action_macro_play+0x32>
    359a:	4e c0       	rjmp	.+156    	; 0x3638 <action_macro_play+0xce>
    359c:	84 30       	cpi	r24, 0x04	; 4
    359e:	08 f0       	brcs	.+2      	; 0x35a2 <action_macro_play+0x38>
    35a0:	6a c0       	rjmp	.+212    	; 0x3676 <action_macro_play+0x10c>
    35a2:	81 30       	cpi	r24, 0x01	; 1
    35a4:	d1 f0       	breq	.+52     	; 0x35da <action_macro_play+0x70>
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	71 f1       	breq	.+92     	; 0x3606 <action_macro_play+0x9c>
    35aa:	74 c0       	rjmp	.+232    	; 0x3694 <action_macro_play+0x12a>
    35ac:	88 37       	cpi	r24, 0x78	; 120
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <action_macro_play+0x48>
    35b0:	5d c0       	rjmp	.+186    	; 0x366c <action_macro_play+0x102>
    35b2:	50 f4       	brcc	.+20     	; 0x35c8 <action_macro_play+0x5e>
    35b4:	86 37       	cpi	r24, 0x76	; 118
    35b6:	09 f4       	brne	.+2      	; 0x35ba <action_macro_play+0x50>
    35b8:	55 c0       	rjmp	.+170    	; 0x3664 <action_macro_play+0xfa>
    35ba:	87 37       	cpi	r24, 0x77	; 119
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <action_macro_play+0x56>
    35be:	6a c0       	rjmp	.+212    	; 0x3694 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    35c0:	8e 2d       	mov	r24, r14
    35c2:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <set_mods>
    35c6:	54 c0       	rjmp	.+168    	; 0x3670 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    35c8:	9c e7       	ldi	r25, 0x7C	; 124
    35ca:	98 0f       	add	r25, r24
    35cc:	90 37       	cpi	r25, 0x70	; 112
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <action_macro_play+0x68>
    35d0:	61 c0       	rjmp	.+194    	; 0x3694 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    35d2:	8f 77       	andi	r24, 0x7F	; 127
    35d4:	0e 94 45 13 	call	0x268a	; 0x268a <unregister_code>
                break;
    35d8:	50 c0       	rjmp	.+160    	; 0x367a <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    35da:	8f 01       	movw	r16, r30
    35dc:	0e 5f       	subi	r16, 0xFE	; 254
    35de:	1f 4f       	sbci	r17, 0xFF	; 255
    35e0:	fe 01       	movw	r30, r28
    35e2:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    35e4:	90 e2       	ldi	r25, 0x20	; 32
    35e6:	98 0f       	add	r25, r24
    35e8:	98 30       	cpi	r25, 0x08	; 8
    35ea:	50 f4       	brcc	.+20     	; 0x3600 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    35ec:	87 70       	andi	r24, 0x07	; 7
    35ee:	fd 2d       	mov	r31, r13
    35f0:	01 c0       	rjmp	.+2      	; 0x35f4 <action_macro_play+0x8a>
    35f2:	ff 0f       	add	r31, r31
    35f4:	8a 95       	dec	r24
    35f6:	ea f7       	brpl	.-6      	; 0x35f2 <action_macro_play+0x88>
    35f8:	8f 2f       	mov	r24, r31
    35fa:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <add_weak_mods>
    35fe:	15 c0       	rjmp	.+42     	; 0x362a <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3600:	0e 94 57 12 	call	0x24ae	; 0x24ae <register_code>
    3604:	14 c0       	rjmp	.+40     	; 0x362e <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3606:	8f 01       	movw	r16, r30
    3608:	0e 5f       	subi	r16, 0xFE	; 254
    360a:	1f 4f       	sbci	r17, 0xFF	; 255
    360c:	fe 01       	movw	r30, r28
    360e:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3610:	90 e2       	ldi	r25, 0x20	; 32
    3612:	98 0f       	add	r25, r24
    3614:	98 30       	cpi	r25, 0x08	; 8
    3616:	68 f4       	brcc	.+26     	; 0x3632 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    3618:	87 70       	andi	r24, 0x07	; 7
    361a:	fd 2d       	mov	r31, r13
    361c:	01 c0       	rjmp	.+2      	; 0x3620 <action_macro_play+0xb6>
    361e:	ff 0f       	add	r31, r31
    3620:	8a 95       	dec	r24
    3622:	ea f7       	brpl	.-6      	; 0x361e <action_macro_play+0xb4>
    3624:	8f 2f       	mov	r24, r31
    3626:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <del_weak_mods>
                    send_keyboard_report();
    362a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    362e:	e8 01       	movw	r28, r16
    3630:	24 c0       	rjmp	.+72     	; 0x367a <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3632:	0e 94 45 13 	call	0x268a	; 0x268a <unregister_code>
    3636:	fb cf       	rjmp	.-10     	; 0x362e <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3638:	9f 01       	movw	r18, r30
    363a:	2e 5f       	subi	r18, 0xFE	; 254
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	fe 01       	movw	r30, r28
    3640:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3642:	cc 23       	and	r28, r28
    3644:	69 f0       	breq	.+26     	; 0x3660 <action_macro_play+0xf6>
    3646:	8f e9       	ldi	r24, 0x9F	; 159
    3648:	9f e0       	ldi	r25, 0x0F	; 15
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <action_macro_play+0xe0>
    364e:	00 c0       	rjmp	.+0      	; 0x3650 <action_macro_play+0xe6>
    3650:	00 00       	nop
    3652:	c1 50       	subi	r28, 0x01	; 1
    3654:	f6 cf       	rjmp	.-20     	; 0x3642 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3656:	9f 01       	movw	r18, r30
    3658:	2e 5f       	subi	r18, 0xFE	; 254
    365a:	3f 4f       	sbci	r19, 0xFF	; 255
    365c:	fe 01       	movw	r30, r28
    365e:	f4 90       	lpm	r15, Z
    3660:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3662:	0b c0       	rjmp	.+22     	; 0x367a <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    3664:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <get_mods>
    3668:	e8 2e       	mov	r14, r24
                break;
    366a:	07 c0       	rjmp	.+14     	; 0x367a <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    366c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <clear_mods>
                send_keyboard_report();
    3670:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <send_keyboard_report>
                break;
    3674:	02 c0       	rjmp	.+4      	; 0x367a <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3676:	0e 94 57 12 	call	0x24ae	; 0x24ae <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    367a:	9f 2d       	mov	r25, r15
    367c:	99 23       	and	r25, r25
    367e:	41 f0       	breq	.+16     	; 0x3690 <action_macro_play+0x126>
    3680:	ef e9       	ldi	r30, 0x9F	; 159
    3682:	ff e0       	ldi	r31, 0x0F	; 15
    3684:	31 97       	sbiw	r30, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <action_macro_play+0x11a>
    3688:	00 c0       	rjmp	.+0      	; 0x368a <action_macro_play+0x120>
    368a:	00 00       	nop
    368c:	91 50       	subi	r25, 0x01	; 1
    368e:	f6 cf       	rjmp	.-20     	; 0x367c <action_macro_play+0x112>
    3690:	fe 01       	movw	r30, r28
    3692:	7a cf       	rjmp	.-268    	; 0x3588 <action_macro_play+0x1e>
    }
}
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	1f 91       	pop	r17
    369a:	0f 91       	pop	r16
    369c:	ff 90       	pop	r15
    369e:	ef 90       	pop	r14
    36a0:	df 90       	pop	r13
    36a2:	08 95       	ret

000036a4 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    36a4:	60 93 1e 02 	sts	0x021E, r22
    36a8:	70 93 1f 02 	sts	0x021F, r23
    36ac:	80 93 20 02 	sts	0x0220, r24
    36b0:	90 93 21 02 	sts	0x0221, r25
    hook_layer_change(layer_state);
    36b4:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <hook_layer_change>

000036b8 <default_layer_debug>:
    clear_keyboard_but_mods(); // To avoid stuck keys
#endif
}

void default_layer_debug(void)
{
    36b8:	08 95       	ret

000036ba <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36ba:	60 93 22 02 	sts	0x0222, r22
    36be:	70 93 23 02 	sts	0x0223, r23
    36c2:	80 93 24 02 	sts	0x0224, r24
    36c6:	90 93 25 02 	sts	0x0225, r25
    hook_default_layer_change(default_layer_state);
    36ca:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <hook_default_layer_change>

000036ce <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    36d2:	00 91 22 02 	lds	r16, 0x0222
    36d6:	10 91 23 02 	lds	r17, 0x0223
    36da:	20 91 24 02 	lds	r18, 0x0224
    36de:	30 91 25 02 	lds	r19, 0x0225
    36e2:	60 2b       	or	r22, r16
    36e4:	71 2b       	or	r23, r17
    36e6:	82 2b       	or	r24, r18
    36e8:	93 2b       	or	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36ea:	60 93 22 02 	sts	0x0222, r22
    36ee:	70 93 23 02 	sts	0x0223, r23
    36f2:	80 93 24 02 	sts	0x0224, r24
    36f6:	90 93 25 02 	sts	0x0225, r25

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    36fe:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <hook_default_layer_change>

00003702 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3706:	00 91 22 02 	lds	r16, 0x0222
    370a:	10 91 23 02 	lds	r17, 0x0223
    370e:	20 91 24 02 	lds	r18, 0x0224
    3712:	30 91 25 02 	lds	r19, 0x0225
    3716:	60 23       	and	r22, r16
    3718:	71 23       	and	r23, r17
    371a:	82 23       	and	r24, r18
    371c:	93 23       	and	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    371e:	60 93 22 02 	sts	0x0222, r22
    3722:	70 93 23 02 	sts	0x0223, r23
    3726:	80 93 24 02 	sts	0x0224, r24
    372a:	90 93 25 02 	sts	0x0225, r25
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3732:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <hook_default_layer_change>

00003736 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3736:	0f 93       	push	r16
    3738:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    373a:	00 91 22 02 	lds	r16, 0x0222
    373e:	10 91 23 02 	lds	r17, 0x0223
    3742:	20 91 24 02 	lds	r18, 0x0224
    3746:	30 91 25 02 	lds	r19, 0x0225
    374a:	60 27       	eor	r22, r16
    374c:	71 27       	eor	r23, r17
    374e:	82 27       	eor	r24, r18
    3750:	93 27       	eor	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3752:	60 93 22 02 	sts	0x0222, r22
    3756:	70 93 23 02 	sts	0x0223, r23
    375a:	80 93 24 02 	sts	0x0224, r24
    375e:	90 93 25 02 	sts	0x0225, r25
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3766:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <hook_default_layer_change>

0000376a <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	70 e0       	ldi	r23, 0x00	; 0
    376e:	cb 01       	movw	r24, r22
    3770:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

00003774 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3774:	41 e0       	ldi	r20, 0x01	; 1
    3776:	50 e0       	ldi	r21, 0x00	; 0
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	70 e0       	ldi	r23, 0x00	; 0
    377c:	04 c0       	rjmp	.+8      	; 0x3786 <layer_move+0x12>
    377e:	44 0f       	add	r20, r20
    3780:	55 1f       	adc	r21, r21
    3782:	66 1f       	adc	r22, r22
    3784:	77 1f       	adc	r23, r23
    3786:	8a 95       	dec	r24
    3788:	d2 f7       	brpl	.-12     	; 0x377e <layer_move+0xa>
    378a:	cb 01       	movw	r24, r22
    378c:	ba 01       	movw	r22, r20
    378e:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

00003792 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	60 e0       	ldi	r22, 0x00	; 0
    3798:	70 e0       	ldi	r23, 0x00	; 0
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <layer_on+0x12>
    379c:	44 0f       	add	r20, r20
    379e:	55 1f       	adc	r21, r21
    37a0:	66 1f       	adc	r22, r22
    37a2:	77 1f       	adc	r23, r23
    37a4:	8a 95       	dec	r24
    37a6:	d2 f7       	brpl	.-12     	; 0x379c <layer_on+0xa>
    37a8:	80 91 1e 02 	lds	r24, 0x021E
    37ac:	90 91 1f 02 	lds	r25, 0x021F
    37b0:	a0 91 20 02 	lds	r26, 0x0220
    37b4:	b0 91 21 02 	lds	r27, 0x0221
    37b8:	48 2b       	or	r20, r24
    37ba:	59 2b       	or	r21, r25
    37bc:	6a 2b       	or	r22, r26
    37be:	7b 2b       	or	r23, r27
    37c0:	cb 01       	movw	r24, r22
    37c2:	ba 01       	movw	r22, r20
    37c4:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

000037c8 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	50 e0       	ldi	r21, 0x00	; 0
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	04 c0       	rjmp	.+8      	; 0x37da <layer_off+0x12>
    37d2:	44 0f       	add	r20, r20
    37d4:	55 1f       	adc	r21, r21
    37d6:	66 1f       	adc	r22, r22
    37d8:	77 1f       	adc	r23, r23
    37da:	8a 95       	dec	r24
    37dc:	d2 f7       	brpl	.-12     	; 0x37d2 <layer_off+0xa>
    37de:	40 95       	com	r20
    37e0:	50 95       	com	r21
    37e2:	60 95       	com	r22
    37e4:	70 95       	com	r23
    37e6:	80 91 1e 02 	lds	r24, 0x021E
    37ea:	90 91 1f 02 	lds	r25, 0x021F
    37ee:	a0 91 20 02 	lds	r26, 0x0220
    37f2:	b0 91 21 02 	lds	r27, 0x0221
    37f6:	48 23       	and	r20, r24
    37f8:	59 23       	and	r21, r25
    37fa:	6a 23       	and	r22, r26
    37fc:	7b 23       	and	r23, r27
    37fe:	cb 01       	movw	r24, r22
    3800:	ba 01       	movw	r22, r20
    3802:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

00003806 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	04 c0       	rjmp	.+8      	; 0x3818 <layer_invert+0x12>
    3810:	44 0f       	add	r20, r20
    3812:	55 1f       	adc	r21, r21
    3814:	66 1f       	adc	r22, r22
    3816:	77 1f       	adc	r23, r23
    3818:	8a 95       	dec	r24
    381a:	d2 f7       	brpl	.-12     	; 0x3810 <layer_invert+0xa>
    381c:	80 91 1e 02 	lds	r24, 0x021E
    3820:	90 91 1f 02 	lds	r25, 0x021F
    3824:	a0 91 20 02 	lds	r26, 0x0220
    3828:	b0 91 21 02 	lds	r27, 0x0221
    382c:	48 27       	eor	r20, r24
    382e:	59 27       	eor	r21, r25
    3830:	6a 27       	eor	r22, r26
    3832:	7b 27       	eor	r23, r27
    3834:	cb 01       	movw	r24, r22
    3836:	ba 01       	movw	r22, r20
    3838:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

0000383c <layer_or>:
}

void layer_or(uint32_t state)
{
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3840:	00 91 1e 02 	lds	r16, 0x021E
    3844:	10 91 1f 02 	lds	r17, 0x021F
    3848:	20 91 20 02 	lds	r18, 0x0220
    384c:	30 91 21 02 	lds	r19, 0x0221
    3850:	60 2b       	or	r22, r16
    3852:	71 2b       	or	r23, r17
    3854:	82 2b       	or	r24, r18
    3856:	93 2b       	or	r25, r19
}
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    385c:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

00003860 <layer_and>:
}
void layer_and(uint32_t state)
{
    3860:	0f 93       	push	r16
    3862:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3864:	00 91 1e 02 	lds	r16, 0x021E
    3868:	10 91 1f 02 	lds	r17, 0x021F
    386c:	20 91 20 02 	lds	r18, 0x0220
    3870:	30 91 21 02 	lds	r19, 0x0221
    3874:	60 23       	and	r22, r16
    3876:	71 23       	and	r23, r17
    3878:	82 23       	and	r24, r18
    387a:	93 23       	and	r25, r19
}
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3880:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

00003884 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3888:	00 91 1e 02 	lds	r16, 0x021E
    388c:	10 91 1f 02 	lds	r17, 0x021F
    3890:	20 91 20 02 	lds	r18, 0x0220
    3894:	30 91 21 02 	lds	r19, 0x0221
    3898:	60 27       	eor	r22, r16
    389a:	71 27       	eor	r23, r17
    389c:	82 27       	eor	r24, r18
    389e:	93 27       	eor	r25, r19
}
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    38a4:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <layer_state_set>

000038a8 <layer_debug>:
}

void layer_debug(void)
{
    38a8:	08 95       	ret

000038aa <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    38aa:	9f 92       	push	r9
    38ac:	af 92       	push	r10
    38ae:	bf 92       	push	r11
    38b0:	cf 92       	push	r12
    38b2:	df 92       	push	r13
    38b4:	ef 92       	push	r14
    38b6:	ff 92       	push	r15
    38b8:	0f 93       	push	r16
    38ba:	1f 93       	push	r17
    38bc:	cf 93       	push	r28
    38be:	df 93       	push	r29
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <layer_switch_get_action+0x18>
    38c2:	00 d0       	rcall	.+0      	; 0x38c4 <layer_switch_get_action+0x1a>
    38c4:	1f 92       	push	r1
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	6b 83       	std	Y+3, r22	; 0x03
    38cc:	7c 83       	std	Y+4, r23	; 0x04
    38ce:	8d 83       	std	Y+5, r24	; 0x05
    38d0:	5a 01       	movw	r10, r20
    38d2:	8c 81       	ldd	r24, Y+4	; 0x04
    38d4:	9d 81       	ldd	r25, Y+5	; 0x05
    38d6:	89 2b       	or	r24, r25
    38d8:	41 f0       	breq	.+16     	; 0x38ea <layer_switch_get_action+0x40>
    38da:	8f ef       	ldi	r24, 0xFF	; 255
    38dc:	b8 12       	cpse	r11, r24
    38de:	07 c0       	rjmp	.+14     	; 0x38ee <layer_switch_get_action+0x44>
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	9f ef       	ldi	r25, 0xFF	; 255
    38e4:	49 13       	cpse	r20, r25
    38e6:	03 c0       	rjmp	.+6      	; 0x38ee <layer_switch_get_action+0x44>
    38e8:	03 c0       	rjmp	.+6      	; 0x38f0 <layer_switch_get_action+0x46>
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	01 c0       	rjmp	.+2      	; 0x38f0 <layer_switch_get_action+0x46>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    38f0:	80 ff       	sbrs	r24, 0
    38f2:	03 c0       	rjmp	.+6      	; 0x38fa <layer_switch_get_action+0x50>
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	4b c0       	rjmp	.+150    	; 0x3990 <layer_switch_get_action+0xe6>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	88 23       	and	r24, r24
    38fe:	c1 f1       	breq	.+112    	; 0x3970 <layer_switch_get_action+0xc6>
/* return layer effective for key at this time */
static uint8_t current_layer_for_key(keypos_t key)
{
#ifndef NO_ACTION_LAYER
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    3900:	c0 90 22 02 	lds	r12, 0x0222
    3904:	d0 90 23 02 	lds	r13, 0x0223
    3908:	e0 90 24 02 	lds	r14, 0x0224
    390c:	f0 90 25 02 	lds	r15, 0x0225
    3910:	80 91 1e 02 	lds	r24, 0x021E
    3914:	90 91 1f 02 	lds	r25, 0x021F
    3918:	a0 91 20 02 	lds	r26, 0x0220
    391c:	b0 91 21 02 	lds	r27, 0x0221
    3920:	c8 2a       	or	r12, r24
    3922:	d9 2a       	or	r13, r25
    3924:	ea 2a       	or	r14, r26
    3926:	fb 2a       	or	r15, r27
    3928:	0f e1       	ldi	r16, 0x1F	; 31
    392a:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    392c:	d7 01       	movw	r26, r14
    392e:	c6 01       	movw	r24, r12
    3930:	00 2e       	mov	r0, r16
    3932:	04 c0       	rjmp	.+8      	; 0x393c <layer_switch_get_action+0x92>
    3934:	b6 95       	lsr	r27
    3936:	a7 95       	ror	r26
    3938:	97 95       	ror	r25
    393a:	87 95       	ror	r24
    393c:	0a 94       	dec	r0
    393e:	d2 f7       	brpl	.-12     	; 0x3934 <layer_switch_get_action+0x8a>
    3940:	80 fd       	sbrc	r24, 0
    3942:	05 c0       	rjmp	.+10     	; 0x394e <layer_switch_get_action+0xa4>
    3944:	01 50       	subi	r16, 0x01	; 1
    3946:	11 09       	sbc	r17, r1
    3948:	88 f7       	brcc	.-30     	; 0x392c <layer_switch_get_action+0x82>
                return i;
            }
        }
    }
    /* fall back to layer 0 */
    return 0;
    394a:	91 2c       	mov	r9, r1
    394c:	07 c0       	rjmp	.+14     	; 0x395c <layer_switch_get_action+0xb2>
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
            action = action_for_key(i, key);
    394e:	90 2e       	mov	r9, r16
    3950:	b5 01       	movw	r22, r10
    3952:	80 2f       	mov	r24, r16
    3954:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	a1 f3       	breq	.-24     	; 0x3944 <layer_switch_get_action+0x9a>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    395c:	93 e1       	ldi	r25, 0x13	; 19
    395e:	b9 9e       	mul	r11, r25
    3960:	f0 01       	movw	r30, r0
    3962:	11 24       	eor	r1, r1
    3964:	ea 0d       	add	r30, r10
    3966:	f1 1d       	adc	r31, r1
    3968:	e1 54       	subi	r30, 0x41	; 65
    396a:	fe 4f       	sbci	r31, 0xFE	; 254
    396c:	90 82       	st	Z, r9
    396e:	09 c0       	rjmp	.+18     	; 0x3982 <layer_switch_get_action+0xd8>
    } else {
        layer = layer_pressed[event.key.row][event.key.col];
    3970:	83 e1       	ldi	r24, 0x13	; 19
    3972:	b8 9e       	mul	r11, r24
    3974:	f0 01       	movw	r30, r0
    3976:	11 24       	eor	r1, r1
    3978:	ea 0d       	add	r30, r10
    397a:	f1 1d       	adc	r31, r1
    397c:	e1 54       	subi	r30, 0x41	; 65
    397e:	fe 4f       	sbci	r31, 0xFE	; 254
    3980:	90 80       	ld	r9, Z
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    3982:	a9 82       	std	Y+1, r10	; 0x01
    3984:	ba 82       	std	Y+2, r11	; 0x02
    3986:	69 81       	ldd	r22, Y+1	; 0x01
    3988:	7a 81       	ldd	r23, Y+2	; 0x02
    398a:	89 2d       	mov	r24, r9
    398c:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <action_for_key>
}
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	df 90       	pop	r13
    39a8:	cf 90       	pop	r12
    39aa:	bf 90       	pop	r11
    39ac:	af 90       	pop	r10
    39ae:	9f 90       	pop	r9
    39b0:	08 95       	ret

000039b2 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    39b2:	40 91 0c 01 	lds	r20, 0x010C
    39b6:	50 91 0d 01 	lds	r21, 0x010D
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    39be:	9f ef       	ldi	r25, 0xFF	; 255
    39c0:	fa 01       	movw	r30, r20
    39c2:	e2 0f       	add	r30, r18
    39c4:	f3 1f       	adc	r31, r19
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    39c6:	62 81       	ldd	r22, Z+2	; 0x02
    39c8:	68 17       	cp	r22, r24
    39ca:	99 f0       	breq	.+38     	; 0x39f2 <add_key+0x40>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    39cc:	9f 3f       	cpi	r25, 0xFF	; 255
    39ce:	19 f4       	brne	.+6      	; 0x39d6 <add_key+0x24>
    39d0:	61 11       	cpse	r22, r1
    39d2:	01 c0       	rjmp	.+2      	; 0x39d6 <add_key+0x24>
    39d4:	92 2f       	mov	r25, r18
    39d6:	2f 5f       	subi	r18, 0xFF	; 255
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    39da:	26 30       	cpi	r18, 0x06	; 6
    39dc:	31 05       	cpc	r19, r1
    39de:	81 f7       	brne	.-32     	; 0x39c0 <add_key+0xe>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    39e0:	9f 3f       	cpi	r25, 0xFF	; 255
    39e2:	39 f0       	breq	.+14     	; 0x39f2 <add_key+0x40>
            keyboard_report->keys[empty] = code;
    39e4:	fa 01       	movw	r30, r20
    39e6:	e9 0f       	add	r30, r25
    39e8:	f1 1d       	adc	r31, r1
    39ea:	97 fd       	sbrc	r25, 7
    39ec:	fa 95       	dec	r31
    39ee:	82 83       	std	Z+2, r24	; 0x02
    39f0:	08 95       	ret
    39f2:	08 95       	ret

000039f4 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    39f4:	40 91 0c 01 	lds	r20, 0x010C
    39f8:	50 91 0d 01 	lds	r21, 0x010D
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	fa 01       	movw	r30, r20
    3a02:	e2 0f       	add	r30, r18
    3a04:	f3 1f       	adc	r31, r19
    3a06:	92 81       	ldd	r25, Z+2	; 0x02
    3a08:	98 13       	cpse	r25, r24
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    3a0c:	12 82       	std	Z+2, r1	; 0x02
    3a0e:	2f 5f       	subi	r18, 0xFF	; 255
    3a10:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3a12:	26 30       	cpi	r18, 0x06	; 6
    3a14:	31 05       	cpc	r19, r1
    3a16:	a1 f7       	brne	.-24     	; 0x3a00 <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    3a18:	08 95       	ret

00003a1a <clear_keys>:

void clear_keys(void)
{
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3a1e:	e0 91 0c 01 	lds	r30, 0x010C
    3a22:	f0 91 0d 01 	lds	r31, 0x010D
    3a26:	e8 0f       	add	r30, r24
    3a28:	f9 1f       	adc	r31, r25
    3a2a:	10 82       	st	Z, r1
    3a2c:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a2e:	88 30       	cpi	r24, 0x08	; 8
    3a30:	91 05       	cpc	r25, r1
    3a32:	a9 f7       	brne	.-22     	; 0x3a1e <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a34:	08 95       	ret

00003a36 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3a36:	80 91 30 02 	lds	r24, 0x0230
    3a3a:	08 95       	ret

00003a3c <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a3c:	90 91 30 02 	lds	r25, 0x0230
    3a40:	98 2b       	or	r25, r24
    3a42:	90 93 30 02 	sts	0x0230, r25
    3a46:	08 95       	ret

00003a48 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3a48:	80 95       	com	r24
    3a4a:	90 91 30 02 	lds	r25, 0x0230
    3a4e:	98 23       	and	r25, r24
    3a50:	90 93 30 02 	sts	0x0230, r25
    3a54:	08 95       	ret

00003a56 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3a56:	80 93 30 02 	sts	0x0230, r24
    3a5a:	08 95       	ret

00003a5c <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3a5c:	10 92 30 02 	sts	0x0230, r1
    3a60:	08 95       	ret

00003a62 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3a62:	90 91 2f 02 	lds	r25, 0x022F
    3a66:	98 2b       	or	r25, r24
    3a68:	90 93 2f 02 	sts	0x022F, r25
    3a6c:	08 95       	ret

00003a6e <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3a6e:	80 95       	com	r24
    3a70:	90 91 2f 02 	lds	r25, 0x022F
    3a74:	98 23       	and	r25, r24
    3a76:	90 93 2f 02 	sts	0x022F, r25
    3a7a:	08 95       	ret

00003a7c <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3a7c:	10 92 2f 02 	sts	0x022F, r1
    3a80:	08 95       	ret

00003a82 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3a82:	80 93 26 02 	sts	0x0226, r24
    3a86:	08 95       	ret

00003a88 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3a88:	10 92 26 02 	sts	0x0226, r1
    3a8c:	08 95       	ret

00003a8e <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3a8e:	40 91 0c 01 	lds	r20, 0x010C
    3a92:	50 91 0d 01 	lds	r21, 0x010D
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	fa 01       	movw	r30, r20
    3a9e:	e2 0f       	add	r30, r18
    3aa0:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	91 11       	cpse	r25, r1
            cnt++;
    3aa6:	8f 5f       	subi	r24, 0xFF	; 255
    3aa8:	2f 5f       	subi	r18, 0xFF	; 255
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3aac:	27 30       	cpi	r18, 0x07	; 7
    3aae:	31 05       	cpc	r19, r1
    3ab0:	a9 f7       	brne	.-22     	; 0x3a9c <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3ab2:	08 95       	ret

00003ab4 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3ab4:	e0 91 0c 01 	lds	r30, 0x010C
    3ab8:	f0 91 0d 01 	lds	r31, 0x010D
    3abc:	80 91 30 02 	lds	r24, 0x0230
    3ac0:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3ac2:	e0 91 0c 01 	lds	r30, 0x010C
    3ac6:	f0 91 0d 01 	lds	r31, 0x010D
    3aca:	80 81       	ld	r24, Z
    3acc:	90 91 2f 02 	lds	r25, 0x022F
    3ad0:	89 2b       	or	r24, r25
    3ad2:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3ad4:	90 91 26 02 	lds	r25, 0x0226
    3ad8:	99 23       	and	r25, r25
    3ada:	61 f0       	breq	.+24     	; 0x3af4 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3adc:	e0 91 0c 01 	lds	r30, 0x010C
    3ae0:	f0 91 0d 01 	lds	r31, 0x010D
    3ae4:	80 81       	ld	r24, Z
    3ae6:	89 2b       	or	r24, r25
    3ae8:	80 83       	st	Z, r24
        if (has_anykey()) {
    3aea:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <has_anykey>
    3aee:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3af0:	10 92 26 02 	sts	0x0226, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3af4:	80 91 0c 01 	lds	r24, 0x010C
    3af8:	90 91 0d 01 	lds	r25, 0x010D
    3afc:	0c 94 40 10 	jmp	0x2080	; 0x2080 <host_keyboard_send>

00003b00 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3b00:	90 93 35 01 	sts	0x0135, r25
    3b04:	80 93 34 01 	sts	0x0134, r24
    3b08:	08 95       	ret

00003b0a <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3b0a:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3b0c:	98 2f       	mov	r25, r24
    3b0e:	9c 7c       	andi	r25, 0xCC	; 204
    3b10:	96 95       	lsr	r25
    3b12:	96 95       	lsr	r25
    3b14:	83 73       	andi	r24, 0x33	; 51
    3b16:	44 e0       	ldi	r20, 0x04	; 4
    3b18:	84 9f       	mul	r24, r20
    3b1a:	90 01       	movw	r18, r0
    3b1c:	11 24       	eor	r1, r1
    3b1e:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3b20:	89 2f       	mov	r24, r25
    3b22:	8a 7a       	andi	r24, 0xAA	; 170
    3b24:	86 95       	lsr	r24
    3b26:	95 75       	andi	r25, 0x55	; 85
    3b28:	99 0f       	add	r25, r25
    return bits;
}
    3b2a:	89 2b       	or	r24, r25
    3b2c:	08 95       	ret

00003b2e <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3b2e:	1f 93       	push	r17
    3b30:	cf 93       	push	r28
    3b32:	df 93       	push	r29
    3b34:	1f 92       	push	r1
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3b3a:	99 83       	std	Y+1, r25	; 0x01
    3b3c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <bitrev>
    3b40:	18 2f       	mov	r17, r24
    3b42:	99 81       	ldd	r25, Y+1	; 0x01
    3b44:	89 2f       	mov	r24, r25
    3b46:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <bitrev>
    3b4a:	21 2f       	mov	r18, r17
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	32 2f       	mov	r19, r18
    3b50:	22 27       	eor	r18, r18
    return bits;
}
    3b52:	a9 01       	movw	r20, r18
    3b54:	48 2b       	or	r20, r24
    3b56:	ca 01       	movw	r24, r20
    3b58:	0f 90       	pop	r0
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	08 95       	ret

00003b62 <bitrev32>:

uint32_t bitrev32(uint32_t bits)
{
    3b62:	cf 92       	push	r12
    3b64:	df 92       	push	r13
    3b66:	ef 92       	push	r14
    3b68:	ff 92       	push	r15
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	6b 01       	movw	r12, r22
    3b70:	7c 01       	movw	r14, r24
    bits = (uint32_t)bitrev16(bits & 0x0000ffff)<<16 | bitrev16((bits & 0xffff0000)>>16);
    3b72:	cb 01       	movw	r24, r22
    3b74:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <bitrev16>
    3b78:	ec 01       	movw	r28, r24
    3b7a:	c7 01       	movw	r24, r14
    3b7c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <bitrev16>
    3b80:	6c 01       	movw	r12, r24
    3b82:	ce 01       	movw	r24, r28
    3b84:	a0 e0       	ldi	r26, 0x00	; 0
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	77 27       	eor	r23, r23
    3b8a:	66 27       	eor	r22, r22
    3b8c:	e1 2c       	mov	r14, r1
    3b8e:	f1 2c       	mov	r15, r1
    3b90:	6c 29       	or	r22, r12
    3b92:	7d 29       	or	r23, r13
    3b94:	8e 29       	or	r24, r14
    3b96:	9f 29       	or	r25, r15
    return bits;
}
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	ff 90       	pop	r15
    3b9e:	ef 90       	pop	r14
    3ba0:	df 90       	pop	r13
    3ba2:	cf 90       	pop	r12
    3ba4:	08 95       	ret

00003ba6 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3ba6:	08 95       	ret

00003ba8 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <hook_matrix_change+0x6>
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <hook_matrix_change+0x8>
    3bb0:	1f 92       	push	r1
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	08 95       	ret

00003bc6 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3bc6:	08 95       	ret

00003bc8 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3bc8:	08 95       	ret

00003bca <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3bca:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <keyboard_set_leds>

00003bce <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3bce:	08 95       	ret

00003bd0 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3bd0:	80 91 46 02 	lds	r24, 0x0246
    3bd4:	84 30       	cpi	r24, 0x04	; 4
    3bd6:	09 f1       	breq	.+66     	; 0x3c1a <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3bd8:	10 92 32 02 	sts	0x0232, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3bdc:	20 e4       	ldi	r18, 0x40	; 64
    3bde:	88 e1       	ldi	r24, 0x18	; 24
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	a8 95       	wdr
    3be8:	80 93 60 00 	sts	0x0060, r24
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3bf2:	83 b7       	in	r24, 0x33	; 51
    3bf4:	81 7f       	andi	r24, 0xF1	; 241
    3bf6:	84 60       	ori	r24, 0x04	; 4
    3bf8:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3bfa:	83 b7       	in	r24, 0x33	; 51
    3bfc:	81 60       	ori	r24, 0x01	; 1
    3bfe:	83 bf       	out	0x33, r24	; 51
    sei();
    3c00:	78 94       	sei
    sleep_cpu();
    3c02:	88 95       	sleep
    sleep_disable();
    3c04:	83 b7       	in	r24, 0x33	; 51
    3c06:	8e 7f       	andi	r24, 0xFE	; 254
    3c08:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3c0a:	88 e1       	ldi	r24, 0x18	; 24
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	f8 94       	cli
    3c10:	80 93 60 00 	sts	0x0060, r24
    3c14:	10 92 60 00 	sts	0x0060, r1
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	08 95       	ret

00003c1c <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    3c1c:	cf 93       	push	r28
    matrix_power_up();
    3c1e:	0e 94 13 12 	call	0x2426	; 0x2426 <matrix_power_up>
    matrix_scan();
    3c22:	0e 94 20 07 	call	0xe40	; 0xe40 <matrix_scan>
    matrix_power_down();
    3c26:	0e 94 14 12 	call	0x2428	; 0x2428 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c2a:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3c2c:	8c 2f       	mov	r24, r28
    3c2e:	0e 94 8b 08 	call	0x1116	; 0x1116 <matrix_get_row>
    3c32:	67 2b       	or	r22, r23
    3c34:	68 2b       	or	r22, r24
    3c36:	69 2b       	or	r22, r25
    3c38:	29 f4       	brne	.+10     	; 0x3c44 <suspend_wakeup_condition+0x28>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c3a:	cf 5f       	subi	r28, 0xFF	; 255
    3c3c:	c5 30       	cpi	r28, 0x05	; 5
    3c3e:	b1 f7       	brne	.-20     	; 0x3c2c <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	01 c0       	rjmp	.+2      	; 0x3c46 <suspend_wakeup_condition+0x2a>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3c4a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <matrix_clear>
    clear_keyboard();
    3c4e:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <clear_keyboard>

00003c52 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3c52:	1f 92       	push	r1
    3c54:	0f 92       	push	r0
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	0f 92       	push	r0
    3c5a:	11 24       	eor	r1, r1
    3c5c:	8f 93       	push	r24
    3c5e:	9f 93       	push	r25
    3c60:	af 93       	push	r26
    3c62:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3c64:	80 91 32 02 	lds	r24, 0x0232
    3c68:	81 11       	cpse	r24, r1
    3c6a:	13 c0       	rjmp	.+38     	; 0x3c92 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3c6c:	80 91 33 02 	lds	r24, 0x0233
    3c70:	90 91 34 02 	lds	r25, 0x0234
    3c74:	a0 91 35 02 	lds	r26, 0x0235
    3c78:	b0 91 36 02 	lds	r27, 0x0236
    3c7c:	41 96       	adiw	r24, 0x11	; 17
    3c7e:	a1 1d       	adc	r26, r1
    3c80:	b1 1d       	adc	r27, r1
    3c82:	80 93 33 02 	sts	0x0233, r24
    3c86:	90 93 34 02 	sts	0x0234, r25
    3c8a:	a0 93 35 02 	sts	0x0235, r26
    3c8e:	b0 93 36 02 	sts	0x0236, r27
            break;
        default:
            ;
    }
}
    3c92:	bf 91       	pop	r27
    3c94:	af 91       	pop	r26
    3c96:	9f 91       	pop	r25
    3c98:	8f 91       	pop	r24
    3c9a:	0f 90       	pop	r0
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	0f 90       	pop	r0
    3ca0:	1f 90       	pop	r1
    3ca2:	18 95       	reti

00003ca4 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3ca8:	93 e0       	ldi	r25, 0x03	; 3
    3caa:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3cac:	9a ef       	ldi	r25, 0xFA	; 250
    3cae:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    3cb0:	80 93 6e 00 	sts	0x006E, r24
    3cb4:	08 95       	ret

00003cb6 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3cb6:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3cb8:	f8 94       	cli
    t = timer_count;
    3cba:	80 91 33 02 	lds	r24, 0x0233
    3cbe:	90 91 34 02 	lds	r25, 0x0234
    3cc2:	a0 91 35 02 	lds	r26, 0x0235
    3cc6:	b0 91 36 02 	lds	r27, 0x0236
    SREG = sreg;
    3cca:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3ccc:	08 95       	ret

00003cce <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3cce:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3cd0:	f8 94       	cli
    t = timer_count;
    3cd2:	60 91 33 02 	lds	r22, 0x0233
    3cd6:	70 91 34 02 	lds	r23, 0x0234
    3cda:	80 91 35 02 	lds	r24, 0x0235
    3cde:	90 91 36 02 	lds	r25, 0x0236
    SREG = sreg;
    3ce2:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3ce4:	08 95       	ret

00003ce6 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3ce6:	cf 92       	push	r12
    3ce8:	df 92       	push	r13
    3cea:	ef 92       	push	r14
    3cec:	ff 92       	push	r15
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3cf2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3cf4:	f8 94       	cli
    t = timer_count;
    3cf6:	40 91 33 02 	lds	r20, 0x0233
    3cfa:	50 91 34 02 	lds	r21, 0x0234
    3cfe:	60 91 35 02 	lds	r22, 0x0235
    3d02:	70 91 36 02 	lds	r23, 0x0236
    SREG = sreg;
    3d06:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3d08:	6a 01       	movw	r12, r20
    3d0a:	7b 01       	movw	r14, r22
    3d0c:	ee 24       	eor	r14, r14
    3d0e:	ff 24       	eor	r15, r15
    3d10:	8c 01       	movw	r16, r24
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	c0 16       	cp	r12, r16
    3d18:	d1 06       	cpc	r13, r17
    3d1a:	e2 06       	cpc	r14, r18
    3d1c:	f3 06       	cpc	r15, r19
    3d1e:	10 f4       	brcc	.+4      	; 0x3d24 <timer_elapsed+0x3e>
    3d20:	41 50       	subi	r20, 0x01	; 1
    3d22:	51 09       	sbc	r21, r1
    3d24:	48 1b       	sub	r20, r24
    3d26:	59 0b       	sbc	r21, r25
}
    3d28:	ca 01       	movw	r24, r20
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	ff 90       	pop	r15
    3d30:	ef 90       	pop	r14
    3d32:	df 90       	pop	r13
    3d34:	cf 90       	pop	r12
    3d36:	08 95       	ret

00003d38 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3d38:	1f 92       	push	r1
    3d3a:	0f 92       	push	r0
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	0f 92       	push	r0
    3d40:	11 24       	eor	r1, r1
    3d42:	8f 93       	push	r24
    3d44:	9f 93       	push	r25
    3d46:	af 93       	push	r26
    3d48:	bf 93       	push	r27
    timer_count++;
    3d4a:	80 91 33 02 	lds	r24, 0x0233
    3d4e:	90 91 34 02 	lds	r25, 0x0234
    3d52:	a0 91 35 02 	lds	r26, 0x0235
    3d56:	b0 91 36 02 	lds	r27, 0x0236
    3d5a:	01 96       	adiw	r24, 0x01	; 1
    3d5c:	a1 1d       	adc	r26, r1
    3d5e:	b1 1d       	adc	r27, r1
    3d60:	80 93 33 02 	sts	0x0233, r24
    3d64:	90 93 34 02 	sts	0x0234, r25
    3d68:	a0 93 35 02 	sts	0x0235, r26
    3d6c:	b0 93 36 02 	sts	0x0236, r27
}
    3d70:	bf 91       	pop	r27
    3d72:	af 91       	pop	r26
    3d74:	9f 91       	pop	r25
    3d76:	8f 91       	pop	r24
    3d78:	0f 90       	pop	r0
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	0f 90       	pop	r0
    3d7e:	1f 90       	pop	r1
    3d80:	18 95       	reti

00003d82 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3d82:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <USB_Disable>
    cli();
    3d86:	f8 94       	cli
    3d88:	2f ef       	ldi	r18, 0xFF	; 255
    3d8a:	87 ea       	ldi	r24, 0xA7	; 167
    3d8c:	91 e6       	ldi	r25, 0x61	; 97
    3d8e:	21 50       	subi	r18, 0x01	; 1
    3d90:	80 40       	sbci	r24, 0x00	; 0
    3d92:	90 40       	sbci	r25, 0x00	; 0
    3d94:	e1 f7       	brne	.-8      	; 0x3d8e <bootloader_jump+0xc>
    3d96:	00 c0       	rjmp	.+0      	; 0x3d98 <bootloader_jump+0x16>
    3d98:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3d9a:	87 e0       	ldi	r24, 0x07	; 7
    3d9c:	90 eb       	ldi	r25, 0xB0	; 176
    3d9e:	dc 01       	movw	r26, r24
    3da0:	80 93 50 02 	sts	0x0250, r24
    3da4:	90 93 51 02 	sts	0x0251, r25
    3da8:	a0 93 52 02 	sts	0x0252, r26
    3dac:	b0 93 53 02 	sts	0x0253, r27
    wdt_enable(WDTO_250MS);
    3db0:	2c e0       	ldi	r18, 0x0C	; 12
    3db2:	88 e1       	ldi	r24, 0x18	; 24
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	f8 94       	cli
    3dba:	a8 95       	wdr
    3dbc:	80 93 60 00 	sts	0x0060, r24
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	20 93 60 00 	sts	0x0060, r18
    3dc6:	ff cf       	rjmp	.-2      	; 0x3dc6 <bootloader_jump+0x44>

00003dc8 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3dc8:	8d 3b       	cpi	r24, 0xBD	; 189
    3dca:	60 f4       	brcc	.+24     	; 0x3de4 <keycode_to_action+0x1c>
    3dcc:	88 3a       	cpi	r24, 0xA8	; 168
    3dce:	90 f5       	brcc	.+100    	; 0x3e34 <keycode_to_action+0x6c>
    3dd0:	85 3a       	cpi	r24, 0xA5	; 165
    3dd2:	28 f5       	brcc	.+74     	; 0x3e1e <keycode_to_action+0x56>
    3dd4:	84 30       	cpi	r24, 0x04	; 4
    3dd6:	08 f5       	brcc	.+66     	; 0x3e1a <keycode_to_action+0x52>
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	09 f0       	breq	.+2      	; 0x3dde <keycode_to_action+0x16>
    3ddc:	86 c0       	rjmp	.+268    	; 0x3eea <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3de4:	88 3e       	cpi	r24, 0xE8	; 232
    3de6:	98 f4       	brcc	.+38     	; 0x3e0e <keycode_to_action+0x46>
    3de8:	80 3e       	cpi	r24, 0xE0	; 224
    3dea:	b8 f4       	brcc	.+46     	; 0x3e1a <keycode_to_action+0x52>
    3dec:	8f 3b       	cpi	r24, 0xBF	; 191
    3dee:	09 f0       	breq	.+2      	; 0x3df2 <keycode_to_action+0x2a>
    3df0:	7c c0       	rjmp	.+248    	; 0x3eea <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3df2:	0e 94 ef 16 	call	0x2dde	; 0x2dde <clear_keyboard>
    3df6:	2f ef       	ldi	r18, 0xFF	; 255
    3df8:	80 e7       	ldi	r24, 0x70	; 112
    3dfa:	92 e0       	ldi	r25, 0x02	; 2
    3dfc:	21 50       	subi	r18, 0x01	; 1
    3dfe:	80 40       	sbci	r24, 0x00	; 0
    3e00:	90 40       	sbci	r25, 0x00	; 0
    3e02:	e1 f7       	brne	.-8      	; 0x3dfc <keycode_to_action+0x34>
    3e04:	00 c0       	rjmp	.+0      	; 0x3e06 <keycode_to_action+0x3e>
    3e06:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3e08:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <bootloader_jump>
    3e0c:	6e c0       	rjmp	.+220    	; 0x3eea <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3e0e:	80 3f       	cpi	r24, 0xF0	; 240
    3e10:	08 f4       	brcc	.+2      	; 0x3e14 <keycode_to_action+0x4c>
    3e12:	6b c0       	rjmp	.+214    	; 0x3eea <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	90 65       	ori	r25, 0x50	; 80
    3e18:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3e1e:	85 3a       	cpi	r24, 0xA5	; 165
    3e20:	21 f0       	breq	.+8      	; 0x3e2a <keycode_to_action+0x62>
    3e22:	86 3a       	cpi	r24, 0xA6	; 166
    3e24:	21 f4       	brne	.+8      	; 0x3e2e <keycode_to_action+0x66>
    3e26:	32 e8       	ldi	r19, 0x82	; 130
    3e28:	03 c0       	rjmp	.+6      	; 0x3e30 <keycode_to_action+0x68>
    3e2a:	31 e8       	ldi	r19, 0x81	; 129
    3e2c:	01 c0       	rjmp	.+2      	; 0x3e30 <keycode_to_action+0x68>
    3e2e:	33 e8       	ldi	r19, 0x83	; 131
    3e30:	20 e4       	ldi	r18, 0x40	; 64
    3e32:	58 c0       	rjmp	.+176    	; 0x3ee4 <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3e34:	88 3a       	cpi	r24, 0xA8	; 168
    3e36:	51 f1       	breq	.+84     	; 0x3e8c <keycode_to_action+0xc4>
    3e38:	89 3a       	cpi	r24, 0xA9	; 169
    3e3a:	51 f1       	breq	.+84     	; 0x3e90 <keycode_to_action+0xc8>
    3e3c:	8a 3a       	cpi	r24, 0xAA	; 170
    3e3e:	51 f1       	breq	.+84     	; 0x3e94 <keycode_to_action+0xcc>
    3e40:	8b 3a       	cpi	r24, 0xAB	; 171
    3e42:	51 f1       	breq	.+84     	; 0x3e98 <keycode_to_action+0xd0>
    3e44:	8c 3a       	cpi	r24, 0xAC	; 172
    3e46:	51 f1       	breq	.+84     	; 0x3e9c <keycode_to_action+0xd4>
    3e48:	8d 3a       	cpi	r24, 0xAD	; 173
    3e4a:	51 f1       	breq	.+84     	; 0x3ea0 <keycode_to_action+0xd8>
    3e4c:	8e 3a       	cpi	r24, 0xAE	; 174
    3e4e:	51 f1       	breq	.+84     	; 0x3ea4 <keycode_to_action+0xdc>
    3e50:	8f 3a       	cpi	r24, 0xAF	; 175
    3e52:	51 f1       	breq	.+84     	; 0x3ea8 <keycode_to_action+0xe0>
    3e54:	81 3b       	cpi	r24, 0xB1	; 177
    3e56:	51 f1       	breq	.+84     	; 0x3eac <keycode_to_action+0xe4>
    3e58:	80 3b       	cpi	r24, 0xB0	; 176
    3e5a:	51 f1       	breq	.+84     	; 0x3eb0 <keycode_to_action+0xe8>
    3e5c:	82 3b       	cpi	r24, 0xB2	; 178
    3e5e:	51 f1       	breq	.+84     	; 0x3eb4 <keycode_to_action+0xec>
    3e60:	83 3b       	cpi	r24, 0xB3	; 179
    3e62:	51 f1       	breq	.+84     	; 0x3eb8 <keycode_to_action+0xf0>
    3e64:	84 3b       	cpi	r24, 0xB4	; 180
    3e66:	51 f1       	breq	.+84     	; 0x3ebc <keycode_to_action+0xf4>
    3e68:	85 3b       	cpi	r24, 0xB5	; 181
    3e6a:	51 f1       	breq	.+84     	; 0x3ec0 <keycode_to_action+0xf8>
    3e6c:	86 3b       	cpi	r24, 0xB6	; 182
    3e6e:	59 f1       	breq	.+86     	; 0x3ec6 <keycode_to_action+0xfe>
    3e70:	87 3b       	cpi	r24, 0xB7	; 183
    3e72:	59 f1       	breq	.+86     	; 0x3eca <keycode_to_action+0x102>
    3e74:	88 3b       	cpi	r24, 0xB8	; 184
    3e76:	59 f1       	breq	.+86     	; 0x3ece <keycode_to_action+0x106>
    3e78:	89 3b       	cpi	r24, 0xB9	; 185
    3e7a:	59 f1       	breq	.+86     	; 0x3ed2 <keycode_to_action+0x10a>
    3e7c:	8a 3b       	cpi	r24, 0xBA	; 186
    3e7e:	59 f1       	breq	.+86     	; 0x3ed6 <keycode_to_action+0x10e>
    3e80:	8b 3b       	cpi	r24, 0xBB	; 187
    3e82:	61 f1       	breq	.+88     	; 0x3edc <keycode_to_action+0x114>
    3e84:	8c 3b       	cpi	r24, 0xBC	; 188
    3e86:	61 f5       	brne	.+88     	; 0x3ee0 <keycode_to_action+0x118>
    3e88:	3a e2       	ldi	r19, 0x2A	; 42
    3e8a:	26 c0       	rjmp	.+76     	; 0x3ed8 <keycode_to_action+0x110>
    3e8c:	32 ee       	ldi	r19, 0xE2	; 226
    3e8e:	29 c0       	rjmp	.+82     	; 0x3ee2 <keycode_to_action+0x11a>
    3e90:	39 ee       	ldi	r19, 0xE9	; 233
    3e92:	27 c0       	rjmp	.+78     	; 0x3ee2 <keycode_to_action+0x11a>
    3e94:	3a ee       	ldi	r19, 0xEA	; 234
    3e96:	25 c0       	rjmp	.+74     	; 0x3ee2 <keycode_to_action+0x11a>
    3e98:	35 eb       	ldi	r19, 0xB5	; 181
    3e9a:	23 c0       	rjmp	.+70     	; 0x3ee2 <keycode_to_action+0x11a>
    3e9c:	36 eb       	ldi	r19, 0xB6	; 182
    3e9e:	21 c0       	rjmp	.+66     	; 0x3ee2 <keycode_to_action+0x11a>
    3ea0:	33 eb       	ldi	r19, 0xB3	; 179
    3ea2:	1f c0       	rjmp	.+62     	; 0x3ee2 <keycode_to_action+0x11a>
    3ea4:	34 eb       	ldi	r19, 0xB4	; 180
    3ea6:	1d c0       	rjmp	.+58     	; 0x3ee2 <keycode_to_action+0x11a>
    3ea8:	37 eb       	ldi	r19, 0xB7	; 183
    3eaa:	1b c0       	rjmp	.+54     	; 0x3ee2 <keycode_to_action+0x11a>
    3eac:	3c ec       	ldi	r19, 0xCC	; 204
    3eae:	19 c0       	rjmp	.+50     	; 0x3ee2 <keycode_to_action+0x11a>
    3eb0:	3d ec       	ldi	r19, 0xCD	; 205
    3eb2:	17 c0       	rjmp	.+46     	; 0x3ee2 <keycode_to_action+0x11a>
    3eb4:	33 e8       	ldi	r19, 0x83	; 131
    3eb6:	05 c0       	rjmp	.+10     	; 0x3ec2 <keycode_to_action+0xfa>
    3eb8:	3a e8       	ldi	r19, 0x8A	; 138
    3eba:	03 c0       	rjmp	.+6      	; 0x3ec2 <keycode_to_action+0xfa>
    3ebc:	32 e9       	ldi	r19, 0x92	; 146
    3ebe:	01 c0       	rjmp	.+2      	; 0x3ec2 <keycode_to_action+0xfa>
    3ec0:	34 e9       	ldi	r19, 0x94	; 148
    3ec2:	25 e4       	ldi	r18, 0x45	; 69
    3ec4:	0f c0       	rjmp	.+30     	; 0x3ee4 <keycode_to_action+0x11c>
    3ec6:	31 e2       	ldi	r19, 0x21	; 33
    3ec8:	07 c0       	rjmp	.+14     	; 0x3ed8 <keycode_to_action+0x110>
    3eca:	33 e2       	ldi	r19, 0x23	; 35
    3ecc:	05 c0       	rjmp	.+10     	; 0x3ed8 <keycode_to_action+0x110>
    3ece:	34 e2       	ldi	r19, 0x24	; 36
    3ed0:	03 c0       	rjmp	.+6      	; 0x3ed8 <keycode_to_action+0x110>
    3ed2:	35 e2       	ldi	r19, 0x25	; 37
    3ed4:	01 c0       	rjmp	.+2      	; 0x3ed8 <keycode_to_action+0x110>
    3ed6:	36 e2       	ldi	r19, 0x26	; 38
    3ed8:	26 e4       	ldi	r18, 0x46	; 70
    3eda:	04 c0       	rjmp	.+8      	; 0x3ee4 <keycode_to_action+0x11c>
    3edc:	37 e2       	ldi	r19, 0x27	; 39
    3ede:	fc cf       	rjmp	.-8      	; 0x3ed8 <keycode_to_action+0x110>
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	24 e4       	ldi	r18, 0x44	; 68
    3ee4:	83 2f       	mov	r24, r19
    3ee6:	92 2f       	mov	r25, r18
    3ee8:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3eee:	08 95       	ret

00003ef0 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	08 95       	ret

00003ef6 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3ef6:	08 95       	ret

00003ef8 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3ef8:	93 e1       	ldi	r25, 0x13	; 19
    3efa:	79 9f       	mul	r23, r25
    3efc:	f0 01       	movw	r30, r0
    3efe:	11 24       	eor	r1, r1
    3f00:	9f e5       	ldi	r25, 0x5F	; 95
    3f02:	89 9f       	mul	r24, r25
    3f04:	e0 0d       	add	r30, r0
    3f06:	f1 1d       	adc	r31, r1
    3f08:	11 24       	eor	r1, r1
    3f0a:	e6 0f       	add	r30, r22
    3f0c:	f1 1d       	adc	r31, r1
    3f0e:	ee 51       	subi	r30, 0x1E	; 30
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3f14:	08 95       	ret

00003f16 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3f16:	e8 2f       	mov	r30, r24
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	ee 0f       	add	r30, r30
    3f1c:	ff 1f       	adc	r31, r31
    3f1e:	e0 5a       	subi	r30, 0xA0	; 160
    3f20:	f0 40       	sbci	r31, 0x00	; 0
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3f22:	85 91       	lpm	r24, Z+
    3f24:	94 91       	lpm	r25, Z
    3f26:	08 95       	ret

00003f28 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3f28:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <keymap_key_to_keycode>
    switch (keycode) {
    3f2c:	80 3e       	cpi	r24, 0xE0	; 224
    3f2e:	a8 f4       	brcc	.+42     	; 0x3f5a <action_for_key+0x32>
    3f30:	80 3c       	cpi	r24, 0xC0	; 192
    3f32:	00 f5       	brcc	.+64     	; 0x3f74 <action_for_key+0x4c>
    3f34:	81 33       	cpi	r24, 0x31	; 49
    3f36:	09 f4       	brne	.+2      	; 0x3f3a <action_for_key+0x12>
    3f38:	5c c0       	rjmp	.+184    	; 0x3ff2 <action_for_key+0xca>
    3f3a:	38 f4       	brcc	.+14     	; 0x3f4a <action_for_key+0x22>
    3f3c:	89 32       	cpi	r24, 0x29	; 41
    3f3e:	09 f4       	brne	.+2      	; 0x3f42 <action_for_key+0x1a>
    3f40:	52 c0       	rjmp	.+164    	; 0x3fe6 <action_for_key+0xbe>
    3f42:	8a 32       	cpi	r24, 0x2A	; 42
    3f44:	09 f4       	brne	.+2      	; 0x3f48 <action_for_key+0x20>
    3f46:	5b c0       	rjmp	.+182    	; 0x3ffe <action_for_key+0xd6>
    3f48:	5f c0       	rjmp	.+190    	; 0x4008 <action_for_key+0xe0>
    3f4a:	89 33       	cpi	r24, 0x39	; 57
    3f4c:	b1 f0       	breq	.+44     	; 0x3f7a <action_for_key+0x52>
    3f4e:	82 38       	cpi	r24, 0x82	; 130
    3f50:	a1 f0       	breq	.+40     	; 0x3f7a <action_for_key+0x52>
    3f52:	85 33       	cpi	r24, 0x35	; 53
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <action_for_key+0x30>
    3f56:	41 c0       	rjmp	.+130    	; 0x3fda <action_for_key+0xb2>
    3f58:	57 c0       	rjmp	.+174    	; 0x4008 <action_for_key+0xe0>
    3f5a:	83 3e       	cpi	r24, 0xE3	; 227
    3f5c:	41 f1       	breq	.+80     	; 0x3fae <action_for_key+0x86>
    3f5e:	28 f4       	brcc	.+10     	; 0x3f6a <action_for_key+0x42>
    3f60:	80 3e       	cpi	r24, 0xE0	; 224
    3f62:	99 f0       	breq	.+38     	; 0x3f8a <action_for_key+0x62>
    3f64:	82 3e       	cpi	r24, 0xE2	; 226
    3f66:	b9 f0       	breq	.+46     	; 0x3f96 <action_for_key+0x6e>
    3f68:	4f c0       	rjmp	.+158    	; 0x4008 <action_for_key+0xe0>
    3f6a:	86 3e       	cpi	r24, 0xE6	; 230
    3f6c:	31 f1       	breq	.+76     	; 0x3fba <action_for_key+0x92>
    3f6e:	87 3e       	cpi	r24, 0xE7	; 231
    3f70:	71 f1       	breq	.+92     	; 0x3fce <action_for_key+0xa6>
    3f72:	4a c0       	rjmp	.+148    	; 0x4008 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3f74:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <keymap_fn_to_action>
    3f78:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3f7a:	90 91 4f 02 	lds	r25, 0x024F
    3f7e:	90 fd       	sbrc	r25, 0
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <action_for_key+0x5e>
    3f82:	91 ff       	sbrs	r25, 1
    3f84:	41 c0       	rjmp	.+130    	; 0x4008 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3f86:	80 ee       	ldi	r24, 0xE0	; 224
    3f88:	3f c0       	rjmp	.+126    	; 0x4008 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3f8a:	80 91 4f 02 	lds	r24, 0x024F
    3f8e:	80 ff       	sbrs	r24, 0
    3f90:	fa cf       	rjmp	.-12     	; 0x3f86 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3f92:	89 e3       	ldi	r24, 0x39	; 57
    3f94:	39 c0       	rjmp	.+114    	; 0x4008 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3f96:	80 91 4f 02 	lds	r24, 0x024F
    3f9a:	82 ff       	sbrs	r24, 2
    3f9c:	0c c0       	rjmp	.+24     	; 0x3fb6 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3f9e:	80 91 4f 02 	lds	r24, 0x024F
    3fa2:	84 ff       	sbrs	r24, 4
    3fa4:	02 c0       	rjmp	.+4      	; 0x3faa <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	2f c0       	rjmp	.+94     	; 0x4008 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3faa:	83 ee       	ldi	r24, 0xE3	; 227
    3fac:	2d c0       	rjmp	.+90     	; 0x4008 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3fae:	80 91 4f 02 	lds	r24, 0x024F
    3fb2:	82 ff       	sbrs	r24, 2
    3fb4:	f4 cf       	rjmp	.-24     	; 0x3f9e <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3fb6:	82 ee       	ldi	r24, 0xE2	; 226
    3fb8:	27 c0       	rjmp	.+78     	; 0x4008 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3fba:	80 91 4f 02 	lds	r24, 0x024F
    3fbe:	83 ff       	sbrs	r24, 3
    3fc0:	0a c0       	rjmp	.+20     	; 0x3fd6 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3fc2:	80 91 4f 02 	lds	r24, 0x024F
    3fc6:	84 fd       	sbrc	r24, 4
    3fc8:	ee cf       	rjmp	.-36     	; 0x3fa6 <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    3fca:	87 ee       	ldi	r24, 0xE7	; 231
    3fcc:	1d c0       	rjmp	.+58     	; 0x4008 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3fce:	80 91 4f 02 	lds	r24, 0x024F
    3fd2:	83 ff       	sbrs	r24, 3
    3fd4:	f6 cf       	rjmp	.-20     	; 0x3fc2 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3fd6:	86 ee       	ldi	r24, 0xE6	; 230
    3fd8:	17 c0       	rjmp	.+46     	; 0x4008 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3fda:	80 91 4f 02 	lds	r24, 0x024F
    3fde:	85 ff       	sbrs	r24, 5
    3fe0:	06 c0       	rjmp	.+12     	; 0x3fee <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3fe2:	89 e2       	ldi	r24, 0x29	; 41
    3fe4:	11 c0       	rjmp	.+34     	; 0x4008 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3fe6:	80 91 4f 02 	lds	r24, 0x024F
    3fea:	85 ff       	sbrs	r24, 5
    3fec:	fa cf       	rjmp	.-12     	; 0x3fe2 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3fee:	85 e3       	ldi	r24, 0x35	; 53
    3ff0:	0b c0       	rjmp	.+22     	; 0x4008 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3ff2:	80 91 4f 02 	lds	r24, 0x024F
    3ff6:	86 ff       	sbrs	r24, 6
    3ff8:	06 c0       	rjmp	.+12     	; 0x4006 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3ffa:	8a e2       	ldi	r24, 0x2A	; 42
    3ffc:	05 c0       	rjmp	.+10     	; 0x4008 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3ffe:	80 91 4f 02 	lds	r24, 0x024F
    4002:	86 ff       	sbrs	r24, 6
    4004:	fa cf       	rjmp	.-12     	; 0x3ffa <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    4006:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    4008:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <keycode_to_action>
    }
}
    400c:	08 95       	ret

0000400e <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    400e:	bf 92       	push	r11
    4010:	cf 92       	push	r12
    4012:	df 92       	push	r13
    4014:	ef 92       	push	r14
    4016:	ff 92       	push	r15
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	cf 93       	push	r28
    401e:	df 93       	push	r29
    4020:	ec 01       	movw	r28, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4022:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    4024:	8b 2d       	mov	r24, r11
    4026:	0e 94 8b 08 	call	0x1116	; 0x1116 <matrix_get_row>
    402a:	6b 01       	movw	r12, r22
    402c:	7c 01       	movw	r14, r24
    402e:	00 e0       	ldi	r16, 0x00	; 0
    4030:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4032:	b7 01       	movw	r22, r14
    4034:	a6 01       	movw	r20, r12
    4036:	00 2e       	mov	r0, r16
    4038:	04 c0       	rjmp	.+8      	; 0x4042 <scan_key+0x34>
    403a:	76 95       	lsr	r23
    403c:	67 95       	ror	r22
    403e:	57 95       	ror	r21
    4040:	47 95       	ror	r20
    4042:	0a 94       	dec	r0
    4044:	d2 f7       	brpl	.-12     	; 0x403a <scan_key+0x2c>
    4046:	40 ff       	sbrs	r20, 0
    4048:	16 c0       	rjmp	.+44     	; 0x4076 <scan_key+0x68>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    404a:	60 2f       	mov	r22, r16
    404c:	7b 2d       	mov	r23, r11
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <action_for_key>
                if (action.code == code ||
    4054:	8c 17       	cp	r24, r28
    4056:	9d 07       	cpc	r25, r29
    4058:	61 f0       	breq	.+24     	; 0x4072 <scan_key+0x64>
    405a:	29 2f       	mov	r18, r25
    405c:	20 7e       	andi	r18, 0xE0	; 224
    405e:	39 2f       	mov	r19, r25
    4060:	30 7c       	andi	r19, 0xC0	; 192
    4062:	11 f0       	breq	.+4      	; 0x4068 <scan_key+0x5a>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    4064:	20 3a       	cpi	r18, 0xA0	; 160
    4066:	39 f4       	brne	.+14     	; 0x4076 <scan_key+0x68>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    4068:	28 2f       	mov	r18, r24
    406a:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    406c:	2c 17       	cp	r18, r28
    406e:	3d 07       	cpc	r19, r29
    4070:	11 f4       	brne	.+4      	; 0x4076 <scan_key+0x68>
                     action.key.code == code)) {
                    return true;
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	0a c0       	rjmp	.+20     	; 0x408a <scan_key+0x7c>
    4076:	0f 5f       	subi	r16, 0xFF	; 255
    4078:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    407a:	03 31       	cpi	r16, 0x13	; 19
    407c:	11 05       	cpc	r17, r1
    407e:	c9 f6       	brne	.-78     	; 0x4032 <scan_key+0x24>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4080:	b3 94       	inc	r11
    4082:	85 e0       	ldi	r24, 0x05	; 5
    4084:	b8 12       	cpse	r11, r24
    4086:	ce cf       	rjmp	.-100    	; 0x4024 <scan_key+0x16>
                    return true;
                }
            }
        }
    }
    return false;
    4088:	80 e0       	ldi	r24, 0x00	; 0
}
    408a:	df 91       	pop	r29
    408c:	cf 91       	pop	r28
    408e:	1f 91       	pop	r17
    4090:	0f 91       	pop	r16
    4092:	ff 90       	pop	r15
    4094:	ef 90       	pop	r14
    4096:	df 90       	pop	r13
    4098:	cf 90       	pop	r12
    409a:	bf 90       	pop	r11
    409c:	08 95       	ret

0000409e <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    40a4:	8c e2       	ldi	r24, 0x2C	; 44
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 07 20 	call	0x400e	; 0x400e <scan_key>
    40ac:	88 23       	and	r24, r24
    40ae:	29 f0       	breq	.+10     	; 0x40ba <bootmagic_scan_key+0x1c>

    return scan_key(code);
    40b0:	ce 01       	movw	r24, r28
}
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    40b6:	0c 94 07 20 	jmp	0x400e	; 0x400e <scan_key>
}
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	08 95       	ret

000040c2 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    40c2:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    40c4:	0e 94 c0 21 	call	0x4380	; 0x4380 <eeconfig_is_enabled>
    40c8:	81 11       	cpse	r24, r1
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <bootmagic+0xe>
        eeconfig_init();
    40cc:	0e 94 a6 21 	call	0x434c	; 0x434c <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    40d0:	86 e4       	ldi	r24, 0x46	; 70
    40d2:	94 e0       	ldi	r25, 0x04	; 4
    40d4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    40d8:	c5 e6       	ldi	r28, 0x65	; 101
    40da:	c1 50       	subi	r28, 0x01	; 1
    40dc:	49 f0       	breq	.+18     	; 0x40f0 <bootmagic+0x2e>
    40de:	0e 94 20 07 	call	0xe40	; 0xe40 <matrix_scan>
    40e2:	8f e3       	ldi	r24, 0x3F	; 63
    40e4:	9c e9       	ldi	r25, 0x9C	; 156
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <bootmagic+0x24>
    40ea:	00 c0       	rjmp	.+0      	; 0x40ec <bootmagic+0x2a>
    40ec:	00 00       	nop
    40ee:	f5 cf       	rjmp	.-22     	; 0x40da <bootmagic+0x18>
    print("done.\n");
    40f0:	8f e3       	ldi	r24, 0x3F	; 63
    40f2:	94 e0       	ldi	r25, 0x04	; 4
    40f4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    40f8:	89 e2       	ldi	r24, 0x29	; 41
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4100:	81 11       	cpse	r24, r1
    4102:	22 c1       	rjmp	.+580    	; 0x4348 <bootmagic+0x286>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4104:	8a e2       	ldi	r24, 0x2A	; 42
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    410c:	81 11       	cpse	r24, r1
        eeconfig_init();
    410e:	0e 94 a6 21 	call	0x434c	; 0x434c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    4112:	85 e0       	ldi	r24, 0x05	; 5
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    411a:	81 11       	cpse	r24, r1
        bootloader_jump();
    411c:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    4120:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4124:	0e 94 cb 21 	call	0x4396	; 0x4396 <eeconfig_read_debug>
    4128:	80 93 31 02 	sts	0x0231, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    412c:	87 e0       	ldi	r24, 0x07	; 7
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4134:	88 23       	and	r24, r24
    4136:	b1 f1       	breq	.+108    	; 0x41a4 <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4138:	8b e1       	ldi	r24, 0x1B	; 27
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4140:	88 23       	and	r24, r24
    4142:	51 f0       	breq	.+20     	; 0x4158 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    4144:	90 91 31 02 	lds	r25, 0x0231
    4148:	91 fb       	bst	r25, 1
    414a:	88 27       	eor	r24, r24
    414c:	80 f9       	bld	r24, 0
    414e:	21 e0       	ldi	r18, 0x01	; 1
    4150:	82 27       	eor	r24, r18
    4152:	80 fb       	bst	r24, 0
    4154:	91 f9       	bld	r25, 1
    4156:	24 c0       	rjmp	.+72     	; 0x41a0 <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4158:	8e e0       	ldi	r24, 0x0E	; 14
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4160:	88 23       	and	r24, r24
    4162:	51 f0       	breq	.+20     	; 0x4178 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    4164:	90 91 31 02 	lds	r25, 0x0231
    4168:	92 fb       	bst	r25, 2
    416a:	88 27       	eor	r24, r24
    416c:	80 f9       	bld	r24, 0
    416e:	21 e0       	ldi	r18, 0x01	; 1
    4170:	82 27       	eor	r24, r18
    4172:	80 fb       	bst	r24, 0
    4174:	92 f9       	bld	r25, 2
    4176:	14 c0       	rjmp	.+40     	; 0x41a0 <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4178:	80 e1       	ldi	r24, 0x10	; 16
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4180:	90 91 31 02 	lds	r25, 0x0231
    4184:	88 23       	and	r24, r24
    4186:	41 f0       	breq	.+16     	; 0x4198 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    4188:	93 fb       	bst	r25, 3
    418a:	88 27       	eor	r24, r24
    418c:	80 f9       	bld	r24, 0
    418e:	21 e0       	ldi	r18, 0x01	; 1
    4190:	82 27       	eor	r24, r18
    4192:	80 fb       	bst	r24, 0
    4194:	93 f9       	bld	r25, 3
    4196:	04 c0       	rjmp	.+8      	; 0x41a0 <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    4198:	89 2f       	mov	r24, r25
    419a:	80 95       	com	r24
    419c:	80 fb       	bst	r24, 0
    419e:	90 f9       	bld	r25, 0
    41a0:	90 93 31 02 	sts	0x0231, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    41a4:	80 91 31 02 	lds	r24, 0x0231
    41a8:	0e 94 cf 21 	call	0x439e	; 0x439e <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    41ac:	0e 94 dd 21 	call	0x43ba	; 0x43ba <eeconfig_read_keymap>
    41b0:	80 93 4f 02 	sts	0x024F, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    41b4:	80 ee       	ldi	r24, 0xE0	; 224
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    41bc:	88 23       	and	r24, r24
    41be:	41 f0       	breq	.+16     	; 0x41d0 <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    41c0:	80 91 4f 02 	lds	r24, 0x024F
    41c4:	98 2f       	mov	r25, r24
    41c6:	90 95       	com	r25
    41c8:	90 fb       	bst	r25, 0
    41ca:	80 f9       	bld	r24, 0
    41cc:	80 93 4f 02 	sts	0x024F, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    41d0:	89 e3       	ldi	r24, 0x39	; 57
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    41d8:	88 23       	and	r24, r24
    41da:	59 f0       	breq	.+22     	; 0x41f2 <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    41dc:	90 91 4f 02 	lds	r25, 0x024F
    41e0:	91 fb       	bst	r25, 1
    41e2:	88 27       	eor	r24, r24
    41e4:	80 f9       	bld	r24, 0
    41e6:	21 e0       	ldi	r18, 0x01	; 1
    41e8:	82 27       	eor	r24, r18
    41ea:	80 fb       	bst	r24, 0
    41ec:	91 f9       	bld	r25, 1
    41ee:	90 93 4f 02 	sts	0x024F, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    41f2:	82 ee       	ldi	r24, 0xE2	; 226
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    41fa:	88 23       	and	r24, r24
    41fc:	59 f0       	breq	.+22     	; 0x4214 <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    41fe:	90 91 4f 02 	lds	r25, 0x024F
    4202:	92 fb       	bst	r25, 2
    4204:	88 27       	eor	r24, r24
    4206:	80 f9       	bld	r24, 0
    4208:	21 e0       	ldi	r18, 0x01	; 1
    420a:	82 27       	eor	r24, r18
    420c:	80 fb       	bst	r24, 0
    420e:	92 f9       	bld	r25, 2
    4210:	90 93 4f 02 	sts	0x024F, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4214:	86 ee       	ldi	r24, 0xE6	; 230
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    421c:	88 23       	and	r24, r24
    421e:	59 f0       	breq	.+22     	; 0x4236 <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4220:	90 91 4f 02 	lds	r25, 0x024F
    4224:	93 fb       	bst	r25, 3
    4226:	88 27       	eor	r24, r24
    4228:	80 f9       	bld	r24, 0
    422a:	21 e0       	ldi	r18, 0x01	; 1
    422c:	82 27       	eor	r24, r18
    422e:	80 fb       	bst	r24, 0
    4230:	93 f9       	bld	r25, 3
    4232:	90 93 4f 02 	sts	0x024F, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    4236:	83 ee       	ldi	r24, 0xE3	; 227
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    423e:	88 23       	and	r24, r24
    4240:	59 f0       	breq	.+22     	; 0x4258 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    4242:	90 91 4f 02 	lds	r25, 0x024F
    4246:	94 fb       	bst	r25, 4
    4248:	88 27       	eor	r24, r24
    424a:	80 f9       	bld	r24, 0
    424c:	21 e0       	ldi	r18, 0x01	; 1
    424e:	82 27       	eor	r24, r18
    4250:	80 fb       	bst	r24, 0
    4252:	94 f9       	bld	r25, 4
    4254:	90 93 4f 02 	sts	0x024F, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4258:	85 e3       	ldi	r24, 0x35	; 53
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4260:	88 23       	and	r24, r24
    4262:	59 f0       	breq	.+22     	; 0x427a <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4264:	90 91 4f 02 	lds	r25, 0x024F
    4268:	95 fb       	bst	r25, 5
    426a:	88 27       	eor	r24, r24
    426c:	80 f9       	bld	r24, 0
    426e:	21 e0       	ldi	r18, 0x01	; 1
    4270:	82 27       	eor	r24, r18
    4272:	80 fb       	bst	r24, 0
    4274:	95 f9       	bld	r25, 5
    4276:	90 93 4f 02 	sts	0x024F, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    427a:	81 e3       	ldi	r24, 0x31	; 49
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4282:	88 23       	and	r24, r24
    4284:	59 f0       	breq	.+22     	; 0x429c <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4286:	90 91 4f 02 	lds	r25, 0x024F
    428a:	96 fb       	bst	r25, 6
    428c:	88 27       	eor	r24, r24
    428e:	80 f9       	bld	r24, 0
    4290:	21 e0       	ldi	r18, 0x01	; 1
    4292:	82 27       	eor	r24, r18
    4294:	80 fb       	bst	r24, 0
    4296:	96 f9       	bld	r25, 6
    4298:	90 93 4f 02 	sts	0x024F, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    429c:	81 e1       	ldi	r24, 0x11	; 17
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    42a4:	88 23       	and	r24, r24
    42a6:	59 f0       	breq	.+22     	; 0x42be <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    42a8:	90 91 4f 02 	lds	r25, 0x024F
    42ac:	97 fb       	bst	r25, 7
    42ae:	88 27       	eor	r24, r24
    42b0:	80 f9       	bld	r24, 0
    42b2:	21 e0       	ldi	r18, 0x01	; 1
    42b4:	82 27       	eor	r24, r18
    42b6:	80 fb       	bst	r24, 0
    42b8:	97 f9       	bld	r25, 7
    42ba:	90 93 4f 02 	sts	0x024F, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    42be:	80 91 4f 02 	lds	r24, 0x024F
    42c2:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    42c6:	87 e2       	ldi	r24, 0x27	; 39
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    42ce:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    42d0:	8e e1       	ldi	r24, 0x1E	; 30
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    42d8:	81 11       	cpse	r24, r1
    42da:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    42dc:	8f e1       	ldi	r24, 0x1F	; 31
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    42e4:	81 11       	cpse	r24, r1
    42e6:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    42e8:	80 e2       	ldi	r24, 0x20	; 32
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    42f0:	81 11       	cpse	r24, r1
    42f2:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    42f4:	81 e2       	ldi	r24, 0x21	; 33
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    42fc:	81 11       	cpse	r24, r1
    42fe:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4300:	82 e2       	ldi	r24, 0x22	; 34
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4308:	81 11       	cpse	r24, r1
    430a:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    430c:	83 e2       	ldi	r24, 0x23	; 35
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4314:	81 11       	cpse	r24, r1
    4316:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4318:	84 e2       	ldi	r24, 0x24	; 36
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 4f 20 	call	0x409e	; 0x409e <bootmagic_scan_key>
    4320:	88 23       	and	r24, r24
    4322:	11 f0       	breq	.+4      	; 0x4328 <bootmagic+0x266>
    4324:	c0 68       	ori	r28, 0x80	; 128
    4326:	02 c0       	rjmp	.+4      	; 0x432c <bootmagic+0x26a>
    if (default_layer) {
    4328:	cc 23       	and	r28, r28
    432a:	29 f0       	breq	.+10     	; 0x4336 <bootmagic+0x274>
        eeconfig_write_default_layer(default_layer);
    432c:	8c 2f       	mov	r24, r28
    432e:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4332:	6c 2f       	mov	r22, r28
    4334:	03 c0       	rjmp	.+6      	; 0x433c <bootmagic+0x27a>
    } else {
        default_layer = eeconfig_read_default_layer();
    4336:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    433a:	68 2f       	mov	r22, r24
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4342:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4344:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <default_layer_set>
    }
}
    4348:	cf 91       	pop	r28
    434a:	08 95       	ret

0000434c <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    434c:	6d ee       	ldi	r22, 0xED	; 237
    434e:	7e ef       	ldi	r23, 0xFE	; 254
    4350:	80 e0       	ldi	r24, 0x00	; 0
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 01 2b 	call	0x5602	; 0x5602 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4358:	60 e0       	ldi	r22, 0x00	; 0
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	83 e0       	ldi	r24, 0x03	; 3
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	84 e0       	ldi	r24, 0x04	; 4
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	85 e0       	ldi	r24, 0x05	; 5
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <__eewr_byte_m32u4>

00004380 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	0e 94 ed 2a 	call	0x55da	; 0x55da <__eerd_word_m32u4>
    4388:	21 e0       	ldi	r18, 0x01	; 1
    438a:	8d 3e       	cpi	r24, 0xED	; 237
    438c:	9e 4f       	sbci	r25, 0xFE	; 254
    438e:	09 f0       	breq	.+2      	; 0x4392 <eeconfig_is_enabled+0x12>
    4390:	20 e0       	ldi	r18, 0x00	; 0
}
    4392:	82 2f       	mov	r24, r18
    4394:	08 95       	ret

00004396 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__eerd_byte_m32u4>

0000439e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    439e:	68 2f       	mov	r22, r24
    43a0:	82 e0       	ldi	r24, 0x02	; 2
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <__eewr_byte_m32u4>

000043a8 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    43a8:	83 e0       	ldi	r24, 0x03	; 3
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__eerd_byte_m32u4>

000043b0 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    43b0:	68 2f       	mov	r22, r24
    43b2:	83 e0       	ldi	r24, 0x03	; 3
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <__eewr_byte_m32u4>

000043ba <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    43ba:	84 e0       	ldi	r24, 0x04	; 4
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__eerd_byte_m32u4>

000043c2 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    43c2:	68 2f       	mov	r22, r24
    43c4:	84 e0       	ldi	r24, 0x04	; 4
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0c 94 f3 2a 	jmp	0x55e6	; 0x55e6 <__eewr_byte_m32u4>

000043cc <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    43cc:	80 91 39 02 	lds	r24, 0x0239
    43d0:	80 ff       	sbrs	r24, 0
    43d2:	0b c0       	rjmp	.+22     	; 0x43ea <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    43d4:	60 91 11 01 	lds	r22, 0x0111
    43d8:	85 e0       	ldi	r24, 0x05	; 5
    43da:	68 9f       	mul	r22, r24
    43dc:	b0 01       	movw	r22, r0
    43de:	11 24       	eor	r1, r1
    43e0:	75 95       	asr	r23
    43e2:	67 95       	ror	r22
    43e4:	75 95       	asr	r23
    43e6:	67 95       	ror	r22
    43e8:	2a c0       	rjmp	.+84     	; 0x443e <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    43ea:	81 ff       	sbrs	r24, 1
    43ec:	09 c0       	rjmp	.+18     	; 0x4400 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    43ee:	60 91 11 01 	lds	r22, 0x0111
    43f2:	85 e0       	ldi	r24, 0x05	; 5
    43f4:	68 9f       	mul	r22, r24
    43f6:	b0 01       	movw	r22, r0
    43f8:	11 24       	eor	r1, r1
    43fa:	75 95       	asr	r23
    43fc:	67 95       	ror	r22
    43fe:	1f c0       	rjmp	.+62     	; 0x443e <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4400:	82 ff       	sbrs	r24, 2
    4402:	07 c0       	rjmp	.+14     	; 0x4412 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4404:	60 91 11 01 	lds	r22, 0x0111
    4408:	85 e0       	ldi	r24, 0x05	; 5
    440a:	68 9f       	mul	r22, r24
    440c:	b0 01       	movw	r22, r0
    440e:	11 24       	eor	r1, r1
    4410:	16 c0       	rjmp	.+44     	; 0x443e <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4412:	40 91 3a 02 	lds	r20, 0x023A
    4416:	44 23       	and	r20, r20
    4418:	c9 f0       	breq	.+50     	; 0x444c <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    441a:	60 91 10 01 	lds	r22, 0x0110
    441e:	46 17       	cp	r20, r22
    4420:	88 f7       	brcc	.-30     	; 0x4404 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4422:	20 91 11 01 	lds	r18, 0x0111
    4426:	85 e0       	ldi	r24, 0x05	; 5
    4428:	28 9f       	mul	r18, r24
    442a:	90 01       	movw	r18, r0
    442c:	11 24       	eor	r1, r1
    442e:	42 9f       	mul	r20, r18
    4430:	c0 01       	movw	r24, r0
    4432:	43 9f       	mul	r20, r19
    4434:	90 0d       	add	r25, r0
    4436:	11 24       	eor	r1, r1
    4438:	70 e0       	ldi	r23, 0x00	; 0
    443a:	0e 94 b7 2a 	call	0x556e	; 0x556e <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    443e:	60 38       	cpi	r22, 0x80	; 128
    4440:	71 05       	cpc	r23, r1
    4442:	40 f4       	brcc	.+16     	; 0x4454 <move_unit+0x88>
    4444:	61 15       	cp	r22, r1
    4446:	71 05       	cpc	r23, r1
    4448:	39 f0       	breq	.+14     	; 0x4458 <move_unit+0x8c>
    444a:	02 c0       	rjmp	.+4      	; 0x4450 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    444c:	65 e0       	ldi	r22, 0x05	; 5
    444e:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4450:	86 2f       	mov	r24, r22
    4452:	08 95       	ret
    4454:	8f e7       	ldi	r24, 0x7F	; 127
    4456:	08 95       	ret
    4458:	81 e0       	ldi	r24, 0x01	; 1
}
    445a:	08 95       	ret

0000445c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    445c:	80 91 39 02 	lds	r24, 0x0239
    4460:	80 ff       	sbrs	r24, 0
    4462:	08 c0       	rjmp	.+16     	; 0x4474 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4464:	60 91 0f 01 	lds	r22, 0x010F
    4468:	70 e0       	ldi	r23, 0x00	; 0
    446a:	75 95       	asr	r23
    446c:	67 95       	ror	r22
    446e:	75 95       	asr	r23
    4470:	67 95       	ror	r22
    4472:	21 c0       	rjmp	.+66     	; 0x44b6 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4474:	81 ff       	sbrs	r24, 1
    4476:	06 c0       	rjmp	.+12     	; 0x4484 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4478:	60 91 0f 01 	lds	r22, 0x010F
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	75 95       	asr	r23
    4480:	67 95       	ror	r22
    4482:	19 c0       	rjmp	.+50     	; 0x44b6 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4484:	82 ff       	sbrs	r24, 2
    4486:	04 c0       	rjmp	.+8      	; 0x4490 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4488:	60 91 0f 01 	lds	r22, 0x010F
    448c:	70 e0       	ldi	r23, 0x00	; 0
    448e:	10 c0       	rjmp	.+32     	; 0x44b0 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4490:	80 91 3a 02 	lds	r24, 0x023A
    4494:	88 23       	and	r24, r24
    4496:	c1 f0       	breq	.+48     	; 0x44c8 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4498:	60 91 0e 01 	lds	r22, 0x010E
    449c:	86 17       	cp	r24, r22
    449e:	a0 f7       	brcc	.-24     	; 0x4488 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    44a0:	90 91 0f 01 	lds	r25, 0x010F
    44a4:	98 9f       	mul	r25, r24
    44a6:	c0 01       	movw	r24, r0
    44a8:	11 24       	eor	r1, r1
    44aa:	70 e0       	ldi	r23, 0x00	; 0
    44ac:	0e 94 b7 2a 	call	0x556e	; 0x556e <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    44b0:	60 38       	cpi	r22, 0x80	; 128
    44b2:	71 05       	cpc	r23, r1
    44b4:	28 f4       	brcc	.+10     	; 0x44c0 <wheel_unit+0x64>
    44b6:	61 15       	cp	r22, r1
    44b8:	71 05       	cpc	r23, r1
    44ba:	21 f0       	breq	.+8      	; 0x44c4 <wheel_unit+0x68>
    44bc:	86 2f       	mov	r24, r22
    44be:	08 95       	ret
    44c0:	8f e7       	ldi	r24, 0x7F	; 127
    44c2:	08 95       	ret
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    44c8:	61 e0       	ldi	r22, 0x01	; 1
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	f4 cf       	rjmp	.-24     	; 0x44b6 <wheel_unit+0x5a>

000044ce <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    44ce:	80 3f       	cpi	r24, 0xF0	; 240
    44d0:	21 f4       	brne	.+8      	; 0x44da <mousekey_on+0xc>
    44d2:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    44d6:	81 95       	neg	r24
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    44da:	81 3f       	cpi	r24, 0xF1	; 241
    44dc:	29 f4       	brne	.+10     	; 0x44e8 <mousekey_on+0x1a>
    44de:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    44e2:	80 93 3d 02 	sts	0x023D, r24
    44e6:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    44e8:	82 3f       	cpi	r24, 0xF2	; 242
    44ea:	21 f4       	brne	.+8      	; 0x44f4 <mousekey_on+0x26>
    44ec:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    44f0:	81 95       	neg	r24
    44f2:	04 c0       	rjmp	.+8      	; 0x44fc <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    44f4:	83 3f       	cpi	r24, 0xF3	; 243
    44f6:	29 f4       	brne	.+10     	; 0x4502 <mousekey_on+0x34>
    44f8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    44fc:	80 93 3c 02 	sts	0x023C, r24
    4500:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4502:	89 3f       	cpi	r24, 0xF9	; 249
    4504:	19 f4       	brne	.+6      	; 0x450c <mousekey_on+0x3e>
    4506:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    450a:	05 c0       	rjmp	.+10     	; 0x4516 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    450c:	8a 3f       	cpi	r24, 0xFA	; 250
    450e:	31 f4       	brne	.+12     	; 0x451c <mousekey_on+0x4e>
    4510:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    4514:	81 95       	neg	r24
    4516:	80 93 3e 02 	sts	0x023E, r24
    451a:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    451c:	8b 3f       	cpi	r24, 0xFB	; 251
    451e:	21 f4       	brne	.+8      	; 0x4528 <mousekey_on+0x5a>
    4520:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    4524:	81 95       	neg	r24
    4526:	04 c0       	rjmp	.+8      	; 0x4530 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4528:	8c 3f       	cpi	r24, 0xFC	; 252
    452a:	29 f4       	brne	.+10     	; 0x4536 <mousekey_on+0x68>
    452c:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    4530:	80 93 3f 02 	sts	0x023F, r24
    4534:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4536:	84 3f       	cpi	r24, 0xF4	; 244
    4538:	21 f4       	brne	.+8      	; 0x4542 <mousekey_on+0x74>
    453a:	80 91 3b 02 	lds	r24, 0x023B
    453e:	81 60       	ori	r24, 0x01	; 1
    4540:	17 c0       	rjmp	.+46     	; 0x4570 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4542:	85 3f       	cpi	r24, 0xF5	; 245
    4544:	21 f4       	brne	.+8      	; 0x454e <mousekey_on+0x80>
    4546:	80 91 3b 02 	lds	r24, 0x023B
    454a:	82 60       	ori	r24, 0x02	; 2
    454c:	11 c0       	rjmp	.+34     	; 0x4570 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    454e:	86 3f       	cpi	r24, 0xF6	; 246
    4550:	21 f4       	brne	.+8      	; 0x455a <mousekey_on+0x8c>
    4552:	80 91 3b 02 	lds	r24, 0x023B
    4556:	84 60       	ori	r24, 0x04	; 4
    4558:	0b c0       	rjmp	.+22     	; 0x4570 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    455a:	87 3f       	cpi	r24, 0xF7	; 247
    455c:	21 f4       	brne	.+8      	; 0x4566 <mousekey_on+0x98>
    455e:	80 91 3b 02 	lds	r24, 0x023B
    4562:	88 60       	ori	r24, 0x08	; 8
    4564:	05 c0       	rjmp	.+10     	; 0x4570 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4566:	88 3f       	cpi	r24, 0xF8	; 248
    4568:	31 f4       	brne	.+12     	; 0x4576 <mousekey_on+0xa8>
    456a:	80 91 3b 02 	lds	r24, 0x023B
    456e:	80 61       	ori	r24, 0x10	; 16
    4570:	80 93 3b 02 	sts	0x023B, r24
    4574:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4576:	8d 3f       	cpi	r24, 0xFD	; 253
    4578:	21 f4       	brne	.+8      	; 0x4582 <mousekey_on+0xb4>
    457a:	80 91 39 02 	lds	r24, 0x0239
    457e:	81 60       	ori	r24, 0x01	; 1
    4580:	0b c0       	rjmp	.+22     	; 0x4598 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4582:	8e 3f       	cpi	r24, 0xFE	; 254
    4584:	21 f4       	brne	.+8      	; 0x458e <mousekey_on+0xc0>
    4586:	80 91 39 02 	lds	r24, 0x0239
    458a:	82 60       	ori	r24, 0x02	; 2
    458c:	05 c0       	rjmp	.+10     	; 0x4598 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    458e:	8f 3f       	cpi	r24, 0xFF	; 255
    4590:	29 f4       	brne	.+10     	; 0x459c <mousekey_on+0xce>
    4592:	80 91 39 02 	lds	r24, 0x0239
    4596:	84 60       	ori	r24, 0x04	; 4
    4598:	80 93 39 02 	sts	0x0239, r24
    459c:	08 95       	ret

0000459e <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    459e:	80 3f       	cpi	r24, 0xF0	; 240
    45a0:	39 f4       	brne	.+14     	; 0x45b0 <mousekey_off+0x12>
    45a2:	80 91 3d 02 	lds	r24, 0x023D
    45a6:	87 ff       	sbrs	r24, 7
    45a8:	6c c0       	rjmp	.+216    	; 0x4682 <mousekey_off+0xe4>
    45aa:	10 92 3d 02 	sts	0x023D, r1
    45ae:	69 c0       	rjmp	.+210    	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    45b0:	81 3f       	cpi	r24, 0xF1	; 241
    45b2:	29 f4       	brne	.+10     	; 0x45be <mousekey_off+0x20>
    45b4:	80 91 3d 02 	lds	r24, 0x023D
    45b8:	18 16       	cp	r1, r24
    45ba:	bc f3       	brlt	.-18     	; 0x45aa <mousekey_off+0xc>
    45bc:	62 c0       	rjmp	.+196    	; 0x4682 <mousekey_off+0xe4>
    45be:	90 91 3c 02 	lds	r25, 0x023C
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    45c2:	82 3f       	cpi	r24, 0xF2	; 242
    45c4:	29 f4       	brne	.+10     	; 0x45d0 <mousekey_off+0x32>
    45c6:	97 ff       	sbrs	r25, 7
    45c8:	5c c0       	rjmp	.+184    	; 0x4682 <mousekey_off+0xe4>
    45ca:	10 92 3c 02 	sts	0x023C, r1
    45ce:	59 c0       	rjmp	.+178    	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    45d0:	83 3f       	cpi	r24, 0xF3	; 243
    45d2:	19 f4       	brne	.+6      	; 0x45da <mousekey_off+0x3c>
    45d4:	19 16       	cp	r1, r25
    45d6:	cc f3       	brlt	.-14     	; 0x45ca <mousekey_off+0x2c>
    45d8:	54 c0       	rjmp	.+168    	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    45da:	89 3f       	cpi	r24, 0xF9	; 249
    45dc:	41 f4       	brne	.+16     	; 0x45ee <mousekey_off+0x50>
    45de:	80 91 3e 02 	lds	r24, 0x023E
    45e2:	18 16       	cp	r1, r24
    45e4:	0c f0       	brlt	.+2      	; 0x45e8 <mousekey_off+0x4a>
    45e6:	4d c0       	rjmp	.+154    	; 0x4682 <mousekey_off+0xe4>
    45e8:	10 92 3e 02 	sts	0x023E, r1
    45ec:	4a c0       	rjmp	.+148    	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    45ee:	8a 3f       	cpi	r24, 0xFA	; 250
    45f0:	29 f4       	brne	.+10     	; 0x45fc <mousekey_off+0x5e>
    45f2:	80 91 3e 02 	lds	r24, 0x023E
    45f6:	87 ff       	sbrs	r24, 7
    45f8:	44 c0       	rjmp	.+136    	; 0x4682 <mousekey_off+0xe4>
    45fa:	f6 cf       	rjmp	.-20     	; 0x45e8 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    45fc:	8b 3f       	cpi	r24, 0xFB	; 251
    45fe:	39 f4       	brne	.+14     	; 0x460e <mousekey_off+0x70>
    4600:	80 91 3f 02 	lds	r24, 0x023F
    4604:	87 ff       	sbrs	r24, 7
    4606:	3d c0       	rjmp	.+122    	; 0x4682 <mousekey_off+0xe4>
    4608:	10 92 3f 02 	sts	0x023F, r1
    460c:	3a c0       	rjmp	.+116    	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    460e:	8c 3f       	cpi	r24, 0xFC	; 252
    4610:	29 f4       	brne	.+10     	; 0x461c <mousekey_off+0x7e>
    4612:	80 91 3f 02 	lds	r24, 0x023F
    4616:	18 16       	cp	r1, r24
    4618:	bc f3       	brlt	.-18     	; 0x4608 <mousekey_off+0x6a>
    461a:	33 c0       	rjmp	.+102    	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    461c:	84 3f       	cpi	r24, 0xF4	; 244
    461e:	21 f4       	brne	.+8      	; 0x4628 <mousekey_off+0x8a>
    4620:	80 91 3b 02 	lds	r24, 0x023B
    4624:	8e 7f       	andi	r24, 0xFE	; 254
    4626:	17 c0       	rjmp	.+46     	; 0x4656 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4628:	85 3f       	cpi	r24, 0xF5	; 245
    462a:	21 f4       	brne	.+8      	; 0x4634 <mousekey_off+0x96>
    462c:	80 91 3b 02 	lds	r24, 0x023B
    4630:	8d 7f       	andi	r24, 0xFD	; 253
    4632:	11 c0       	rjmp	.+34     	; 0x4656 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4634:	86 3f       	cpi	r24, 0xF6	; 246
    4636:	21 f4       	brne	.+8      	; 0x4640 <mousekey_off+0xa2>
    4638:	80 91 3b 02 	lds	r24, 0x023B
    463c:	8b 7f       	andi	r24, 0xFB	; 251
    463e:	0b c0       	rjmp	.+22     	; 0x4656 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4640:	87 3f       	cpi	r24, 0xF7	; 247
    4642:	21 f4       	brne	.+8      	; 0x464c <mousekey_off+0xae>
    4644:	80 91 3b 02 	lds	r24, 0x023B
    4648:	87 7f       	andi	r24, 0xF7	; 247
    464a:	05 c0       	rjmp	.+10     	; 0x4656 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    464c:	88 3f       	cpi	r24, 0xF8	; 248
    464e:	31 f4       	brne	.+12     	; 0x465c <mousekey_off+0xbe>
    4650:	80 91 3b 02 	lds	r24, 0x023B
    4654:	8f 7e       	andi	r24, 0xEF	; 239
    4656:	80 93 3b 02 	sts	0x023B, r24
    465a:	13 c0       	rjmp	.+38     	; 0x4682 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    465c:	8d 3f       	cpi	r24, 0xFD	; 253
    465e:	21 f4       	brne	.+8      	; 0x4668 <mousekey_off+0xca>
    4660:	80 91 39 02 	lds	r24, 0x0239
    4664:	8e 7f       	andi	r24, 0xFE	; 254
    4666:	0b c0       	rjmp	.+22     	; 0x467e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4668:	8e 3f       	cpi	r24, 0xFE	; 254
    466a:	21 f4       	brne	.+8      	; 0x4674 <mousekey_off+0xd6>
    466c:	80 91 39 02 	lds	r24, 0x0239
    4670:	8d 7f       	andi	r24, 0xFD	; 253
    4672:	05 c0       	rjmp	.+10     	; 0x467e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4674:	8f 3f       	cpi	r24, 0xFF	; 255
    4676:	29 f4       	brne	.+10     	; 0x4682 <mousekey_off+0xe4>
    4678:	80 91 39 02 	lds	r24, 0x0239
    467c:	8b 7f       	andi	r24, 0xFB	; 251
    467e:	80 93 39 02 	sts	0x0239, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4682:	80 91 3c 02 	lds	r24, 0x023C
    4686:	81 11       	cpse	r24, r1
    4688:	0e c0       	rjmp	.+28     	; 0x46a6 <mousekey_off+0x108>
    468a:	80 91 3d 02 	lds	r24, 0x023D
    468e:	81 11       	cpse	r24, r1
    4690:	0a c0       	rjmp	.+20     	; 0x46a6 <mousekey_off+0x108>
    4692:	80 91 3e 02 	lds	r24, 0x023E
    4696:	81 11       	cpse	r24, r1
    4698:	06 c0       	rjmp	.+12     	; 0x46a6 <mousekey_off+0x108>
    469a:	80 91 3f 02 	lds	r24, 0x023F
    469e:	81 11       	cpse	r24, r1
    46a0:	02 c0       	rjmp	.+4      	; 0x46a6 <mousekey_off+0x108>
        mousekey_repeat = 0;
    46a2:	10 92 3a 02 	sts	0x023A, r1
    46a6:	08 95       	ret

000046a8 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    46a8:	80 91 31 02 	lds	r24, 0x0231
    46ac:	83 ff       	sbrs	r24, 3
    46ae:	7e c0       	rjmp	.+252    	; 0x47ac <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    46b0:	82 e8       	ldi	r24, 0x82	; 130
    46b2:	94 e0       	ldi	r25, 0x04	; 4
    46b4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    phex(mouse_report.buttons); print("|");
    46b8:	80 91 3b 02 	lds	r24, 0x023B
    46bc:	1f 92       	push	r1
    46be:	8f 93       	push	r24
    46c0:	8d e7       	ldi	r24, 0x7D	; 125
    46c2:	94 e0       	ldi	r25, 0x04	; 4
    46c4:	9f 93       	push	r25
    46c6:	8f 93       	push	r24
    46c8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    46cc:	8b e7       	ldi	r24, 0x7B	; 123
    46ce:	94 e0       	ldi	r25, 0x04	; 4
    46d0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print_decs(mouse_report.x); print(" ");
    46d4:	20 91 3c 02 	lds	r18, 0x023C
    46d8:	82 2f       	mov	r24, r18
    46da:	99 27       	eor	r25, r25
    46dc:	87 fd       	sbrc	r24, 7
    46de:	90 95       	com	r25
    46e0:	9f 93       	push	r25
    46e2:	2f 93       	push	r18
    46e4:	88 e7       	ldi	r24, 0x78	; 120
    46e6:	94 e0       	ldi	r25, 0x04	; 4
    46e8:	9f 93       	push	r25
    46ea:	8f 93       	push	r24
    46ec:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    46f0:	86 e7       	ldi	r24, 0x76	; 118
    46f2:	94 e0       	ldi	r25, 0x04	; 4
    46f4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print_decs(mouse_report.y); print(" ");
    46f8:	20 91 3d 02 	lds	r18, 0x023D
    46fc:	82 2f       	mov	r24, r18
    46fe:	99 27       	eor	r25, r25
    4700:	87 fd       	sbrc	r24, 7
    4702:	90 95       	com	r25
    4704:	9f 93       	push	r25
    4706:	2f 93       	push	r18
    4708:	83 e7       	ldi	r24, 0x73	; 115
    470a:	94 e0       	ldi	r25, 0x04	; 4
    470c:	9f 93       	push	r25
    470e:	8f 93       	push	r24
    4710:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4714:	81 e7       	ldi	r24, 0x71	; 113
    4716:	94 e0       	ldi	r25, 0x04	; 4
    4718:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print_decs(mouse_report.v); print(" ");
    471c:	20 91 3e 02 	lds	r18, 0x023E
    4720:	82 2f       	mov	r24, r18
    4722:	99 27       	eor	r25, r25
    4724:	87 fd       	sbrc	r24, 7
    4726:	90 95       	com	r25
    4728:	9f 93       	push	r25
    472a:	2f 93       	push	r18
    472c:	8e e6       	ldi	r24, 0x6E	; 110
    472e:	94 e0       	ldi	r25, 0x04	; 4
    4730:	9f 93       	push	r25
    4732:	8f 93       	push	r24
    4734:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4738:	8c e6       	ldi	r24, 0x6C	; 108
    473a:	94 e0       	ldi	r25, 0x04	; 4
    473c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print_decs(mouse_report.h); print("](");
    4740:	20 91 3f 02 	lds	r18, 0x023F
    4744:	82 2f       	mov	r24, r18
    4746:	99 27       	eor	r25, r25
    4748:	87 fd       	sbrc	r24, 7
    474a:	90 95       	com	r25
    474c:	9f 93       	push	r25
    474e:	2f 93       	push	r18
    4750:	89 e6       	ldi	r24, 0x69	; 105
    4752:	94 e0       	ldi	r25, 0x04	; 4
    4754:	9f 93       	push	r25
    4756:	8f 93       	push	r24
    4758:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    475c:	86 e6       	ldi	r24, 0x66	; 102
    475e:	94 e0       	ldi	r25, 0x04	; 4
    4760:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print_dec(mousekey_repeat); print("/");
    4764:	80 91 3a 02 	lds	r24, 0x023A
    4768:	1f 92       	push	r1
    476a:	8f 93       	push	r24
    476c:	83 e6       	ldi	r24, 0x63	; 99
    476e:	94 e0       	ldi	r25, 0x04	; 4
    4770:	9f 93       	push	r25
    4772:	8f 93       	push	r24
    4774:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4778:	81 e6       	ldi	r24, 0x61	; 97
    477a:	94 e0       	ldi	r25, 0x04	; 4
    477c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4780:	80 91 39 02 	lds	r24, 0x0239
    4784:	1f 92       	push	r1
    4786:	8f 93       	push	r24
    4788:	8e e5       	ldi	r24, 0x5E	; 94
    478a:	94 e0       	ldi	r25, 0x04	; 4
    478c:	9f 93       	push	r25
    478e:	8f 93       	push	r24
    4790:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4794:	8b e5       	ldi	r24, 0x5B	; 91
    4796:	94 e0       	ldi	r25, 0x04	; 4
    4798:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    479c:	8d b7       	in	r24, 0x3d	; 61
    479e:	9e b7       	in	r25, 0x3e	; 62
    47a0:	4c 96       	adiw	r24, 0x1c	; 28
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	9e bf       	out	0x3e, r25	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    47ac:	8b e3       	ldi	r24, 0x3B	; 59
    47ae:	92 e0       	ldi	r25, 0x02	; 2
    47b0:	0e 94 85 10 	call	0x210a	; 0x210a <host_mouse_send>
    last_timer = timer_read();
    47b4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <timer_read>
    47b8:	90 93 38 02 	sts	0x0238, r25
    47bc:	80 93 37 02 	sts	0x0237, r24
    47c0:	08 95       	ret

000047c2 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    47c8:	80 91 37 02 	lds	r24, 0x0237
    47cc:	90 91 38 02 	lds	r25, 0x0238
    47d0:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <timer_elapsed>
    47d4:	40 91 3a 02 	lds	r20, 0x023A
    47d8:	44 23       	and	r20, r20
    47da:	21 f0       	breq	.+8      	; 0x47e4 <mousekey_task+0x22>
    47dc:	20 91 12 01 	lds	r18, 0x0112
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	06 c0       	rjmp	.+12     	; 0x47f0 <mousekey_task+0x2e>
    47e4:	20 91 13 01 	lds	r18, 0x0113
    47e8:	5a e0       	ldi	r21, 0x0A	; 10
    47ea:	25 9f       	mul	r18, r21
    47ec:	90 01       	movw	r18, r0
    47ee:	11 24       	eor	r1, r1
    47f0:	82 17       	cp	r24, r18
    47f2:	93 07       	cpc	r25, r19
    47f4:	08 f4       	brcc	.+2      	; 0x47f8 <mousekey_task+0x36>
    47f6:	82 c0       	rjmp	.+260    	; 0x48fc <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    47f8:	80 91 3c 02 	lds	r24, 0x023C
    47fc:	10 91 3d 02 	lds	r17, 0x023D
    4800:	d0 91 3e 02 	lds	r29, 0x023E
    4804:	c0 91 3f 02 	lds	r28, 0x023F
    4808:	81 11       	cpse	r24, r1
    480a:	07 c0       	rjmp	.+14     	; 0x481a <mousekey_task+0x58>
    480c:	11 11       	cpse	r17, r1
    480e:	05 c0       	rjmp	.+10     	; 0x481a <mousekey_task+0x58>
    4810:	d1 11       	cpse	r29, r1
    4812:	03 c0       	rjmp	.+6      	; 0x481a <mousekey_task+0x58>
    4814:	cc 23       	and	r28, r28
    4816:	09 f4       	brne	.+2      	; 0x481a <mousekey_task+0x58>
    4818:	71 c0       	rjmp	.+226    	; 0x48fc <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    481a:	4f 3f       	cpi	r20, 0xFF	; 255
    481c:	19 f0       	breq	.+6      	; 0x4824 <mousekey_task+0x62>
        mousekey_repeat++;
    481e:	4f 5f       	subi	r20, 0xFF	; 255
    4820:	40 93 3a 02 	sts	0x023A, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4824:	18 16       	cp	r1, r24
    4826:	24 f4       	brge	.+8      	; 0x4830 <mousekey_task+0x6e>
    4828:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    482c:	80 93 3c 02 	sts	0x023C, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4830:	80 91 3c 02 	lds	r24, 0x023C
    4834:	87 ff       	sbrs	r24, 7
    4836:	05 c0       	rjmp	.+10     	; 0x4842 <mousekey_task+0x80>
    4838:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    483c:	81 95       	neg	r24
    483e:	80 93 3c 02 	sts	0x023C, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4842:	11 16       	cp	r1, r17
    4844:	24 f4       	brge	.+8      	; 0x484e <mousekey_task+0x8c>
    4846:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    484a:	80 93 3d 02 	sts	0x023D, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    484e:	80 91 3d 02 	lds	r24, 0x023D
    4852:	87 ff       	sbrs	r24, 7
    4854:	05 c0       	rjmp	.+10     	; 0x4860 <mousekey_task+0x9e>
    4856:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    485a:	81 95       	neg	r24
    485c:	80 93 3d 02 	sts	0x023D, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4860:	60 91 3c 02 	lds	r22, 0x023C
    4864:	66 23       	and	r22, r22
    4866:	39 f1       	breq	.+78     	; 0x48b6 <mousekey_task+0xf4>
    4868:	10 91 3d 02 	lds	r17, 0x023D
    486c:	11 23       	and	r17, r17
    486e:	19 f1       	breq	.+70     	; 0x48b6 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4870:	77 27       	eor	r23, r23
    4872:	67 fd       	sbrc	r22, 7
    4874:	70 95       	com	r23
    4876:	87 2f       	mov	r24, r23
    4878:	97 2f       	mov	r25, r23
    487a:	0e 94 bc 29 	call	0x5378	; 0x5378 <__floatsisf>
    487e:	23 e3       	ldi	r18, 0x33	; 51
    4880:	33 e3       	ldi	r19, 0x33	; 51
    4882:	43 e3       	ldi	r20, 0x33	; 51
    4884:	5f e3       	ldi	r21, 0x3F	; 63
    4886:	0e 94 20 2a 	call	0x5440	; 0x5440 <__mulsf3>
    488a:	0e 94 89 29 	call	0x5312	; 0x5312 <__fixsfsi>
    488e:	60 93 3c 02 	sts	0x023C, r22
        mouse_report.y *= 0.7;
    4892:	61 2f       	mov	r22, r17
    4894:	77 27       	eor	r23, r23
    4896:	67 fd       	sbrc	r22, 7
    4898:	70 95       	com	r23
    489a:	87 2f       	mov	r24, r23
    489c:	97 2f       	mov	r25, r23
    489e:	0e 94 bc 29 	call	0x5378	; 0x5378 <__floatsisf>
    48a2:	23 e3       	ldi	r18, 0x33	; 51
    48a4:	33 e3       	ldi	r19, 0x33	; 51
    48a6:	43 e3       	ldi	r20, 0x33	; 51
    48a8:	5f e3       	ldi	r21, 0x3F	; 63
    48aa:	0e 94 20 2a 	call	0x5440	; 0x5440 <__mulsf3>
    48ae:	0e 94 89 29 	call	0x5312	; 0x5312 <__fixsfsi>
    48b2:	60 93 3d 02 	sts	0x023D, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    48b6:	1d 16       	cp	r1, r29
    48b8:	24 f4       	brge	.+8      	; 0x48c2 <mousekey_task+0x100>
    48ba:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    48be:	80 93 3e 02 	sts	0x023E, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    48c2:	80 91 3e 02 	lds	r24, 0x023E
    48c6:	87 ff       	sbrs	r24, 7
    48c8:	05 c0       	rjmp	.+10     	; 0x48d4 <mousekey_task+0x112>
    48ca:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    48ce:	81 95       	neg	r24
    48d0:	80 93 3e 02 	sts	0x023E, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    48d4:	1c 16       	cp	r1, r28
    48d6:	24 f4       	brge	.+8      	; 0x48e0 <mousekey_task+0x11e>
    48d8:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    48dc:	80 93 3f 02 	sts	0x023F, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    48e0:	80 91 3f 02 	lds	r24, 0x023F
    48e4:	87 ff       	sbrs	r24, 7
    48e6:	05 c0       	rjmp	.+10     	; 0x48f2 <mousekey_task+0x130>
    48e8:	0e 94 2e 22 	call	0x445c	; 0x445c <wheel_unit>
    48ec:	81 95       	neg	r24
    48ee:	80 93 3f 02 	sts	0x023F, r24

    mousekey_send();
}
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    48f8:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <mousekey_send>
}
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	1f 91       	pop	r17
    4902:	08 95       	ret

00004904 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4904:	eb e3       	ldi	r30, 0x3B	; 59
    4906:	f2 e0       	ldi	r31, 0x02	; 2
    4908:	85 e0       	ldi	r24, 0x05	; 5
    490a:	df 01       	movw	r26, r30
    490c:	1d 92       	st	X+, r1
    490e:	8a 95       	dec	r24
    4910:	e9 f7       	brne	.-6      	; 0x490c <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4912:	10 92 3a 02 	sts	0x023A, r1
    mousekey_accel = 0;
    4916:	10 92 39 02 	sts	0x0239, r1
    491a:	08 95       	ret

0000491c <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    491c:	85 ea       	ldi	r24, 0xA5	; 165
    491e:	96 e0       	ldi	r25, 0x06	; 6
    4920:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4924:	1f 92       	push	r1
    4926:	81 e0       	ldi	r24, 0x01	; 1
    4928:	8f 93       	push	r24
    492a:	1f 92       	push	r1
    492c:	85 e0       	ldi	r24, 0x05	; 5
    492e:	8f 93       	push	r24
    4930:	87 e5       	ldi	r24, 0x57	; 87
    4932:	96 e0       	ldi	r25, 0x06	; 6
    4934:	9f 93       	push	r25
    4936:	8f 93       	push	r24
    4938:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    493c:	0f 90       	pop	r0
    493e:	0f 90       	pop	r0
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	08 95       	ret

0000494a <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    494a:	83 30       	cpi	r24, 0x03	; 3
    494c:	e9 f1       	breq	.+122    	; 0x49c8 <mousekey_param_inc+0x7e>
    494e:	28 f4       	brcc	.+10     	; 0x495a <mousekey_param_inc+0x10>
    4950:	81 30       	cpi	r24, 0x01	; 1
    4952:	61 f0       	breq	.+24     	; 0x496c <mousekey_param_inc+0x22>
    4954:	82 30       	cpi	r24, 0x02	; 2
    4956:	09 f1       	breq	.+66     	; 0x499a <mousekey_param_inc+0x50>
    4958:	08 95       	ret
    495a:	85 30       	cpi	r24, 0x05	; 5
    495c:	09 f4       	brne	.+2      	; 0x4960 <mousekey_param_inc+0x16>
    495e:	62 c0       	rjmp	.+196    	; 0x4a24 <mousekey_param_inc+0xda>
    4960:	08 f4       	brcc	.+2      	; 0x4964 <mousekey_param_inc+0x1a>
    4962:	49 c0       	rjmp	.+146    	; 0x49f6 <mousekey_param_inc+0xac>
    4964:	86 30       	cpi	r24, 0x06	; 6
    4966:	09 f4       	brne	.+2      	; 0x496a <mousekey_param_inc+0x20>
    4968:	74 c0       	rjmp	.+232    	; 0x4a52 <mousekey_param_inc+0x108>
    496a:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    496c:	20 91 13 01 	lds	r18, 0x0113
    4970:	86 2f       	mov	r24, r22
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	82 0f       	add	r24, r18
    4976:	91 1d       	adc	r25, r1
    4978:	8f 3f       	cpi	r24, 0xFF	; 255
    497a:	91 05       	cpc	r25, r1
    497c:	20 f4       	brcc	.+8      	; 0x4986 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    497e:	62 0f       	add	r22, r18
    4980:	60 93 13 01 	sts	0x0113, r22
    4984:	03 c0       	rjmp	.+6      	; 0x498c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4986:	8f ef       	ldi	r24, 0xFF	; 255
    4988:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    498c:	80 91 13 01 	lds	r24, 0x0113
    4990:	1f 92       	push	r1
    4992:	8f 93       	push	r24
    4994:	80 e9       	ldi	r24, 0x90	; 144
    4996:	95 e0       	ldi	r25, 0x05	; 5
    4998:	72 c0       	rjmp	.+228    	; 0x4a7e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    499a:	20 91 12 01 	lds	r18, 0x0112
    499e:	86 2f       	mov	r24, r22
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	82 0f       	add	r24, r18
    49a4:	91 1d       	adc	r25, r1
    49a6:	8f 3f       	cpi	r24, 0xFF	; 255
    49a8:	91 05       	cpc	r25, r1
    49aa:	20 f4       	brcc	.+8      	; 0x49b4 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    49ac:	62 0f       	add	r22, r18
    49ae:	60 93 12 01 	sts	0x0112, r22
    49b2:	03 c0       	rjmp	.+6      	; 0x49ba <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    49b4:	8f ef       	ldi	r24, 0xFF	; 255
    49b6:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    49ba:	80 91 12 01 	lds	r24, 0x0112
    49be:	1f 92       	push	r1
    49c0:	8f 93       	push	r24
    49c2:	8e e7       	ldi	r24, 0x7E	; 126
    49c4:	95 e0       	ldi	r25, 0x05	; 5
    49c6:	5b c0       	rjmp	.+182    	; 0x4a7e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    49c8:	20 91 11 01 	lds	r18, 0x0111
    49cc:	86 2f       	mov	r24, r22
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	82 0f       	add	r24, r18
    49d2:	91 1d       	adc	r25, r1
    49d4:	8f 3f       	cpi	r24, 0xFF	; 255
    49d6:	91 05       	cpc	r25, r1
    49d8:	20 f4       	brcc	.+8      	; 0x49e2 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    49da:	62 0f       	add	r22, r18
    49dc:	60 93 11 01 	sts	0x0111, r22
    49e0:	03 c0       	rjmp	.+6      	; 0x49e8 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    49e2:	8f ef       	ldi	r24, 0xFF	; 255
    49e4:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    49e8:	80 91 11 01 	lds	r24, 0x0111
    49ec:	1f 92       	push	r1
    49ee:	8f 93       	push	r24
    49f0:	8b e6       	ldi	r24, 0x6B	; 107
    49f2:	95 e0       	ldi	r25, 0x05	; 5
    49f4:	44 c0       	rjmp	.+136    	; 0x4a7e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    49f6:	20 91 10 01 	lds	r18, 0x0110
    49fa:	86 2f       	mov	r24, r22
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	82 0f       	add	r24, r18
    4a00:	91 1d       	adc	r25, r1
    4a02:	8f 3f       	cpi	r24, 0xFF	; 255
    4a04:	91 05       	cpc	r25, r1
    4a06:	20 f4       	brcc	.+8      	; 0x4a10 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4a08:	62 0f       	add	r22, r18
    4a0a:	60 93 10 01 	sts	0x0110, r22
    4a0e:	03 c0       	rjmp	.+6      	; 0x4a16 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4a10:	8f ef       	ldi	r24, 0xFF	; 255
    4a12:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    4a16:	80 91 10 01 	lds	r24, 0x0110
    4a1a:	1f 92       	push	r1
    4a1c:	8f 93       	push	r24
    4a1e:	86 e5       	ldi	r24, 0x56	; 86
    4a20:	95 e0       	ldi	r25, 0x05	; 5
    4a22:	2d c0       	rjmp	.+90     	; 0x4a7e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4a24:	20 91 0f 01 	lds	r18, 0x010F
    4a28:	86 2f       	mov	r24, r22
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	82 0f       	add	r24, r18
    4a2e:	91 1d       	adc	r25, r1
    4a30:	8f 3f       	cpi	r24, 0xFF	; 255
    4a32:	91 05       	cpc	r25, r1
    4a34:	20 f4       	brcc	.+8      	; 0x4a3e <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4a36:	62 0f       	add	r22, r18
    4a38:	60 93 0f 01 	sts	0x010F, r22
    4a3c:	03 c0       	rjmp	.+6      	; 0x4a44 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4a3e:	8f ef       	ldi	r24, 0xFF	; 255
    4a40:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4a44:	80 91 0f 01 	lds	r24, 0x010F
    4a48:	1f 92       	push	r1
    4a4a:	8f 93       	push	r24
    4a4c:	8d e3       	ldi	r24, 0x3D	; 61
    4a4e:	95 e0       	ldi	r25, 0x05	; 5
    4a50:	16 c0       	rjmp	.+44     	; 0x4a7e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4a52:	20 91 0e 01 	lds	r18, 0x010E
    4a56:	86 2f       	mov	r24, r22
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	82 0f       	add	r24, r18
    4a5c:	91 1d       	adc	r25, r1
    4a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a60:	91 05       	cpc	r25, r1
    4a62:	20 f4       	brcc	.+8      	; 0x4a6c <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4a64:	62 0f       	add	r22, r18
    4a66:	60 93 0e 01 	sts	0x010E, r22
    4a6a:	03 c0       	rjmp	.+6      	; 0x4a72 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4a6c:	8f ef       	ldi	r24, 0xFF	; 255
    4a6e:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a72:	80 91 0e 01 	lds	r24, 0x010E
    4a76:	1f 92       	push	r1
    4a78:	8f 93       	push	r24
    4a7a:	82 e2       	ldi	r24, 0x22	; 34
    4a7c:	95 e0       	ldi	r25, 0x05	; 5
    4a7e:	9f 93       	push	r25
    4a80:	8f 93       	push	r24
    4a82:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
            break;
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	08 95       	ret

00004a90 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4a90:	83 30       	cpi	r24, 0x03	; 3
    4a92:	81 f1       	breq	.+96     	; 0x4af4 <mousekey_param_dec+0x64>
    4a94:	28 f4       	brcc	.+10     	; 0x4aa0 <mousekey_param_dec+0x10>
    4a96:	81 30       	cpi	r24, 0x01	; 1
    4a98:	59 f0       	breq	.+22     	; 0x4ab0 <mousekey_param_dec+0x20>
    4a9a:	82 30       	cpi	r24, 0x02	; 2
    4a9c:	d1 f0       	breq	.+52     	; 0x4ad2 <mousekey_param_dec+0x42>
    4a9e:	08 95       	ret
    4aa0:	85 30       	cpi	r24, 0x05	; 5
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <mousekey_param_dec+0x16>
    4aa4:	49 c0       	rjmp	.+146    	; 0x4b38 <mousekey_param_dec+0xa8>
    4aa6:	b8 f1       	brcs	.+110    	; 0x4b16 <mousekey_param_dec+0x86>
    4aa8:	86 30       	cpi	r24, 0x06	; 6
    4aaa:	09 f4       	brne	.+2      	; 0x4aae <mousekey_param_dec+0x1e>
    4aac:	56 c0       	rjmp	.+172    	; 0x4b5a <mousekey_param_dec+0xca>
    4aae:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4ab0:	80 91 13 01 	lds	r24, 0x0113
    4ab4:	68 17       	cp	r22, r24
    4ab6:	20 f4       	brcc	.+8      	; 0x4ac0 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4ab8:	86 1b       	sub	r24, r22
    4aba:	80 93 13 01 	sts	0x0113, r24
    4abe:	02 c0       	rjmp	.+4      	; 0x4ac4 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4ac0:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    4ac4:	80 91 13 01 	lds	r24, 0x0113
    4ac8:	1f 92       	push	r1
    4aca:	8f 93       	push	r24
    4acc:	83 e1       	ldi	r24, 0x13	; 19
    4ace:	95 e0       	ldi	r25, 0x05	; 5
    4ad0:	54 c0       	rjmp	.+168    	; 0x4b7a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4ad2:	80 91 12 01 	lds	r24, 0x0112
    4ad6:	68 17       	cp	r22, r24
    4ad8:	20 f4       	brcc	.+8      	; 0x4ae2 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4ada:	86 1b       	sub	r24, r22
    4adc:	80 93 12 01 	sts	0x0112, r24
    4ae0:	02 c0       	rjmp	.+4      	; 0x4ae6 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4ae2:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    4ae6:	80 91 12 01 	lds	r24, 0x0112
    4aea:	1f 92       	push	r1
    4aec:	8f 93       	push	r24
    4aee:	81 e0       	ldi	r24, 0x01	; 1
    4af0:	95 e0       	ldi	r25, 0x05	; 5
    4af2:	43 c0       	rjmp	.+134    	; 0x4b7a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4af4:	80 91 11 01 	lds	r24, 0x0111
    4af8:	68 17       	cp	r22, r24
    4afa:	20 f4       	brcc	.+8      	; 0x4b04 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4afc:	86 1b       	sub	r24, r22
    4afe:	80 93 11 01 	sts	0x0111, r24
    4b02:	02 c0       	rjmp	.+4      	; 0x4b08 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4b04:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    4b08:	80 91 11 01 	lds	r24, 0x0111
    4b0c:	1f 92       	push	r1
    4b0e:	8f 93       	push	r24
    4b10:	8e ee       	ldi	r24, 0xEE	; 238
    4b12:	94 e0       	ldi	r25, 0x04	; 4
    4b14:	32 c0       	rjmp	.+100    	; 0x4b7a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4b16:	80 91 10 01 	lds	r24, 0x0110
    4b1a:	68 17       	cp	r22, r24
    4b1c:	20 f4       	brcc	.+8      	; 0x4b26 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4b1e:	86 1b       	sub	r24, r22
    4b20:	80 93 10 01 	sts	0x0110, r24
    4b24:	02 c0       	rjmp	.+4      	; 0x4b2a <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4b26:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    4b2a:	80 91 10 01 	lds	r24, 0x0110
    4b2e:	1f 92       	push	r1
    4b30:	8f 93       	push	r24
    4b32:	89 ed       	ldi	r24, 0xD9	; 217
    4b34:	94 e0       	ldi	r25, 0x04	; 4
    4b36:	21 c0       	rjmp	.+66     	; 0x4b7a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4b38:	80 91 0f 01 	lds	r24, 0x010F
    4b3c:	68 17       	cp	r22, r24
    4b3e:	20 f4       	brcc	.+8      	; 0x4b48 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4b40:	86 1b       	sub	r24, r22
    4b42:	80 93 0f 01 	sts	0x010F, r24
    4b46:	02 c0       	rjmp	.+4      	; 0x4b4c <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4b48:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4b4c:	80 91 0f 01 	lds	r24, 0x010F
    4b50:	1f 92       	push	r1
    4b52:	8f 93       	push	r24
    4b54:	80 ec       	ldi	r24, 0xC0	; 192
    4b56:	94 e0       	ldi	r25, 0x04	; 4
    4b58:	10 c0       	rjmp	.+32     	; 0x4b7a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4b5a:	80 91 0e 01 	lds	r24, 0x010E
    4b5e:	68 17       	cp	r22, r24
    4b60:	20 f4       	brcc	.+8      	; 0x4b6a <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4b62:	86 1b       	sub	r24, r22
    4b64:	80 93 0e 01 	sts	0x010E, r24
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4b6a:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b6e:	80 91 0e 01 	lds	r24, 0x010E
    4b72:	1f 92       	push	r1
    4b74:	8f 93       	push	r24
    4b76:	85 ea       	ldi	r24, 0xA5	; 165
    4b78:	94 e0       	ldi	r25, 0x04	; 4
    4b7a:	9f 93       	push	r25
    4b7c:	8f 93       	push	r24
    4b7e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
            break;
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	08 95       	ret

00004b8c <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4b8c:	cf 93       	push	r28
    4b8e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4b90:	1f 92       	push	r1
    4b92:	8f 93       	push	r24
    4b94:	2a ea       	ldi	r18, 0xAA	; 170
    4b96:	37 e0       	ldi	r19, 0x07	; 7
    4b98:	3f 93       	push	r19
    4b9a:	2f 93       	push	r18
    4b9c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    default_layer_set(1UL<<layer);
    4ba0:	61 e0       	ldi	r22, 0x01	; 1
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	04 c0       	rjmp	.+8      	; 0x4bb2 <switch_default_layer+0x26>
    4baa:	66 0f       	add	r22, r22
    4bac:	77 1f       	adc	r23, r23
    4bae:	88 1f       	adc	r24, r24
    4bb0:	99 1f       	adc	r25, r25
    4bb2:	ca 95       	dec	r28
    4bb4:	d2 f7       	brpl	.-12     	; 0x4baa <switch_default_layer+0x1e>
    4bb6:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <default_layer_set>
    clear_keyboard();
    4bba:	0f 90       	pop	r0
    4bbc:	0f 90       	pop	r0
    4bbe:	0f 90       	pop	r0
    4bc0:	0f 90       	pop	r0
}
    4bc2:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4bc4:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <clear_keyboard>

00004bc8 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4bc8:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4bca:	87 32       	cpi	r24, 0x27	; 39
    4bcc:	b0 f5       	brcc	.+108    	; 0x4c3a <command_common+0x72>
    4bce:	8e 31       	cpi	r24, 0x1E	; 30
    4bd0:	08 f0       	brcs	.+2      	; 0x4bd4 <command_common+0xc>
    4bd2:	3d c2       	rjmp	.+1146   	; 0x504e <command_common+0x486>
    4bd4:	8e 30       	cpi	r24, 0x0E	; 14
    4bd6:	09 f4       	brne	.+2      	; 0x4bda <command_common+0x12>
    4bd8:	bd c1       	rjmp	.+890    	; 0x4f54 <command_common+0x38c>
    4bda:	00 f5       	brcc	.+64     	; 0x4c1c <command_common+0x54>
    4bdc:	87 30       	cpi	r24, 0x07	; 7
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <command_common+0x1a>
    4be0:	8d c1       	rjmp	.+794    	; 0x4efc <command_common+0x334>
    4be2:	a8 f4       	brcc	.+42     	; 0x4c0e <command_common+0x46>
    4be4:	86 30       	cpi	r24, 0x06	; 6
    4be6:	09 f0       	breq	.+2      	; 0x4bea <command_common+0x22>
    4be8:	36 c2       	rjmp	.+1132   	; 0x5056 <command_common+0x48e>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4bea:	80 91 31 02 	lds	r24, 0x0231
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4bee:	81 7f       	andi	r24, 0xF1	; 241
    4bf0:	8e 7f       	andi	r24, 0xFE	; 254
    4bf2:	80 93 31 02 	sts	0x0231, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4bf6:	8f ea       	ldi	r24, 0xAF	; 175
    4bf8:	97 e0       	ldi	r25, 0x07	; 7
    4bfa:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4bfe:	82 ee       	ldi	r24, 0xE2	; 226
    4c00:	9b e0       	ldi	r25, 0x0B	; 11
    4c02:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            command_state = CONSOLE;
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	80 93 41 02 	sts	0x0241, r24
    4c0c:	75 c1       	rjmp	.+746    	; 0x4ef8 <command_common+0x330>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4c0e:	88 30       	cpi	r24, 0x08	; 8
    4c10:	09 f4       	brne	.+2      	; 0x4c14 <command_common+0x4c>
    4c12:	3f c0       	rjmp	.+126    	; 0x4c92 <command_common+0xca>
    4c14:	8b 30       	cpi	r24, 0x0B	; 11
    4c16:	09 f4       	brne	.+2      	; 0x4c1a <command_common+0x52>
    4c18:	6b c1       	rjmp	.+726    	; 0x4ef0 <command_common+0x328>
    4c1a:	1d c2       	rjmp	.+1082   	; 0x5056 <command_common+0x48e>
    4c1c:	86 31       	cpi	r24, 0x16	; 22
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <command_common+0x5a>
    4c20:	dd c1       	rjmp	.+954    	; 0x4fdc <command_common+0x414>
    4c22:	20 f4       	brcc	.+8      	; 0x4c2c <command_common+0x64>
    4c24:	80 31       	cpi	r24, 0x10	; 16
    4c26:	09 f4       	brne	.+2      	; 0x4c2a <command_common+0x62>
    4c28:	a8 c1       	rjmp	.+848    	; 0x4f7a <command_common+0x3b2>
    4c2a:	15 c2       	rjmp	.+1066   	; 0x5056 <command_common+0x48e>
    4c2c:	89 31       	cpi	r24, 0x19	; 25
    4c2e:	09 f4       	brne	.+2      	; 0x4c32 <command_common+0x6a>
    4c30:	be c1       	rjmp	.+892    	; 0x4fae <command_common+0x3e6>
    4c32:	8b 31       	cpi	r24, 0x1B	; 27
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <command_common+0x70>
    4c36:	7b c1       	rjmp	.+758    	; 0x4f2e <command_common+0x366>
    4c38:	0e c2       	rjmp	.+1052   	; 0x5056 <command_common+0x48e>
    4c3a:	88 33       	cpi	r24, 0x38	; 56
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <command_common+0x78>
    4c3e:	58 c1       	rjmp	.+688    	; 0x4ef0 <command_common+0x328>
    4c40:	50 f4       	brcc	.+20     	; 0x4c56 <command_common+0x8e>
    4c42:	89 32       	cpi	r24, 0x29	; 41
    4c44:	09 f4       	brne	.+2      	; 0x4c48 <command_common+0x80>
    4c46:	01 c2       	rjmp	.+1026   	; 0x504a <command_common+0x482>
    4c48:	85 33       	cpi	r24, 0x35	; 53
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <command_common+0x86>
    4c4c:	fe c1       	rjmp	.+1020   	; 0x504a <command_common+0x482>
    4c4e:	87 32       	cpi	r24, 0x27	; 39
    4c50:	09 f0       	breq	.+2      	; 0x4c54 <command_common+0x8c>
    4c52:	01 c2       	rjmp	.+1026   	; 0x5056 <command_common+0x48e>
    4c54:	fa c1       	rjmp	.+1012   	; 0x504a <command_common+0x482>
    4c56:	83 34       	cpi	r24, 0x43	; 67
    4c58:	09 f4       	brne	.+2      	; 0x4c5c <command_common+0x94>
    4c5a:	f7 c1       	rjmp	.+1006   	; 0x504a <command_common+0x482>
    4c5c:	28 f4       	brcc	.+10     	; 0x4c68 <command_common+0xa0>
    4c5e:	8a 33       	cpi	r24, 0x3A	; 58
    4c60:	08 f4       	brcc	.+2      	; 0x4c64 <command_common+0x9c>
    4c62:	f9 c1       	rjmp	.+1010   	; 0x5056 <command_common+0x48e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4c64:	89 53       	subi	r24, 0x39	; 57
    4c66:	f4 c1       	rjmp	.+1000   	; 0x5050 <command_common+0x488>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4c68:	88 34       	cpi	r24, 0x48	; 72
    4c6a:	09 f0       	breq	.+2      	; 0x4c6e <command_common+0xa6>
    4c6c:	f4 c1       	rjmp	.+1000   	; 0x5056 <command_common+0x48e>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4c6e:	0e 94 ef 16 	call	0x2dde	; 0x2dde <clear_keyboard>
            print("\n\nbootloader... ");
    4c72:	81 ed       	ldi	r24, 0xD1	; 209
    4c74:	9b e0       	ldi	r25, 0x0B	; 11
    4c76:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4c7a:	9f ef       	ldi	r25, 0xFF	; 255
    4c7c:	23 ed       	ldi	r18, 0xD3	; 211
    4c7e:	80 e3       	ldi	r24, 0x30	; 48
    4c80:	91 50       	subi	r25, 0x01	; 1
    4c82:	20 40       	sbci	r18, 0x00	; 0
    4c84:	80 40       	sbci	r24, 0x00	; 0
    4c86:	e1 f7       	brne	.-8      	; 0x4c80 <command_common+0xb8>
    4c88:	00 c0       	rjmp	.+0      	; 0x4c8a <command_common+0xc2>
    4c8a:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4c8c:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <bootloader_jump>
    4c90:	33 c1       	rjmp	.+614    	; 0x4ef8 <command_common+0x330>
            sleep_led_test = !sleep_led_test;
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4c92:	86 ee       	ldi	r24, 0xE6	; 230
    4c94:	9b e0       	ldi	r25, 0x0B	; 11
    4c96:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4c9a:	86 ea       	ldi	r24, 0xA6	; 166
    4c9c:	99 e0       	ldi	r25, 0x09	; 9
    4c9e:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4ca2:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <eeconfig_read_default_layer>
    4ca6:	1f 92       	push	r1
    4ca8:	8f 93       	push	r24
    4caa:	83 ea       	ldi	r24, 0xA3	; 163
    4cac:	99 e0       	ldi	r25, 0x09	; 9
    4cae:	9f 93       	push	r25
    4cb0:	8f 93       	push	r24
    4cb2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4cb6:	81 ea       	ldi	r24, 0xA1	; 161
    4cb8:	99 e0       	ldi	r25, 0x09	; 9
    4cba:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4cbe:	0e 94 cb 21 	call	0x4396	; 0x4396 <eeconfig_read_debug>
    4cc2:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4cc4:	8e e8       	ldi	r24, 0x8E	; 142
    4cc6:	99 e0       	ldi	r25, 0x09	; 9
    4cc8:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4ccc:	1f 92       	push	r1
    4cce:	cf 93       	push	r28
    4cd0:	29 e8       	ldi	r18, 0x89	; 137
    4cd2:	39 e0       	ldi	r19, 0x09	; 9
    4cd4:	3f 93       	push	r19
    4cd6:	2f 93       	push	r18
    4cd8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4cdc:	87 e8       	ldi	r24, 0x87	; 135
    4cde:	99 e0       	ldi	r25, 0x09	; 9
    4ce0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4ce4:	8d e7       	ldi	r24, 0x7D	; 125
    4ce6:	99 e0       	ldi	r25, 0x09	; 9
    4ce8:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4cec:	8c 2f       	mov	r24, r28
    4cee:	81 70       	andi	r24, 0x01	; 1
    4cf0:	1f 92       	push	r1
    4cf2:	8f 93       	push	r24
    4cf4:	2a e7       	ldi	r18, 0x7A	; 122
    4cf6:	39 e0       	ldi	r19, 0x09	; 9
    4cf8:	3f 93       	push	r19
    4cfa:	2f 93       	push	r18
    4cfc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4d00:	88 e7       	ldi	r24, 0x78	; 120
    4d02:	99 e0       	ldi	r25, 0x09	; 9
    4d04:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4d08:	8e e6       	ldi	r24, 0x6E	; 110
    4d0a:	99 e0       	ldi	r25, 0x09	; 9
    4d0c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4d10:	c1 fb       	bst	r28, 1
    4d12:	88 27       	eor	r24, r24
    4d14:	80 f9       	bld	r24, 0
    4d16:	1f 92       	push	r1
    4d18:	8f 93       	push	r24
    4d1a:	2b e6       	ldi	r18, 0x6B	; 107
    4d1c:	39 e0       	ldi	r19, 0x09	; 9
    4d1e:	3f 93       	push	r19
    4d20:	2f 93       	push	r18
    4d22:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4d26:	89 e6       	ldi	r24, 0x69	; 105
    4d28:	99 e0       	ldi	r25, 0x09	; 9
    4d2a:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4d2e:	8d e5       	ldi	r24, 0x5D	; 93
    4d30:	99 e0       	ldi	r25, 0x09	; 9
    4d32:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4d36:	c2 fb       	bst	r28, 2
    4d38:	88 27       	eor	r24, r24
    4d3a:	80 f9       	bld	r24, 0
    4d3c:	1f 92       	push	r1
    4d3e:	8f 93       	push	r24
    4d40:	2a e5       	ldi	r18, 0x5A	; 90
    4d42:	39 e0       	ldi	r19, 0x09	; 9
    4d44:	3f 93       	push	r19
    4d46:	2f 93       	push	r18
    4d48:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4d4c:	88 e5       	ldi	r24, 0x58	; 88
    4d4e:	99 e0       	ldi	r25, 0x09	; 9
    4d50:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4d54:	8f e4       	ldi	r24, 0x4F	; 79
    4d56:	99 e0       	ldi	r25, 0x09	; 9
    4d58:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4d5c:	c3 fb       	bst	r28, 3
    4d5e:	cc 27       	eor	r28, r28
    4d60:	c0 f9       	bld	r28, 0
    4d62:	1f 92       	push	r1
    4d64:	cf 93       	push	r28
    4d66:	8c e4       	ldi	r24, 0x4C	; 76
    4d68:	99 e0       	ldi	r25, 0x09	; 9
    4d6a:	9f 93       	push	r25
    4d6c:	8f 93       	push	r24
    4d6e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4d72:	8a e4       	ldi	r24, 0x4A	; 74
    4d74:	99 e0       	ldi	r25, 0x09	; 9
    4d76:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4d7a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <eeconfig_read_keymap>
    4d7e:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4d80:	86 e3       	ldi	r24, 0x36	; 54
    4d82:	99 e0       	ldi	r25, 0x09	; 9
    4d84:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4d88:	1f 92       	push	r1
    4d8a:	cf 93       	push	r28
    4d8c:	21 e3       	ldi	r18, 0x31	; 49
    4d8e:	39 e0       	ldi	r19, 0x09	; 9
    4d90:	3f 93       	push	r19
    4d92:	2f 93       	push	r18
    4d94:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4d98:	8f e2       	ldi	r24, 0x2F	; 47
    4d9a:	99 e0       	ldi	r25, 0x09	; 9
    4d9c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4da0:	86 e1       	ldi	r24, 0x16	; 22
    4da2:	99 e0       	ldi	r25, 0x09	; 9
    4da4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4da8:	8c 2f       	mov	r24, r28
    4daa:	81 70       	andi	r24, 0x01	; 1
    4dac:	1f 92       	push	r1
    4dae:	8f 93       	push	r24
    4db0:	23 e1       	ldi	r18, 0x13	; 19
    4db2:	39 e0       	ldi	r19, 0x09	; 9
    4db4:	3f 93       	push	r19
    4db6:	2f 93       	push	r18
    4db8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4dbc:	8d b7       	in	r24, 0x3d	; 61
    4dbe:	9e b7       	in	r25, 0x3e	; 62
    4dc0:	80 96       	adiw	r24, 0x20	; 32
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	9e bf       	out	0x3e, r25	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	8d bf       	out	0x3d, r24	; 61
    4dcc:	81 e1       	ldi	r24, 0x11	; 17
    4dce:	99 e0       	ldi	r25, 0x09	; 9
    4dd0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4dd4:	8a ef       	ldi	r24, 0xFA	; 250
    4dd6:	98 e0       	ldi	r25, 0x08	; 8
    4dd8:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4ddc:	c1 fb       	bst	r28, 1
    4dde:	88 27       	eor	r24, r24
    4de0:	80 f9       	bld	r24, 0
    4de2:	1f 92       	push	r1
    4de4:	8f 93       	push	r24
    4de6:	27 ef       	ldi	r18, 0xF7	; 247
    4de8:	38 e0       	ldi	r19, 0x08	; 8
    4dea:	3f 93       	push	r19
    4dec:	2f 93       	push	r18
    4dee:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4df2:	85 ef       	ldi	r24, 0xF5	; 245
    4df4:	98 e0       	ldi	r25, 0x08	; 8
    4df6:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4dfa:	83 ee       	ldi	r24, 0xE3	; 227
    4dfc:	98 e0       	ldi	r25, 0x08	; 8
    4dfe:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4e02:	c2 fb       	bst	r28, 2
    4e04:	88 27       	eor	r24, r24
    4e06:	80 f9       	bld	r24, 0
    4e08:	1f 92       	push	r1
    4e0a:	8f 93       	push	r24
    4e0c:	20 ee       	ldi	r18, 0xE0	; 224
    4e0e:	38 e0       	ldi	r19, 0x08	; 8
    4e10:	3f 93       	push	r19
    4e12:	2f 93       	push	r18
    4e14:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4e18:	8e ed       	ldi	r24, 0xDE	; 222
    4e1a:	98 e0       	ldi	r25, 0x08	; 8
    4e1c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4e20:	8c ec       	ldi	r24, 0xCC	; 204
    4e22:	98 e0       	ldi	r25, 0x08	; 8
    4e24:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4e28:	c3 fb       	bst	r28, 3
    4e2a:	88 27       	eor	r24, r24
    4e2c:	80 f9       	bld	r24, 0
    4e2e:	1f 92       	push	r1
    4e30:	8f 93       	push	r24
    4e32:	29 ec       	ldi	r18, 0xC9	; 201
    4e34:	38 e0       	ldi	r19, 0x08	; 8
    4e36:	3f 93       	push	r19
    4e38:	2f 93       	push	r18
    4e3a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4e3e:	87 ec       	ldi	r24, 0xC7	; 199
    4e40:	98 e0       	ldi	r25, 0x08	; 8
    4e42:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4e46:	8d eb       	ldi	r24, 0xBD	; 189
    4e48:	98 e0       	ldi	r25, 0x08	; 8
    4e4a:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4e4e:	c4 fb       	bst	r28, 4
    4e50:	88 27       	eor	r24, r24
    4e52:	80 f9       	bld	r24, 0
    4e54:	1f 92       	push	r1
    4e56:	8f 93       	push	r24
    4e58:	2a eb       	ldi	r18, 0xBA	; 186
    4e5a:	38 e0       	ldi	r19, 0x08	; 8
    4e5c:	3f 93       	push	r19
    4e5e:	2f 93       	push	r18
    4e60:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4e64:	88 eb       	ldi	r24, 0xB8	; 184
    4e66:	98 e0       	ldi	r25, 0x08	; 8
    4e68:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4e6c:	86 ea       	ldi	r24, 0xA6	; 166
    4e6e:	98 e0       	ldi	r25, 0x08	; 8
    4e70:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4e74:	c5 fb       	bst	r28, 5
    4e76:	88 27       	eor	r24, r24
    4e78:	80 f9       	bld	r24, 0
    4e7a:	1f 92       	push	r1
    4e7c:	8f 93       	push	r24
    4e7e:	23 ea       	ldi	r18, 0xA3	; 163
    4e80:	38 e0       	ldi	r19, 0x08	; 8
    4e82:	3f 93       	push	r19
    4e84:	2f 93       	push	r18
    4e86:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4e8a:	81 ea       	ldi	r24, 0xA1	; 161
    4e8c:	98 e0       	ldi	r25, 0x08	; 8
    4e8e:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4e92:	85 e8       	ldi	r24, 0x85	; 133
    4e94:	98 e0       	ldi	r25, 0x08	; 8
    4e96:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4e9a:	c6 fb       	bst	r28, 6
    4e9c:	88 27       	eor	r24, r24
    4e9e:	80 f9       	bld	r24, 0
    4ea0:	1f 92       	push	r1
    4ea2:	8f 93       	push	r24
    4ea4:	22 e8       	ldi	r18, 0x82	; 130
    4ea6:	38 e0       	ldi	r19, 0x08	; 8
    4ea8:	3f 93       	push	r19
    4eaa:	2f 93       	push	r18
    4eac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4eb0:	80 e8       	ldi	r24, 0x80	; 128
    4eb2:	98 e0       	ldi	r25, 0x08	; 8
    4eb4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4eb8:	88 e7       	ldi	r24, 0x78	; 120
    4eba:	98 e0       	ldi	r25, 0x08	; 8
    4ebc:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4ec0:	c7 fb       	bst	r28, 7
    4ec2:	cc 27       	eor	r28, r28
    4ec4:	c0 f9       	bld	r28, 0
    4ec6:	1f 92       	push	r1
    4ec8:	cf 93       	push	r28
    4eca:	85 e7       	ldi	r24, 0x75	; 117
    4ecc:	98 e0       	ldi	r25, 0x08	; 8
    4ece:	9f 93       	push	r25
    4ed0:	8f 93       	push	r24
    4ed2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    4ed6:	83 e7       	ldi	r24, 0x73	; 115
    4ed8:	98 e0       	ldi	r25, 0x08	; 8
    4eda:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    4ede:	8d b7       	in	r24, 0x3d	; 61
    4ee0:	9e b7       	in	r25, 0x3e	; 62
    4ee2:	4c 96       	adiw	r24, 0x1c	; 28
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	f8 94       	cli
    4ee8:	9e bf       	out	0x3e, r25	; 62
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	8d bf       	out	0x3d, r24	; 61
    4eee:	04 c0       	rjmp	.+8      	; 0x4ef8 <command_common+0x330>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4ef0:	86 ed       	ldi	r24, 0xD6	; 214
    4ef2:	97 e0       	ldi	r25, 0x07	; 7
    4ef4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4ef8:	c1 e0       	ldi	r28, 0x01	; 1
    4efa:	b2 c0       	rjmp	.+356    	; 0x5060 <command_common+0x498>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4efc:	80 91 31 02 	lds	r24, 0x0231
    4f00:	c8 2f       	mov	r28, r24
    4f02:	c1 70       	andi	r28, 0x01	; 1
    4f04:	80 ff       	sbrs	r24, 0
    4f06:	09 c0       	rjmp	.+18     	; 0x4f1a <command_common+0x352>
                print("\ndebug: off\n");
    4f08:	84 ec       	ldi	r24, 0xC4	; 196
    4f0a:	9b e0       	ldi	r25, 0x0B	; 11
    4f0c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
                debug_matrix   = false;
    4f10:	80 91 31 02 	lds	r24, 0x0231
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4f14:	81 7f       	andi	r24, 0xF1	; 241
    4f16:	8e 7f       	andi	r24, 0xFE	; 254
    4f18:	44 c0       	rjmp	.+136    	; 0x4fa2 <command_common+0x3da>
            } else {
                print("\ndebug: on\n");
    4f1a:	88 eb       	ldi	r24, 0xB8	; 184
    4f1c:	9b e0       	ldi	r25, 0x0B	; 11
    4f1e:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
                debug_enable   = true;
    4f22:	80 91 31 02 	lds	r24, 0x0231
    4f26:	81 60       	ori	r24, 0x01	; 1
    4f28:	80 93 31 02 	sts	0x0231, r24
    4f2c:	e5 cf       	rjmp	.-54     	; 0x4ef8 <command_common+0x330>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4f2e:	80 91 31 02 	lds	r24, 0x0231
    4f32:	81 fb       	bst	r24, 1
    4f34:	cc 27       	eor	r28, r28
    4f36:	c0 f9       	bld	r28, 0
    4f38:	91 e0       	ldi	r25, 0x01	; 1
    4f3a:	c9 27       	eor	r28, r25
    4f3c:	c0 fb       	bst	r28, 0
    4f3e:	81 f9       	bld	r24, 1
    4f40:	80 93 31 02 	sts	0x0231, r24
            if (debug_matrix) {
    4f44:	cc 23       	and	r28, r28
    4f46:	19 f0       	breq	.+6      	; 0x4f4e <command_common+0x386>
                print("\nmatrix: on\n");
    4f48:	8b ea       	ldi	r24, 0xAB	; 171
    4f4a:	9b e0       	ldi	r25, 0x0B	; 11
    4f4c:	25 c0       	rjmp	.+74     	; 0x4f98 <command_common+0x3d0>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4f4e:	8d e9       	ldi	r24, 0x9D	; 157
    4f50:	9b e0       	ldi	r25, 0x0B	; 11
    4f52:	d0 cf       	rjmp	.-96     	; 0x4ef4 <command_common+0x32c>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4f54:	80 91 31 02 	lds	r24, 0x0231
    4f58:	82 fb       	bst	r24, 2
    4f5a:	cc 27       	eor	r28, r28
    4f5c:	c0 f9       	bld	r28, 0
    4f5e:	91 e0       	ldi	r25, 0x01	; 1
    4f60:	c9 27       	eor	r28, r25
    4f62:	c0 fb       	bst	r28, 0
    4f64:	82 f9       	bld	r24, 2
    4f66:	80 93 31 02 	sts	0x0231, r24
            if (debug_keyboard) {
    4f6a:	cc 23       	and	r28, r28
    4f6c:	19 f0       	breq	.+6      	; 0x4f74 <command_common+0x3ac>
                print("\nkeyboard: on\n");
    4f6e:	8e e8       	ldi	r24, 0x8E	; 142
    4f70:	9b e0       	ldi	r25, 0x0B	; 11
    4f72:	12 c0       	rjmp	.+36     	; 0x4f98 <command_common+0x3d0>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4f74:	8e e7       	ldi	r24, 0x7E	; 126
    4f76:	9b e0       	ldi	r25, 0x0B	; 11
    4f78:	bd cf       	rjmp	.-134    	; 0x4ef4 <command_common+0x32c>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4f7a:	80 91 31 02 	lds	r24, 0x0231
    4f7e:	83 fb       	bst	r24, 3
    4f80:	cc 27       	eor	r28, r28
    4f82:	c0 f9       	bld	r28, 0
    4f84:	91 e0       	ldi	r25, 0x01	; 1
    4f86:	c9 27       	eor	r28, r25
    4f88:	c0 fb       	bst	r28, 0
    4f8a:	83 f9       	bld	r24, 3
    4f8c:	80 93 31 02 	sts	0x0231, r24
            if (debug_mouse) {
    4f90:	cc 23       	and	r28, r28
    4f92:	51 f0       	breq	.+20     	; 0x4fa8 <command_common+0x3e0>
                print("\nmouse: on\n");
    4f94:	82 e7       	ldi	r24, 0x72	; 114
    4f96:	9b e0       	ldi	r25, 0x0B	; 11
    4f98:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
                debug_enable = true;
    4f9c:	80 91 31 02 	lds	r24, 0x0231
    4fa0:	81 60       	ori	r24, 0x01	; 1
    4fa2:	80 93 31 02 	sts	0x0231, r24
    4fa6:	5c c0       	rjmp	.+184    	; 0x5060 <command_common+0x498>
            } else {
                print("\nmouse: off\n");
    4fa8:	85 e6       	ldi	r24, 0x65	; 101
    4faa:	9b e0       	ldi	r25, 0x0B	; 11
    4fac:	a3 cf       	rjmp	.-186    	; 0x4ef4 <command_common+0x32c>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4fae:	86 e5       	ldi	r24, 0x56	; 86
    4fb0:	9b e0       	ldi	r25, 0x0B	; 11
    4fb2:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4fb6:	8f e1       	ldi	r24, 0x1F	; 31
    4fb8:	9b e0       	ldi	r25, 0x0B	; 11
    4fba:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4fbe:	8c eb       	ldi	r24, 0xBC	; 188
    4fc0:	9a e0       	ldi	r25, 0x0A	; 10
    4fc2:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4fc6:	8f e8       	ldi	r24, 0x8F	; 143
    4fc8:	9a e0       	ldi	r25, 0x0A	; 10
    4fca:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            /* build options */
            print("OPTIONS:"
    4fce:	8f e4       	ldi	r24, 0x4F	; 79
    4fd0:	9a e0       	ldi	r25, 0x0A	; 10
    4fd2:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4fd6:	81 e2       	ldi	r24, 0x21	; 33
    4fd8:	9a e0       	ldi	r25, 0x0A	; 10
    4fda:	8c cf       	rjmp	.-232    	; 0x4ef4 <command_common+0x32c>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4fdc:	83 e1       	ldi	r24, 0x13	; 19
    4fde:	9a e0       	ldi	r25, 0x0A	; 10
    4fe0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            print_val_hex8(host_keyboard_leds());
    4fe4:	0e 94 34 10 	call	0x2068	; 0x2068 <host_keyboard_leds>
    4fe8:	1f 92       	push	r1
    4fea:	8f 93       	push	r24
    4fec:	89 ef       	ldi	r24, 0xF9	; 249
    4fee:	99 e0       	ldi	r25, 0x09	; 9
    4ff0:	9f 93       	push	r25
    4ff2:	8f 93       	push	r24
    4ff4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4ff8:	80 91 0b 01 	lds	r24, 0x010B
    4ffc:	1f 92       	push	r1
    4ffe:	8f 93       	push	r24
    5000:	82 ee       	ldi	r24, 0xE2	; 226
    5002:	99 e0       	ldi	r25, 0x09	; 9
    5004:	9f 93       	push	r25
    5006:	8f 93       	push	r24
    5008:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
            print_val_hex8(keyboard_idle);
    500c:	80 91 6b 01 	lds	r24, 0x016B
    5010:	1f 92       	push	r1
    5012:	8f 93       	push	r24
    5014:	8f ec       	ldi	r24, 0xCF	; 207
    5016:	99 e0       	ldi	r25, 0x09	; 9
    5018:	9f 93       	push	r25
    501a:	8f 93       	push	r24
    501c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    5020:	0e 94 67 1e 	call	0x3cce	; 0x3cce <timer_read32>
    5024:	9f 93       	push	r25
    5026:	8f 93       	push	r24
    5028:	7f 93       	push	r23
    502a:	6f 93       	push	r22
    502c:	88 eb       	ldi	r24, 0xB8	; 184
    502e:	99 e0       	ldi	r25, 0x09	; 9
    5030:	9f 93       	push	r25
    5032:	8f 93       	push	r24
    5034:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5038:	8d b7       	in	r24, 0x3d	; 61
    503a:	9e b7       	in	r25, 0x3e	; 62
    503c:	42 96       	adiw	r24, 0x12	; 18
    503e:	0f b6       	in	r0, 0x3f	; 63
    5040:	f8 94       	cli
    5042:	9e bf       	out	0x3e, r25	; 62
    5044:	0f be       	out	0x3f, r0	; 63
    5046:	8d bf       	out	0x3d, r24	; 61
    5048:	57 cf       	rjmp	.-338    	; 0x4ef8 <command_common+0x330>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    504a:	80 e0       	ldi	r24, 0x00	; 0
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <command_common+0x488>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    504e:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    5050:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <switch_default_layer>
    5054:	51 cf       	rjmp	.-350    	; 0x4ef8 <command_common+0x330>
            break;
        default:
            print("?");
    5056:	86 eb       	ldi	r24, 0xB6	; 182
    5058:	99 e0       	ldi	r25, 0x09	; 9
    505a:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            return false;
    505e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5060:	8c 2f       	mov	r24, r28
    5062:	cf 91       	pop	r28
    5064:	08 95       	ret

00005066 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	08 95       	ret

0000506a <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	08 95       	ret

0000506e <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    506e:	cf 93       	push	r28
    5070:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5072:	80 91 41 02 	lds	r24, 0x0241
    5076:	81 30       	cpi	r24, 0x01	; 1
    5078:	71 f0       	breq	.+28     	; 0x5096 <command_proc+0x28>
    507a:	20 f0       	brcs	.+8      	; 0x5084 <command_proc+0x16>
    507c:	82 30       	cpi	r24, 0x02	; 2
    507e:	09 f4       	brne	.+2      	; 0x5082 <command_proc+0x14>
    5080:	48 c0       	rjmp	.+144    	; 0x5112 <command_proc+0xa4>
    5082:	3f c1       	rjmp	.+638    	; 0x5302 <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    5084:	a0 91 0c 01 	lds	r26, 0x010C
    5088:	b0 91 0d 01 	lds	r27, 0x010D
    508c:	8c 91       	ld	r24, X
    508e:	82 32       	cpi	r24, 0x22	; 34
    5090:	09 f0       	breq	.+2      	; 0x5094 <command_proc+0x26>
    5092:	39 c1       	rjmp	.+626    	; 0x5306 <command_proc+0x298>
    5094:	07 c0       	rjmp	.+14     	; 0x50a4 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5096:	a0 91 0c 01 	lds	r26, 0x010C
    509a:	b0 91 0d 01 	lds	r27, 0x010D
    509e:	8c 91       	ld	r24, X
    50a0:	82 32       	cpi	r24, 0x22	; 34
    50a2:	49 f4       	brne	.+18     	; 0x50b6 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    50a4:	8c 2f       	mov	r24, r28
    50a6:	0e 94 33 28 	call	0x5066	; 0x5066 <command_extra>
    50aa:	81 11       	cpse	r24, r1
    50ac:	2f c0       	rjmp	.+94     	; 0x510c <command_proc+0x9e>
    50ae:	8c 2f       	mov	r24, r28
    50b0:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <command_common>
    50b4:	2c c0       	rjmp	.+88     	; 0x510e <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    50b6:	8c 2f       	mov	r24, r28
    50b8:	0e 94 35 28 	call	0x506a	; 0x506a <command_console_extra>
    50bc:	81 11       	cpse	r24, r1
    50be:	26 c0       	rjmp	.+76     	; 0x510c <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    50c0:	c4 31       	cpi	r28, 0x14	; 20
    50c2:	e1 f0       	breq	.+56     	; 0x50fc <command_proc+0x8e>
    50c4:	70 f4       	brcc	.+28     	; 0x50e2 <command_proc+0x74>
    50c6:	cb 30       	cpi	r28, 0x0B	; 11
    50c8:	81 f0       	breq	.+32     	; 0x50ea <command_proc+0x7c>
    50ca:	c0 31       	cpi	r28, 0x10	; 16
    50cc:	d1 f4       	brne	.+52     	; 0x5102 <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    50ce:	0e 94 8e 24 	call	0x491c	; 0x491c <mousekey_console_help>
            print("M> ");
    50d2:	82 ea       	ldi	r24, 0xA2	; 162
    50d4:	97 e0       	ldi	r25, 0x07	; 7
    50d6:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
            command_state = MOUSEKEY;
    50da:	82 e0       	ldi	r24, 0x02	; 2
    50dc:	80 93 41 02 	sts	0x0241, r24
    50e0:	15 c0       	rjmp	.+42     	; 0x510c <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    50e2:	c9 32       	cpi	r28, 0x29	; 41
    50e4:	59 f0       	breq	.+22     	; 0x50fc <command_proc+0x8e>
    50e6:	c8 33       	cpi	r28, 0x38	; 56
    50e8:	61 f4       	brne	.+24     	; 0x5102 <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    50ea:	8f ea       	ldi	r24, 0xAF	; 175
    50ec:	97 e0       	ldi	r25, 0x07	; 7
    50ee:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    50f2:	86 ea       	ldi	r24, 0xA6	; 166
    50f4:	97 e0       	ldi	r25, 0x07	; 7
    50f6:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    50fa:	08 c0       	rjmp	.+16     	; 0x510c <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    50fc:	10 92 41 02 	sts	0x0241, r1
    5100:	04 c1       	rjmp	.+520    	; 0x530a <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5102:	80 ea       	ldi	r24, 0xA0	; 160
    5104:	97 e0       	ldi	r25, 0x07	; 7
    5106:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    510a:	ff c0       	rjmp	.+510    	; 0x530a <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    510c:	81 e0       	ldi	r24, 0x01	; 1
    510e:	81 70       	andi	r24, 0x01	; 1
    5110:	fe c0       	rjmp	.+508    	; 0x530e <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5112:	c4 32       	cpi	r28, 0x24	; 36
    5114:	28 f5       	brcc	.+74     	; 0x5160 <command_proc+0xf2>
    5116:	ce 31       	cpi	r28, 0x1E	; 30
    5118:	08 f0       	brcs	.+2      	; 0x511c <command_proc+0xae>
    511a:	c1 c0       	rjmp	.+386    	; 0x529e <command_proc+0x230>
    511c:	cb 30       	cpi	r28, 0x0B	; 11
    511e:	a1 f1       	breq	.+104    	; 0x5188 <command_proc+0x11a>
    5120:	d0 f4       	brcc	.+52     	; 0x5156 <command_proc+0xe8>
    5122:	c7 30       	cpi	r28, 0x07	; 7
    5124:	09 f0       	breq	.+2      	; 0x5128 <command_proc+0xba>
    5126:	d3 c0       	rjmp	.+422    	; 0x52ce <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5128:	8e e1       	ldi	r24, 0x1E	; 30
    512a:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    512e:	82 e3       	ldi	r24, 0x32	; 50
    5130:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5134:	8a e0       	ldi	r24, 0x0A	; 10
    5136:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    513a:	84 e1       	ldi	r24, 0x14	; 20
    513c:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5140:	88 e0       	ldi	r24, 0x08	; 8
    5142:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5146:	88 e2       	ldi	r24, 0x28	; 40
    5148:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    514c:	86 e4       	ldi	r24, 0x46	; 70
    514e:	96 e0       	ldi	r25, 0x06	; 6
    5150:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    5154:	bf c0       	rjmp	.+382    	; 0x52d4 <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5156:	c3 31       	cpi	r28, 0x13	; 19
    5158:	49 f1       	breq	.+82     	; 0x51ac <command_proc+0x13e>
    515a:	c4 31       	cpi	r28, 0x14	; 20
    515c:	c1 f0       	breq	.+48     	; 0x518e <command_proc+0x120>
    515e:	b7 c0       	rjmp	.+366    	; 0x52ce <command_proc+0x260>
    5160:	cb 34       	cpi	r28, 0x4B	; 75
    5162:	09 f4       	brne	.+2      	; 0x5166 <command_proc+0xf8>
    5164:	a9 c0       	rjmp	.+338    	; 0x52b8 <command_proc+0x24a>
    5166:	28 f4       	brcc	.+10     	; 0x5172 <command_proc+0x104>
    5168:	c9 32       	cpi	r28, 0x29	; 41
    516a:	89 f0       	breq	.+34     	; 0x518e <command_proc+0x120>
    516c:	c8 33       	cpi	r28, 0x38	; 56
    516e:	61 f0       	breq	.+24     	; 0x5188 <command_proc+0x11a>
    5170:	ae c0       	rjmp	.+348    	; 0x52ce <command_proc+0x260>
    5172:	c1 35       	cpi	r28, 0x51	; 81
    5174:	09 f4       	brne	.+2      	; 0x5178 <command_proc+0x10a>
    5176:	9e c0       	rjmp	.+316    	; 0x52b4 <command_proc+0x246>
    5178:	c2 35       	cpi	r28, 0x52	; 82
    517a:	09 f4       	brne	.+2      	; 0x517e <command_proc+0x110>
    517c:	99 c0       	rjmp	.+306    	; 0x52b0 <command_proc+0x242>
    517e:	ce 34       	cpi	r28, 0x4E	; 78
    5180:	09 f0       	breq	.+2      	; 0x5184 <command_proc+0x116>
    5182:	a5 c0       	rjmp	.+330    	; 0x52ce <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5184:	6a e0       	ldi	r22, 0x0A	; 10
    5186:	9e c0       	rjmp	.+316    	; 0x52c4 <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5188:	0e 94 8e 24 	call	0x491c	; 0x491c <mousekey_console_help>
    518c:	a3 c0       	rjmp	.+326    	; 0x52d4 <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    518e:	80 91 40 02 	lds	r24, 0x0240
    5192:	88 23       	and	r24, r24
    5194:	19 f0       	breq	.+6      	; 0x519c <command_proc+0x12e>
                mousekey_param = 0;
    5196:	10 92 40 02 	sts	0x0240, r1
    519a:	9c c0       	rjmp	.+312    	; 0x52d4 <command_proc+0x266>
            } else {
                print("C> ");
    519c:	83 e5       	ldi	r24, 0x53	; 83
    519e:	96 e0       	ldi	r25, 0x06	; 6
    51a0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
                command_state = CONSOLE;
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	80 93 41 02 	sts	0x0241, r24
    51aa:	b1 c0       	rjmp	.+354    	; 0x530e <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    51ac:	8d e2       	ldi	r24, 0x2D	; 45
    51ae:	96 e0       	ldi	r25, 0x06	; 6
    51b0:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    51b4:	8b e1       	ldi	r24, 0x1B	; 27
    51b6:	96 e0       	ldi	r25, 0x06	; 6
    51b8:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    51bc:	80 91 13 01 	lds	r24, 0x0113
    51c0:	1f 92       	push	r1
    51c2:	8f 93       	push	r24
    51c4:	88 e1       	ldi	r24, 0x18	; 24
    51c6:	96 e0       	ldi	r25, 0x06	; 6
    51c8:	9f 93       	push	r25
    51ca:	8f 93       	push	r24
    51cc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    51d0:	86 e1       	ldi	r24, 0x16	; 22
    51d2:	96 e0       	ldi	r25, 0x06	; 6
    51d4:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    51d8:	84 e0       	ldi	r24, 0x04	; 4
    51da:	96 e0       	ldi	r25, 0x06	; 6
    51dc:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    51e0:	80 91 12 01 	lds	r24, 0x0112
    51e4:	1f 92       	push	r1
    51e6:	8f 93       	push	r24
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	96 e0       	ldi	r25, 0x06	; 6
    51ec:	9f 93       	push	r25
    51ee:	8f 93       	push	r24
    51f0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    51f4:	8f ef       	ldi	r24, 0xFF	; 255
    51f6:	95 e0       	ldi	r25, 0x05	; 5
    51f8:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    51fc:	80 ef       	ldi	r24, 0xF0	; 240
    51fe:	95 e0       	ldi	r25, 0x05	; 5
    5200:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    5204:	80 91 11 01 	lds	r24, 0x0111
    5208:	1f 92       	push	r1
    520a:	8f 93       	push	r24
    520c:	8d ee       	ldi	r24, 0xED	; 237
    520e:	95 e0       	ldi	r25, 0x05	; 5
    5210:	9f 93       	push	r25
    5212:	8f 93       	push	r24
    5214:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    5218:	8b ee       	ldi	r24, 0xEB	; 235
    521a:	95 e0       	ldi	r25, 0x05	; 5
    521c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5220:	8a ed       	ldi	r24, 0xDA	; 218
    5222:	95 e0       	ldi	r25, 0x05	; 5
    5224:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    5228:	80 91 10 01 	lds	r24, 0x0110
    522c:	1f 92       	push	r1
    522e:	8f 93       	push	r24
    5230:	87 ed       	ldi	r24, 0xD7	; 215
    5232:	95 e0       	ldi	r25, 0x05	; 5
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    523c:	85 ed       	ldi	r24, 0xD5	; 213
    523e:	95 e0       	ldi	r25, 0x05	; 5
    5240:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5244:	80 ec       	ldi	r24, 0xC0	; 192
    5246:	95 e0       	ldi	r25, 0x05	; 5
    5248:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    524c:	80 91 0f 01 	lds	r24, 0x010F
    5250:	1f 92       	push	r1
    5252:	8f 93       	push	r24
    5254:	8d eb       	ldi	r24, 0xBD	; 189
    5256:	95 e0       	ldi	r25, 0x05	; 5
    5258:	9f 93       	push	r25
    525a:	8f 93       	push	r24
    525c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    5260:	8b eb       	ldi	r24, 0xBB	; 187
    5262:	95 e0       	ldi	r25, 0x05	; 5
    5264:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5268:	84 ea       	ldi	r24, 0xA4	; 164
    526a:	95 e0       	ldi	r25, 0x05	; 5
    526c:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    5270:	80 91 0e 01 	lds	r24, 0x010E
    5274:	1f 92       	push	r1
    5276:	8f 93       	push	r24
    5278:	81 ea       	ldi	r24, 0xA1	; 161
    527a:	95 e0       	ldi	r25, 0x05	; 5
    527c:	9f 93       	push	r25
    527e:	8f 93       	push	r24
    5280:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    5284:	8f e9       	ldi	r24, 0x9F	; 159
    5286:	95 e0       	ldi	r25, 0x05	; 5
    5288:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
    528c:	8d b7       	in	r24, 0x3d	; 61
    528e:	9e b7       	in	r25, 0x3e	; 62
    5290:	48 96       	adiw	r24, 0x18	; 24
    5292:	0f b6       	in	r0, 0x3f	; 63
    5294:	f8 94       	cli
    5296:	9e bf       	out	0x3e, r25	; 62
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	8d bf       	out	0x3d, r24	; 61
    529c:	1b c0       	rjmp	.+54     	; 0x52d4 <command_proc+0x266>
    529e:	ce 51       	subi	r28, 0x1E	; 30
    52a0:	ec 2f       	mov	r30, r28
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	e7 5d       	subi	r30, 0xD7	; 215
    52a6:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    52a8:	80 81       	ld	r24, Z
    52aa:	80 93 40 02 	sts	0x0240, r24
    52ae:	12 c0       	rjmp	.+36     	; 0x52d4 <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    52b0:	61 e0       	ldi	r22, 0x01	; 1
    52b2:	03 c0       	rjmp	.+6      	; 0x52ba <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    52b4:	61 e0       	ldi	r22, 0x01	; 1
    52b6:	06 c0       	rjmp	.+12     	; 0x52c4 <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    52b8:	6a e0       	ldi	r22, 0x0A	; 10
    52ba:	80 91 40 02 	lds	r24, 0x0240
    52be:	0e 94 a5 24 	call	0x494a	; 0x494a <mousekey_param_inc>
    52c2:	08 c0       	rjmp	.+16     	; 0x52d4 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    52c4:	80 91 40 02 	lds	r24, 0x0240
    52c8:	0e 94 48 25 	call	0x4a90	; 0x4a90 <mousekey_param_dec>
    52cc:	03 c0       	rjmp	.+6      	; 0x52d4 <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    52ce:	84 e4       	ldi	r24, 0x44	; 68
    52d0:	96 e0       	ldi	r25, 0x06	; 6
    52d2:	13 c0       	rjmp	.+38     	; 0x52fa <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    52d4:	80 91 40 02 	lds	r24, 0x0240
    52d8:	88 23       	and	r24, r24
    52da:	69 f0       	breq	.+26     	; 0x52f6 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    52dc:	1f 92       	push	r1
    52de:	8f 93       	push	r24
    52e0:	8e e3       	ldi	r24, 0x3E	; 62
    52e2:	96 e0       	ldi	r25, 0x06	; 6
    52e4:	9f 93       	push	r25
    52e6:	8f 93       	push	r24
    52e8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__xprintf>
    52ec:	0f 90       	pop	r0
    52ee:	0f 90       	pop	r0
    52f0:	0f 90       	pop	r0
    52f2:	0f 90       	pop	r0
    52f4:	04 c0       	rjmp	.+8      	; 0x52fe <command_proc+0x290>
    } else {
        print("M>" );
    52f6:	8b e3       	ldi	r24, 0x3B	; 59
    52f8:	96 e0       	ldi	r25, 0x06	; 6
    52fa:	0e 94 4b 06 	call	0xc96	; 0xc96 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	06 c0       	rjmp	.+12     	; 0x530e <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5302:	10 92 41 02 	sts	0x0241, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5306:	80 e0       	ldi	r24, 0x00	; 0
    5308:	02 c0       	rjmp	.+4      	; 0x530e <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	00 cf       	rjmp	.-512    	; 0x510e <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    530e:	cf 91       	pop	r28
    5310:	08 95       	ret

00005312 <__fixsfsi>:
    5312:	04 d0       	rcall	.+8      	; 0x531c <__fixunssfsi>
    5314:	68 94       	set
    5316:	b1 11       	cpse	r27, r1
    5318:	8d c0       	rjmp	.+282    	; 0x5434 <__fp_szero>
    531a:	08 95       	ret

0000531c <__fixunssfsi>:
    531c:	70 d0       	rcall	.+224    	; 0x53fe <__fp_splitA>
    531e:	88 f0       	brcs	.+34     	; 0x5342 <__fixunssfsi+0x26>
    5320:	9f 57       	subi	r25, 0x7F	; 127
    5322:	90 f0       	brcs	.+36     	; 0x5348 <__fixunssfsi+0x2c>
    5324:	b9 2f       	mov	r27, r25
    5326:	99 27       	eor	r25, r25
    5328:	b7 51       	subi	r27, 0x17	; 23
    532a:	a0 f0       	brcs	.+40     	; 0x5354 <__fixunssfsi+0x38>
    532c:	d1 f0       	breq	.+52     	; 0x5362 <__fixunssfsi+0x46>
    532e:	66 0f       	add	r22, r22
    5330:	77 1f       	adc	r23, r23
    5332:	88 1f       	adc	r24, r24
    5334:	99 1f       	adc	r25, r25
    5336:	1a f0       	brmi	.+6      	; 0x533e <__fixunssfsi+0x22>
    5338:	ba 95       	dec	r27
    533a:	c9 f7       	brne	.-14     	; 0x532e <__fixunssfsi+0x12>
    533c:	12 c0       	rjmp	.+36     	; 0x5362 <__fixunssfsi+0x46>
    533e:	b1 30       	cpi	r27, 0x01	; 1
    5340:	81 f0       	breq	.+32     	; 0x5362 <__fixunssfsi+0x46>
    5342:	77 d0       	rcall	.+238    	; 0x5432 <__fp_zero>
    5344:	b1 e0       	ldi	r27, 0x01	; 1
    5346:	08 95       	ret
    5348:	74 c0       	rjmp	.+232    	; 0x5432 <__fp_zero>
    534a:	67 2f       	mov	r22, r23
    534c:	78 2f       	mov	r23, r24
    534e:	88 27       	eor	r24, r24
    5350:	b8 5f       	subi	r27, 0xF8	; 248
    5352:	39 f0       	breq	.+14     	; 0x5362 <__fixunssfsi+0x46>
    5354:	b9 3f       	cpi	r27, 0xF9	; 249
    5356:	cc f3       	brlt	.-14     	; 0x534a <__fixunssfsi+0x2e>
    5358:	86 95       	lsr	r24
    535a:	77 95       	ror	r23
    535c:	67 95       	ror	r22
    535e:	b3 95       	inc	r27
    5360:	d9 f7       	brne	.-10     	; 0x5358 <__fixunssfsi+0x3c>
    5362:	3e f4       	brtc	.+14     	; 0x5372 <__fixunssfsi+0x56>
    5364:	90 95       	com	r25
    5366:	80 95       	com	r24
    5368:	70 95       	com	r23
    536a:	61 95       	neg	r22
    536c:	7f 4f       	sbci	r23, 0xFF	; 255
    536e:	8f 4f       	sbci	r24, 0xFF	; 255
    5370:	9f 4f       	sbci	r25, 0xFF	; 255
    5372:	08 95       	ret

00005374 <__floatunsisf>:
    5374:	e8 94       	clt
    5376:	09 c0       	rjmp	.+18     	; 0x538a <__floatsisf+0x12>

00005378 <__floatsisf>:
    5378:	97 fb       	bst	r25, 7
    537a:	3e f4       	brtc	.+14     	; 0x538a <__floatsisf+0x12>
    537c:	90 95       	com	r25
    537e:	80 95       	com	r24
    5380:	70 95       	com	r23
    5382:	61 95       	neg	r22
    5384:	7f 4f       	sbci	r23, 0xFF	; 255
    5386:	8f 4f       	sbci	r24, 0xFF	; 255
    5388:	9f 4f       	sbci	r25, 0xFF	; 255
    538a:	99 23       	and	r25, r25
    538c:	a9 f0       	breq	.+42     	; 0x53b8 <__floatsisf+0x40>
    538e:	f9 2f       	mov	r31, r25
    5390:	96 e9       	ldi	r25, 0x96	; 150
    5392:	bb 27       	eor	r27, r27
    5394:	93 95       	inc	r25
    5396:	f6 95       	lsr	r31
    5398:	87 95       	ror	r24
    539a:	77 95       	ror	r23
    539c:	67 95       	ror	r22
    539e:	b7 95       	ror	r27
    53a0:	f1 11       	cpse	r31, r1
    53a2:	f8 cf       	rjmp	.-16     	; 0x5394 <__floatsisf+0x1c>
    53a4:	fa f4       	brpl	.+62     	; 0x53e4 <__floatsisf+0x6c>
    53a6:	bb 0f       	add	r27, r27
    53a8:	11 f4       	brne	.+4      	; 0x53ae <__floatsisf+0x36>
    53aa:	60 ff       	sbrs	r22, 0
    53ac:	1b c0       	rjmp	.+54     	; 0x53e4 <__floatsisf+0x6c>
    53ae:	6f 5f       	subi	r22, 0xFF	; 255
    53b0:	7f 4f       	sbci	r23, 0xFF	; 255
    53b2:	8f 4f       	sbci	r24, 0xFF	; 255
    53b4:	9f 4f       	sbci	r25, 0xFF	; 255
    53b6:	16 c0       	rjmp	.+44     	; 0x53e4 <__floatsisf+0x6c>
    53b8:	88 23       	and	r24, r24
    53ba:	11 f0       	breq	.+4      	; 0x53c0 <__floatsisf+0x48>
    53bc:	96 e9       	ldi	r25, 0x96	; 150
    53be:	11 c0       	rjmp	.+34     	; 0x53e2 <__floatsisf+0x6a>
    53c0:	77 23       	and	r23, r23
    53c2:	21 f0       	breq	.+8      	; 0x53cc <__floatsisf+0x54>
    53c4:	9e e8       	ldi	r25, 0x8E	; 142
    53c6:	87 2f       	mov	r24, r23
    53c8:	76 2f       	mov	r23, r22
    53ca:	05 c0       	rjmp	.+10     	; 0x53d6 <__floatsisf+0x5e>
    53cc:	66 23       	and	r22, r22
    53ce:	71 f0       	breq	.+28     	; 0x53ec <__floatsisf+0x74>
    53d0:	96 e8       	ldi	r25, 0x86	; 134
    53d2:	86 2f       	mov	r24, r22
    53d4:	70 e0       	ldi	r23, 0x00	; 0
    53d6:	60 e0       	ldi	r22, 0x00	; 0
    53d8:	2a f0       	brmi	.+10     	; 0x53e4 <__floatsisf+0x6c>
    53da:	9a 95       	dec	r25
    53dc:	66 0f       	add	r22, r22
    53de:	77 1f       	adc	r23, r23
    53e0:	88 1f       	adc	r24, r24
    53e2:	da f7       	brpl	.-10     	; 0x53da <__floatsisf+0x62>
    53e4:	88 0f       	add	r24, r24
    53e6:	96 95       	lsr	r25
    53e8:	87 95       	ror	r24
    53ea:	97 f9       	bld	r25, 7
    53ec:	08 95       	ret

000053ee <__fp_split3>:
    53ee:	57 fd       	sbrc	r21, 7
    53f0:	90 58       	subi	r25, 0x80	; 128
    53f2:	44 0f       	add	r20, r20
    53f4:	55 1f       	adc	r21, r21
    53f6:	59 f0       	breq	.+22     	; 0x540e <__fp_splitA+0x10>
    53f8:	5f 3f       	cpi	r21, 0xFF	; 255
    53fa:	71 f0       	breq	.+28     	; 0x5418 <__fp_splitA+0x1a>
    53fc:	47 95       	ror	r20

000053fe <__fp_splitA>:
    53fe:	88 0f       	add	r24, r24
    5400:	97 fb       	bst	r25, 7
    5402:	99 1f       	adc	r25, r25
    5404:	61 f0       	breq	.+24     	; 0x541e <__fp_splitA+0x20>
    5406:	9f 3f       	cpi	r25, 0xFF	; 255
    5408:	79 f0       	breq	.+30     	; 0x5428 <__fp_splitA+0x2a>
    540a:	87 95       	ror	r24
    540c:	08 95       	ret
    540e:	12 16       	cp	r1, r18
    5410:	13 06       	cpc	r1, r19
    5412:	14 06       	cpc	r1, r20
    5414:	55 1f       	adc	r21, r21
    5416:	f2 cf       	rjmp	.-28     	; 0x53fc <__fp_split3+0xe>
    5418:	46 95       	lsr	r20
    541a:	f1 df       	rcall	.-30     	; 0x53fe <__fp_splitA>
    541c:	08 c0       	rjmp	.+16     	; 0x542e <__fp_splitA+0x30>
    541e:	16 16       	cp	r1, r22
    5420:	17 06       	cpc	r1, r23
    5422:	18 06       	cpc	r1, r24
    5424:	99 1f       	adc	r25, r25
    5426:	f1 cf       	rjmp	.-30     	; 0x540a <__fp_splitA+0xc>
    5428:	86 95       	lsr	r24
    542a:	71 05       	cpc	r23, r1
    542c:	61 05       	cpc	r22, r1
    542e:	08 94       	sec
    5430:	08 95       	ret

00005432 <__fp_zero>:
    5432:	e8 94       	clt

00005434 <__fp_szero>:
    5434:	bb 27       	eor	r27, r27
    5436:	66 27       	eor	r22, r22
    5438:	77 27       	eor	r23, r23
    543a:	cb 01       	movw	r24, r22
    543c:	97 f9       	bld	r25, 7
    543e:	08 95       	ret

00005440 <__mulsf3>:
    5440:	0b d0       	rcall	.+22     	; 0x5458 <__mulsf3x>
    5442:	78 c0       	rjmp	.+240    	; 0x5534 <__fp_round>
    5444:	69 d0       	rcall	.+210    	; 0x5518 <__fp_pscA>
    5446:	28 f0       	brcs	.+10     	; 0x5452 <__mulsf3+0x12>
    5448:	6e d0       	rcall	.+220    	; 0x5526 <__fp_pscB>
    544a:	18 f0       	brcs	.+6      	; 0x5452 <__mulsf3+0x12>
    544c:	95 23       	and	r25, r21
    544e:	09 f0       	breq	.+2      	; 0x5452 <__mulsf3+0x12>
    5450:	5a c0       	rjmp	.+180    	; 0x5506 <__fp_inf>
    5452:	5f c0       	rjmp	.+190    	; 0x5512 <__fp_nan>
    5454:	11 24       	eor	r1, r1
    5456:	ee cf       	rjmp	.-36     	; 0x5434 <__fp_szero>

00005458 <__mulsf3x>:
    5458:	ca df       	rcall	.-108    	; 0x53ee <__fp_split3>
    545a:	a0 f3       	brcs	.-24     	; 0x5444 <__mulsf3+0x4>

0000545c <__mulsf3_pse>:
    545c:	95 9f       	mul	r25, r21
    545e:	d1 f3       	breq	.-12     	; 0x5454 <__mulsf3+0x14>
    5460:	95 0f       	add	r25, r21
    5462:	50 e0       	ldi	r21, 0x00	; 0
    5464:	55 1f       	adc	r21, r21
    5466:	62 9f       	mul	r22, r18
    5468:	f0 01       	movw	r30, r0
    546a:	72 9f       	mul	r23, r18
    546c:	bb 27       	eor	r27, r27
    546e:	f0 0d       	add	r31, r0
    5470:	b1 1d       	adc	r27, r1
    5472:	63 9f       	mul	r22, r19
    5474:	aa 27       	eor	r26, r26
    5476:	f0 0d       	add	r31, r0
    5478:	b1 1d       	adc	r27, r1
    547a:	aa 1f       	adc	r26, r26
    547c:	64 9f       	mul	r22, r20
    547e:	66 27       	eor	r22, r22
    5480:	b0 0d       	add	r27, r0
    5482:	a1 1d       	adc	r26, r1
    5484:	66 1f       	adc	r22, r22
    5486:	82 9f       	mul	r24, r18
    5488:	22 27       	eor	r18, r18
    548a:	b0 0d       	add	r27, r0
    548c:	a1 1d       	adc	r26, r1
    548e:	62 1f       	adc	r22, r18
    5490:	73 9f       	mul	r23, r19
    5492:	b0 0d       	add	r27, r0
    5494:	a1 1d       	adc	r26, r1
    5496:	62 1f       	adc	r22, r18
    5498:	83 9f       	mul	r24, r19
    549a:	a0 0d       	add	r26, r0
    549c:	61 1d       	adc	r22, r1
    549e:	22 1f       	adc	r18, r18
    54a0:	74 9f       	mul	r23, r20
    54a2:	33 27       	eor	r19, r19
    54a4:	a0 0d       	add	r26, r0
    54a6:	61 1d       	adc	r22, r1
    54a8:	23 1f       	adc	r18, r19
    54aa:	84 9f       	mul	r24, r20
    54ac:	60 0d       	add	r22, r0
    54ae:	21 1d       	adc	r18, r1
    54b0:	82 2f       	mov	r24, r18
    54b2:	76 2f       	mov	r23, r22
    54b4:	6a 2f       	mov	r22, r26
    54b6:	11 24       	eor	r1, r1
    54b8:	9f 57       	subi	r25, 0x7F	; 127
    54ba:	50 40       	sbci	r21, 0x00	; 0
    54bc:	8a f0       	brmi	.+34     	; 0x54e0 <__mulsf3_pse+0x84>
    54be:	e1 f0       	breq	.+56     	; 0x54f8 <__mulsf3_pse+0x9c>
    54c0:	88 23       	and	r24, r24
    54c2:	4a f0       	brmi	.+18     	; 0x54d6 <__mulsf3_pse+0x7a>
    54c4:	ee 0f       	add	r30, r30
    54c6:	ff 1f       	adc	r31, r31
    54c8:	bb 1f       	adc	r27, r27
    54ca:	66 1f       	adc	r22, r22
    54cc:	77 1f       	adc	r23, r23
    54ce:	88 1f       	adc	r24, r24
    54d0:	91 50       	subi	r25, 0x01	; 1
    54d2:	50 40       	sbci	r21, 0x00	; 0
    54d4:	a9 f7       	brne	.-22     	; 0x54c0 <__mulsf3_pse+0x64>
    54d6:	9e 3f       	cpi	r25, 0xFE	; 254
    54d8:	51 05       	cpc	r21, r1
    54da:	70 f0       	brcs	.+28     	; 0x54f8 <__mulsf3_pse+0x9c>
    54dc:	14 c0       	rjmp	.+40     	; 0x5506 <__fp_inf>
    54de:	aa cf       	rjmp	.-172    	; 0x5434 <__fp_szero>
    54e0:	5f 3f       	cpi	r21, 0xFF	; 255
    54e2:	ec f3       	brlt	.-6      	; 0x54de <__mulsf3_pse+0x82>
    54e4:	98 3e       	cpi	r25, 0xE8	; 232
    54e6:	dc f3       	brlt	.-10     	; 0x54de <__mulsf3_pse+0x82>
    54e8:	86 95       	lsr	r24
    54ea:	77 95       	ror	r23
    54ec:	67 95       	ror	r22
    54ee:	b7 95       	ror	r27
    54f0:	f7 95       	ror	r31
    54f2:	e7 95       	ror	r30
    54f4:	9f 5f       	subi	r25, 0xFF	; 255
    54f6:	c1 f7       	brne	.-16     	; 0x54e8 <__mulsf3_pse+0x8c>
    54f8:	fe 2b       	or	r31, r30
    54fa:	88 0f       	add	r24, r24
    54fc:	91 1d       	adc	r25, r1
    54fe:	96 95       	lsr	r25
    5500:	87 95       	ror	r24
    5502:	97 f9       	bld	r25, 7
    5504:	08 95       	ret

00005506 <__fp_inf>:
    5506:	97 f9       	bld	r25, 7
    5508:	9f 67       	ori	r25, 0x7F	; 127
    550a:	80 e8       	ldi	r24, 0x80	; 128
    550c:	70 e0       	ldi	r23, 0x00	; 0
    550e:	60 e0       	ldi	r22, 0x00	; 0
    5510:	08 95       	ret

00005512 <__fp_nan>:
    5512:	9f ef       	ldi	r25, 0xFF	; 255
    5514:	80 ec       	ldi	r24, 0xC0	; 192
    5516:	08 95       	ret

00005518 <__fp_pscA>:
    5518:	00 24       	eor	r0, r0
    551a:	0a 94       	dec	r0
    551c:	16 16       	cp	r1, r22
    551e:	17 06       	cpc	r1, r23
    5520:	18 06       	cpc	r1, r24
    5522:	09 06       	cpc	r0, r25
    5524:	08 95       	ret

00005526 <__fp_pscB>:
    5526:	00 24       	eor	r0, r0
    5528:	0a 94       	dec	r0
    552a:	12 16       	cp	r1, r18
    552c:	13 06       	cpc	r1, r19
    552e:	14 06       	cpc	r1, r20
    5530:	05 06       	cpc	r0, r21
    5532:	08 95       	ret

00005534 <__fp_round>:
    5534:	09 2e       	mov	r0, r25
    5536:	03 94       	inc	r0
    5538:	00 0c       	add	r0, r0
    553a:	11 f4       	brne	.+4      	; 0x5540 <__fp_round+0xc>
    553c:	88 23       	and	r24, r24
    553e:	52 f0       	brmi	.+20     	; 0x5554 <__fp_round+0x20>
    5540:	bb 0f       	add	r27, r27
    5542:	40 f4       	brcc	.+16     	; 0x5554 <__fp_round+0x20>
    5544:	bf 2b       	or	r27, r31
    5546:	11 f4       	brne	.+4      	; 0x554c <__fp_round+0x18>
    5548:	60 ff       	sbrs	r22, 0
    554a:	04 c0       	rjmp	.+8      	; 0x5554 <__fp_round+0x20>
    554c:	6f 5f       	subi	r22, 0xFF	; 255
    554e:	7f 4f       	sbci	r23, 0xFF	; 255
    5550:	8f 4f       	sbci	r24, 0xFF	; 255
    5552:	9f 4f       	sbci	r25, 0xFF	; 255
    5554:	08 95       	ret

00005556 <__udivmodqi4>:
    5556:	99 1b       	sub	r25, r25
    5558:	79 e0       	ldi	r23, 0x09	; 9
    555a:	04 c0       	rjmp	.+8      	; 0x5564 <__udivmodqi4_ep>

0000555c <__udivmodqi4_loop>:
    555c:	99 1f       	adc	r25, r25
    555e:	96 17       	cp	r25, r22
    5560:	08 f0       	brcs	.+2      	; 0x5564 <__udivmodqi4_ep>
    5562:	96 1b       	sub	r25, r22

00005564 <__udivmodqi4_ep>:
    5564:	88 1f       	adc	r24, r24
    5566:	7a 95       	dec	r23
    5568:	c9 f7       	brne	.-14     	; 0x555c <__udivmodqi4_loop>
    556a:	80 95       	com	r24
    556c:	08 95       	ret

0000556e <__divmodhi4>:
    556e:	97 fb       	bst	r25, 7
    5570:	07 2e       	mov	r0, r23
    5572:	16 f4       	brtc	.+4      	; 0x5578 <__divmodhi4+0xa>
    5574:	00 94       	com	r0
    5576:	07 d0       	rcall	.+14     	; 0x5586 <__divmodhi4_neg1>
    5578:	77 fd       	sbrc	r23, 7
    557a:	09 d0       	rcall	.+18     	; 0x558e <__divmodhi4_neg2>
    557c:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__udivmodhi4>
    5580:	07 fc       	sbrc	r0, 7
    5582:	05 d0       	rcall	.+10     	; 0x558e <__divmodhi4_neg2>
    5584:	3e f4       	brtc	.+14     	; 0x5594 <__divmodhi4_exit>

00005586 <__divmodhi4_neg1>:
    5586:	90 95       	com	r25
    5588:	81 95       	neg	r24
    558a:	9f 4f       	sbci	r25, 0xFF	; 255
    558c:	08 95       	ret

0000558e <__divmodhi4_neg2>:
    558e:	70 95       	com	r23
    5590:	61 95       	neg	r22
    5592:	7f 4f       	sbci	r23, 0xFF	; 255

00005594 <__divmodhi4_exit>:
    5594:	08 95       	ret

00005596 <__tablejump2__>:
    5596:	ee 0f       	add	r30, r30
    5598:	ff 1f       	adc	r31, r31

0000559a <__tablejump__>:
    559a:	05 90       	lpm	r0, Z+
    559c:	f4 91       	lpm	r31, Z
    559e:	e0 2d       	mov	r30, r0
    55a0:	09 94       	ijmp

000055a2 <__udivmodhi4>:
    55a2:	aa 1b       	sub	r26, r26
    55a4:	bb 1b       	sub	r27, r27
    55a6:	51 e1       	ldi	r21, 0x11	; 17
    55a8:	07 c0       	rjmp	.+14     	; 0x55b8 <__udivmodhi4_ep>

000055aa <__udivmodhi4_loop>:
    55aa:	aa 1f       	adc	r26, r26
    55ac:	bb 1f       	adc	r27, r27
    55ae:	a6 17       	cp	r26, r22
    55b0:	b7 07       	cpc	r27, r23
    55b2:	10 f0       	brcs	.+4      	; 0x55b8 <__udivmodhi4_ep>
    55b4:	a6 1b       	sub	r26, r22
    55b6:	b7 0b       	sbc	r27, r23

000055b8 <__udivmodhi4_ep>:
    55b8:	88 1f       	adc	r24, r24
    55ba:	99 1f       	adc	r25, r25
    55bc:	5a 95       	dec	r21
    55be:	a9 f7       	brne	.-22     	; 0x55aa <__udivmodhi4_loop>
    55c0:	80 95       	com	r24
    55c2:	90 95       	com	r25
    55c4:	bc 01       	movw	r22, r24
    55c6:	cd 01       	movw	r24, r26
    55c8:	08 95       	ret

000055ca <__eerd_byte_m32u4>:
    55ca:	f9 99       	sbic	0x1f, 1	; 31
    55cc:	fe cf       	rjmp	.-4      	; 0x55ca <__eerd_byte_m32u4>
    55ce:	92 bd       	out	0x22, r25	; 34
    55d0:	81 bd       	out	0x21, r24	; 33
    55d2:	f8 9a       	sbi	0x1f, 0	; 31
    55d4:	99 27       	eor	r25, r25
    55d6:	80 b5       	in	r24, 0x20	; 32
    55d8:	08 95       	ret

000055da <__eerd_word_m32u4>:
    55da:	a8 e1       	ldi	r26, 0x18	; 24
    55dc:	b0 e0       	ldi	r27, 0x00	; 0
    55de:	42 e0       	ldi	r20, 0x02	; 2
    55e0:	50 e0       	ldi	r21, 0x00	; 0
    55e2:	0c 94 08 2b 	jmp	0x5610	; 0x5610 <__eerd_blraw_m32u4>

000055e6 <__eewr_byte_m32u4>:
    55e6:	26 2f       	mov	r18, r22

000055e8 <__eewr_r18_m32u4>:
    55e8:	f9 99       	sbic	0x1f, 1	; 31
    55ea:	fe cf       	rjmp	.-4      	; 0x55e8 <__eewr_r18_m32u4>
    55ec:	1f ba       	out	0x1f, r1	; 31
    55ee:	92 bd       	out	0x22, r25	; 34
    55f0:	81 bd       	out	0x21, r24	; 33
    55f2:	20 bd       	out	0x20, r18	; 32
    55f4:	0f b6       	in	r0, 0x3f	; 63
    55f6:	f8 94       	cli
    55f8:	fa 9a       	sbi	0x1f, 2	; 31
    55fa:	f9 9a       	sbi	0x1f, 1	; 31
    55fc:	0f be       	out	0x3f, r0	; 63
    55fe:	01 96       	adiw	r24, 0x01	; 1
    5600:	08 95       	ret

00005602 <__eewr_word_m32u4>:
    5602:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__eewr_byte_m32u4>
    5606:	27 2f       	mov	r18, r23
    5608:	0c 94 f4 2a 	jmp	0x55e8	; 0x55e8 <__eewr_r18_m32u4>

0000560c <__eerd_block_m32u4>:
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22

00005610 <__eerd_blraw_m32u4>:
    5610:	fc 01       	movw	r30, r24
    5612:	f9 99       	sbic	0x1f, 1	; 31
    5614:	fe cf       	rjmp	.-4      	; 0x5612 <__eerd_blraw_m32u4+0x2>
    5616:	06 c0       	rjmp	.+12     	; 0x5624 <__eerd_blraw_m32u4+0x14>
    5618:	f2 bd       	out	0x22, r31	; 34
    561a:	e1 bd       	out	0x21, r30	; 33
    561c:	f8 9a       	sbi	0x1f, 0	; 31
    561e:	31 96       	adiw	r30, 0x01	; 1
    5620:	00 b4       	in	r0, 0x20	; 32
    5622:	0d 92       	st	X+, r0
    5624:	41 50       	subi	r20, 0x01	; 1
    5626:	50 40       	sbci	r21, 0x00	; 0
    5628:	b8 f7       	brcc	.-18     	; 0x5618 <__eerd_blraw_m32u4+0x8>
    562a:	08 95       	ret

0000562c <_exit>:
    562c:	f8 94       	cli

0000562e <__stop_program>:
    562e:	ff cf       	rjmp	.-2      	; 0x562e <__stop_program>
